{"version":3,"sources":["webpack:///noise/bundle.js","webpack:///./examples/noise/index.js","webpack:///./src/glsl/noise.min.glsl.js"],"names":["webpackJsonp","module","exports","__webpack_require__","getRenderable","inverse","Float32Array","Renderable","getUniforms","m4","camera","computeMatrix","factory","shader","Shader","fragment_header","attributes","position","vertex_uniforms","varyings","v_position","plate","Plate","DkcpGl","shaders","main","Allocation","canvas","document","getElementById","frameRate","element","wasd","delta","theta","Math","PI","screen","noise","addRenderable","add","z","beginFrameRendering",33],"mappings":"AAAAA,cAAc,IAER,EACA,SAASC,EAAQC,EAASC,GCoBhC,QAAAC,KACA,GAAAC,GAAA,GAAAC,cAAA,GACA,WAAAC,IACAC,YAAA,WAEA,MADAC,GAAAJ,QAAAK,EAAAC,gBAAAN,IAEAK,OAAAL,IAGAO,QAAA,WACA,GAAAC,GAAA,GAAAC,GAAA,WACA,wIAIO,WACP,ulBAmBAD,GAAAE,iBAAAZ,EAAA,IACAU,EAAAG,WAAAC,SAAA,OACAJ,EAAAK,gBAAAR,OAAA,OACAG,EAAAM,SAAAC,WAAA,MAGA,IAAAC,GAAA,GAAAC,GAAAT,EACA,OAAAQ,MAjEA,GAAAZ,GAAAN,EAAA,GAAAM,GACAc,EAAApB,EAAA,GAEAI,EAAAgB,EAAAhB,WACAe,EAAAC,EAAAD,MAEAR,GADAS,EAAAC,QACAD,EAAAT,QAGAW,GAFAF,EAAAG,WAEA,GAAAH,IACAI,OAAAC,SAAAC,eAAA,UACAC,WACAC,QAAAH,SAAAC,eAAA,cAEAG,MACAJ,kBACAK,MAAA,KACAC,OAAAC,KAAAC,GAAA,OAGA1B,EAAAe,EAAAf,OACA2B,EAAAZ,EAAAY,OAkDAC,EAAAlC,GACAiC,GAAAE,cAAAD,GACAA,EAAAE,KACAC,EAAA,KAGAJ,EAAAK,qBAAA,IDUMC,GACA,SAAS1C,EAAQC,GExFvBD,EAAAC,QAAA","file":"noise/bundle.js","sourcesContent":["webpackJsonp([4],{\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar m4                = __webpack_require__(7).m4\n\tvar DkcpGl            = __webpack_require__(1)\n\t\n\tvar Renderable        = DkcpGl.Renderable\n\tvar Plate             = DkcpGl.Plate\n\tvar shaders           = DkcpGl.shaders\n\tvar Shader            = DkcpGl.Shader\n\tvar Allocation        = DkcpGl.Allocation\n\t\n\tvar main = new DkcpGl({\n\t  canvas : document.getElementById('canvas'),\n\t  frameRate : {\n\t    element : document.getElementById('framerate')\n\t  },\n\t  wasd : {\n\t    document : document,\n\t    delta : .012,\n\t    theta : -Math.PI / 60\n\t  }\n\t})\n\tvar camera = main.camera;\n\tvar screen = main.screen;\n\t\n\tfunction getRenderable() {\n\t  var inverse = new Float32Array(16);\n\t  return new Renderable({\n\t    getUniforms : function () {\n\t      m4.inverse(camera.computeMatrix(), inverse);\n\t      return {\n\t        camera : inverse\n\t      }\n\t    },\n\t    factory : function () {\n\t      var shader = new Shader(function () {\n\t        return (\n\t          '  v_position  = camera * (position * vec4(10.0, 10.0, 0.0, 1.0)); \\n' +\n\t          '  gl_Position = vec4(position.x, position.y, 0.5, 1.0); \\n'\n\t        ) \n\t      }, function () {\n\t        return (\n\t          '  float n2 = snoise(vec3(v_position.x / 4.0, v_position.y / 4.0, v_position.z / 4.0));\\n' +\n\t          '  n2 = (1.0 - pow(1.0 - abs(n2), 2.0)) * (n2 > 0.0 ? 1.0 : -1.0);\\n' +\n\t          '  n2 = clamp((n2 + 1.0) / 2.0, 0.0, 1.0);\\n' +\n\t          '  n2 = pow(n2, 0.5);\\n' +\n\t          '  n2 = 0.125 + n2 * 0.875;\\n' +\n\t\n\t          '  float n = snoise(vec3(12345.67 + v_position.x / 1.0, v_position.y / 1.0, v_position.z / 1.0));\\n' +\n\t          '  n = (n * 0.5 + (n2 - 0.5)) / 4.0;\\n' +\n\t\n\t          '  n = (1.0 - pow(1.0 - abs(n), 20.0)) * (n > 0.0 ? 1.0 : -1.0);\\n' +\n\t          '  n = clamp((n + 1.0) / 2.0, 0.0, 1.0);\\n' +\n\t          '  n = pow(n, 2.1);\\n' +\n\t          '  n = 0.125 + n * 0.875;\\n' +\n\t\n\t          '  n = 1.0 - n;\\n' +\n\t          '  gl_FragColor = vec4(n, n, n, 1.0);\\n'\n\t        )\n\t      })\n\t      shader.fragment_header += __webpack_require__(33);\n\t      shader.attributes.position    = 'vec4';\n\t      shader.vertex_uniforms.camera = 'mat4';\n\t      shader.varyings.v_position    = 'vec4';\n\t      \n\t      \n\t      var plate = new Plate(shader);\n\t      return plate;\n\t    }\n\t    \n\t  })\n\t}\n\t\n\tvar noise  = getRenderable()\n\tscreen.addRenderable(noise)\n\tnoise.add({\n\t  z: .5\n\t})\n\t\n\tscreen.beginFrameRendering(false)\n\n\n/***/ },\n\n/***/ 33:\n/***/ function(module, exports) {\n\n\tmodule.exports=' vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; } vec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; } vec4 permute(vec4 x) { return mod289(((x*34.0)+1.0)*x); } vec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; } float snoise(vec3 v) { const vec2 C = vec2(1.0/6.0, 1.0/3.0) ; const vec4 D = vec4(0.0, 0.5, 1.0, 2.0); vec3 i = floor(v + dot(v, C.yyy) ); vec3 x0 = v - i + dot(i, C.xxx) ; vec3 g = step(x0.yzx, x0.xyz); vec3 l = 1.0 - g; vec3 i1 = min( g.xyz, l.zxy ); vec3 i2 = max( g.xyz, l.zxy ); vec3 x1 = x0 - i1 + C.xxx; vec3 x2 = x0 - i2 + C.yyy; vec3 x3 = x0 - D.yyy; i = mod289(i); vec4 p = permute( permute( permute( i.z + vec4(0.0, i1.z, i2.z, 1.0 )) + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) + i.x + vec4(0.0, i1.x, i2.x, 1.0 )); float n_ = 0.142857142857; vec3 ns = n_ * D.wyz - D.xzx; vec4 j = p - 49.0 * floor(p * ns.z * ns.z); vec4 x_ = floor(j * ns.z); vec4 y_ = floor(j - 7.0 * x_ ); vec4 x = x_ *ns.x + ns.yyyy; vec4 y = y_ *ns.x + ns.yyyy; vec4 h = 1.0 - abs(x) - abs(y); vec4 b0 = vec4( x.xy, y.xy ); vec4 b1 = vec4( x.zw, y.zw ); vec4 s0 = floor(b0)*2.0 + 1.0; vec4 s1 = floor(b1)*2.0 + 1.0; vec4 sh = -step(h, vec4(0.0)); vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ; vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ; vec3 p0 = vec3(a0.xy,h.x); vec3 p1 = vec3(a0.zw,h.y); vec3 p2 = vec3(a1.xy,h.z); vec3 p3 = vec3(a1.zw,h.w); vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3))); p0 *= norm.x; p1 *= norm.y; p2 *= norm.z; p3 *= norm.w; vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0); m = m * m; return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) ); } ';\n\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** noise/bundle.js\n **/","var m4                = require('../../lib/twgl').m4\nvar DkcpGl            = require('../../src/dkcp-gl')\n\nvar Renderable        = DkcpGl.Renderable\nvar Plate             = DkcpGl.Plate\nvar shaders           = DkcpGl.shaders\nvar Shader            = DkcpGl.Shader\nvar Allocation        = DkcpGl.Allocation\n\nvar main = new DkcpGl({\n  canvas : document.getElementById('canvas'),\n  frameRate : {\n    element : document.getElementById('framerate')\n  },\n  wasd : {\n    document : document,\n    delta : .012,\n    theta : -Math.PI / 60\n  }\n})\nvar camera = main.camera;\nvar screen = main.screen;\n\nfunction getRenderable() {\n  var inverse = new Float32Array(16);\n  return new Renderable({\n    getUniforms : function () {\n      m4.inverse(camera.computeMatrix(), inverse);\n      return {\n        camera : inverse\n      }\n    },\n    factory : function () {\n      var shader = new Shader(function () {\n        return (\n          '  v_position  = camera * (position * vec4(10.0, 10.0, 0.0, 1.0)); \\n' +\n          '  gl_Position = vec4(position.x, position.y, 0.5, 1.0); \\n'\n        ) \n      }, function () {\n        return (\n          '  float n2 = snoise(vec3(v_position.x / 4.0, v_position.y / 4.0, v_position.z / 4.0));\\n' +\n          '  n2 = (1.0 - pow(1.0 - abs(n2), 2.0)) * (n2 > 0.0 ? 1.0 : -1.0);\\n' +\n          '  n2 = clamp((n2 + 1.0) / 2.0, 0.0, 1.0);\\n' +\n          '  n2 = pow(n2, 0.5);\\n' +\n          '  n2 = 0.125 + n2 * 0.875;\\n' +\n\n          '  float n = snoise(vec3(12345.67 + v_position.x / 1.0, v_position.y / 1.0, v_position.z / 1.0));\\n' +\n          '  n = (n * 0.5 + (n2 - 0.5)) / 4.0;\\n' +\n\n          '  n = (1.0 - pow(1.0 - abs(n), 20.0)) * (n > 0.0 ? 1.0 : -1.0);\\n' +\n          '  n = clamp((n + 1.0) / 2.0, 0.0, 1.0);\\n' +\n          '  n = pow(n, 2.1);\\n' +\n          '  n = 0.125 + n * 0.875;\\n' +\n\n          '  n = 1.0 - n;\\n' +\n          '  gl_FragColor = vec4(n, n, n, 1.0);\\n'\n        )\n      })\n      shader.fragment_header += require('../../src/glsl/noise.min.glsl');\n      shader.attributes.position    = 'vec4';\n      shader.vertex_uniforms.camera = 'mat4';\n      shader.varyings.v_position    = 'vec4';\n      \n      \n      var plate = new Plate(shader);\n      return plate;\n    }\n    \n  })\n}\n\nvar noise  = getRenderable()\nscreen.addRenderable(noise)\nnoise.add({\n  z: .5\n})\n\nscreen.beginFrameRendering(false)\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./examples/noise/index.js\n ** module id = 0\n ** module chunks = 4\n **/","module.exports=' vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; } vec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; } vec4 permute(vec4 x) { return mod289(((x*34.0)+1.0)*x); } vec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; } float snoise(vec3 v) { const vec2 C = vec2(1.0/6.0, 1.0/3.0) ; const vec4 D = vec4(0.0, 0.5, 1.0, 2.0); vec3 i = floor(v + dot(v, C.yyy) ); vec3 x0 = v - i + dot(i, C.xxx) ; vec3 g = step(x0.yzx, x0.xyz); vec3 l = 1.0 - g; vec3 i1 = min( g.xyz, l.zxy ); vec3 i2 = max( g.xyz, l.zxy ); vec3 x1 = x0 - i1 + C.xxx; vec3 x2 = x0 - i2 + C.yyy; vec3 x3 = x0 - D.yyy; i = mod289(i); vec4 p = permute( permute( permute( i.z + vec4(0.0, i1.z, i2.z, 1.0 )) + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) + i.x + vec4(0.0, i1.x, i2.x, 1.0 )); float n_ = 0.142857142857; vec3 ns = n_ * D.wyz - D.xzx; vec4 j = p - 49.0 * floor(p * ns.z * ns.z); vec4 x_ = floor(j * ns.z); vec4 y_ = floor(j - 7.0 * x_ ); vec4 x = x_ *ns.x + ns.yyyy; vec4 y = y_ *ns.x + ns.yyyy; vec4 h = 1.0 - abs(x) - abs(y); vec4 b0 = vec4( x.xy, y.xy ); vec4 b1 = vec4( x.zw, y.zw ); vec4 s0 = floor(b0)*2.0 + 1.0; vec4 s1 = floor(b1)*2.0 + 1.0; vec4 sh = -step(h, vec4(0.0)); vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ; vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ; vec3 p0 = vec3(a0.xy,h.x); vec3 p1 = vec3(a0.zw,h.y); vec3 p2 = vec3(a1.xy,h.z); vec3 p3 = vec3(a1.zw,h.w); vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3))); p0 *= norm.x; p1 *= norm.y; p2 *= norm.z; p3 *= norm.w; vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0); m = m * m; return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) ); } ';\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/glsl/noise.min.glsl.js\n ** module id = 33\n ** module chunks = 4\n **/"],"sourceRoot":""}