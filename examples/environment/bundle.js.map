{"version":3,"sources":["webpack:///environment/bundle.js","webpack:///./examples/environment/index.js"],"names":["webpackJsonp","module","exports","__webpack_require__","getRenderable","Renderable","before","gl","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","renderOrder","getUniforms","camera","computeMatrix","factory","maxColors","colorAllocation","Allocation","Float","shader","Shader","attributes","position","color","varyings","f_color","vertex_uniforms","m","Model","this","addAttribute","i","item","vertices","add","uniforms","colors","buffer","CubeFramebuffer","size","opt_depth","faceTargets","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_CUBE_MAP_NEGATIVE_Z","depth","tex","texture","twgl","createTexture","target","TEXTURE_CUBE_MAP","width","height","min","LINEAR","mag","format","RGBA","type","UNSIGNED_BYTE","wrapS","CLAMP_TO_EDGE","wrapT","db","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebuffers","ff","fb","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","DEPTH_ATTACHMENT","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","WebGLDebugUtils","glEnumToString","push","m4","DkcpGl","Plate","shaders","Environment","main","canvas","document","getElementById","frameRate","element","wasd","delta","theta","Math","PI","screen","square","x","y","z","w","red","id","green","blue","white","quads","addRenderable","allocations","prototype","bind","face","viewport","unbind","drawingBufferWidth","drawingBufferHeight","cubeFBO","environment","inverse_camera","v_position","plate","mat1","identity","Float32Array","mat2","mat3","render","disable","DEPTH_TEST","inverse","perspective","skyorientation","multiply","geom","getGeometry","drawPrep","draw","enable","fragment_uniforms","v_pos","textureData","BLEND","blendEquationSeparate","FUNC_ADD","blendFuncSeparate","ONE_MINUS_DST_ALPHA","DST_ALPHA","ONE","skymatrix","beginFrameRendering"],"mappings":"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","file":"environment/bundle.js","sourcesContent":["webpackJsonp([2],[\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar twgl              = __webpack_require__(7)\n\tvar m4                = __webpack_require__(7).m4\n\tvar DkcpGl            = __webpack_require__(1)\n\t\n\tvar Renderable        = DkcpGl.Renderable\n\tvar Model             = DkcpGl.Model\n\tvar Plate             = DkcpGl.Plate\n\tvar shaders           = DkcpGl.shaders\n\tvar Shader            = DkcpGl.Shader\n\tvar Allocation        = DkcpGl.Allocation\n\tvar Environment       = DkcpGl.Environment\n\t\n\tvar main = new DkcpGl({\n\t  canvas : document.getElementById('canvas'),\n\t  frameRate : {\n\t    element : document.getElementById('framerate')\n\t  },\n\t  wasd : {\n\t    document : document,\n\t    delta : .05,\n\t    theta : -Math.PI / 120\n\t  }\n\t})\n\tvar camera = main.camera;\n\tvar screen = main.screen;\n\tvar gl     = main.screen.gl;\n\t\n\tfunction getRenderable() {\n\t  return new Renderable({\n\t    before : function () {\n\t      gl.clearColor(0,0,0,0);\n\t      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t    },\n\t    renderOrder : 1,\n\t    getUniforms : function () {\n\t      return {\n\t        camera : camera.computeMatrix()\n\t      }\n\t    },\n\t    factory : function () {\n\t      \n\t      var maxColors = 100\n\t      var colorAllocation = new Allocation.Float(maxColors, 4)\n\t\n\t      var shader = new Shader(function () {\n\t        return '  gl_Position = camera * position; \\n' + \n\t               '  f_color = colors[int(color)]; \\n'\n\t      }, function () {\n\t        return '  gl_FragColor = f_color ;\\n'\n\t      })\n\t      shader.attributes.position   = 'vec4';\n\t      shader.attributes.color      = 'float';\n\t      shader.varyings.f_color      = 'vec4';\n\t      shader.vertex_uniforms.camera = 'mat4';\n\t      shader.vertex_uniforms['colors[' + maxColors + ']'] = 'vec4';\n\t\n\t      var m = new Model(this, shader, 100)\n\t      m.addAttribute('position', 4, 'Float32Array', function (i, item) {\n\t        return item.vertices[i]\n\t      });\n\t      \n\t      m.addAttribute('color', 1, 'Float32Array', function (i, item) {\n\t        return [\n\t          colorAllocation.add(item.color, item, function () {\n\t            return item.color.color\n\t          })\n\t        ]\n\t      });\n\t  \n\t      m.uniforms.colors = colorAllocation.buffer;\n\t  \n\t      return m\n\t    }\n\t  })\n\t}\n\t\n\tvar square = function (x, y, z, w) {\n\t  return [\n\t    [x - w,  y - w, z, 1],\n\t    [x - w,  y + w, z, 1],\n\t    [x + w,  y - w, z, 1],\n\t    [x + w,  y + w, z, 1]\n\t  ]\n\t}\n\t\n\tvar red   = {id: 'red',   color: [1, 0, 0, 1]}\n\tvar green = {id: 'green', color: [0, 1, 0, 1]}\n\tvar blue  = {id: 'blue',  color: [0, 0, 1, 1]}\n\tvar white = {id: 'white', color: [1, 1, 1, 1]}\n\t\n\t  \n\tvar quads  = getRenderable()\n\tscreen.addRenderable(quads)\n\tquads.add({\n\t  color : red,\n\t  allocations : {},\n\t  vertices : square(.25, 0, .7, .05)\n\t})\n\tquads.add({\n\t  color : green,\n\t  allocations : {},\n\t  vertices : square(0, .25, .7, .05)\n\t})\n\tquads.add({\n\t  color : blue,\n\t  allocations : {},\n\t  vertices : square(0, 0, .9, .05)\n\t})\n\tquads.add({\n\t  color : white,\n\t  allocations : {},\n\t  vertices : square(0, 0, .7, .01)\n\t})\n\t\n\tfunction CubeFramebuffer(size, opt_depth) {\n\t  var faceTargets = [\n\t    gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n\t    gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n\t    gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n\t    gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n\t    gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n\t    gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];\n\t\n\t  this.size = size;\n\t  this.depth = opt_depth;\n\t  var tex = {\n\t    texture : twgl.createTexture(gl, {\n\t      target : gl.TEXTURE_CUBE_MAP,\n\t      width  : this.size,\n\t      height : this.size,\n\t      min    : gl.LINEAR,\n\t      mag    : gl.LINEAR,\n\t      format : gl.RGBA,\n\t      type   : gl.UNSIGNED_BYTE,\n\t      wrapS  : gl.CLAMP_TO_EDGE,\n\t      wrapT  : gl.CLAMP_TO_EDGE,\n\t      // unpackAlignment\n\t      // premultiplyAlpha\n\t      // flipY\n\t      // colorspaceConversion\n\t      // color\n\t      // src    : undefined,\n\t    })\n\t  }\n\t  // gl.bindTexture(gl.TEXTURE_CUBE_MAP, tex.texture);\n\t  // tex.setParameter(gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\t  // tex.setParameter(gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n\t  // tex.setParameter(gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t  // tex.setParameter(gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t  // for (var ff = 0; ff < 6; ++ff) {\n\t  //   gl.texImage2D(faceTargets[ff],\n\t  //                 0,                 // level\n\t  //                 gl.RGBA,           // internalFormat\n\t  //                 this.size,         // width\n\t  //                 this.size,         // height\n\t  //                 0,                 // border\n\t  //                 gl.RGBA,           // format\n\t  //                 gl.UNSIGNED_BYTE,  // type\n\t  //                 null);             // data\n\t  // }\n\t  if (this.depth) {\n\t    var db = gl.createRenderbuffer();\n\t    gl.bindRenderbuffer(gl.RENDERBUFFER, db);\n\t    gl.renderbufferStorage(\n\t        gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.size, this.size);\n\t  }\n\t  this.framebuffers = [];\n\t  for (var ff = 0; ff < 6; ++ff) {\n\t    var fb = gl.createFramebuffer();\n\t    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n\t    gl.framebufferTexture2D(\n\t        gl.FRAMEBUFFER,\n\t        gl.COLOR_ATTACHMENT0,\n\t        faceTargets[ff],\n\t        tex.texture,\n\t        0);\n\t    if (this.depth) {\n\t      gl.framebufferRenderbuffer(\n\t          gl.FRAMEBUFFER,\n\t          gl.DEPTH_ATTACHMENT,\n\t          gl.RENDERBUFFER,\n\t          db);\n\t    }\n\t    var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\t    if (status != gl.FRAMEBUFFER_COMPLETE) {\n\t      throw(\"gl.checkFramebufferStatus() returned \" + WebGLDebugUtils.glEnumToString(status));\n\t    }\n\t    this.framebuffers.push(fb);\n\t  }\n\t  gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t  this.texture = tex;\n\t}\n\t/**\n\t * Binds a face as the current render target.\n\t * @param {number} face The face to use as the render target.\n\t */\n\tCubeFramebuffer.prototype.bind = function(face) {\n\t  gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffers[face]);\n\t  gl.viewport(0, 0, this.size, this.size);\n\t};\n\t\n\t/**\n\t * Unbinds this framebuffer as the current render target.\n\t */\n\tCubeFramebuffer.prototype.unbind = function() {\n\t  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t  gl.viewport(\n\t      0, 0,\n\t      gl.drawingBufferWidth || gl.canvas.width,\n\t      gl.drawingBufferHeight || gl.canvas.height);\n\t};\n\t\n\t\n\tvar cubeFBO = new CubeFramebuffer(1024, true);\n\tcubeFBO.unbind()\n\t\n\t;(function () {\n\t\n\t  \n\t  var environment = new Environment(cubeFBO)\n\t\n\t  var shader = new Shader(function () {\n\t    return (\n\t      '  gl_Position = position; \\n' +\n\t      '  v_position  = inverse_camera * position; \\n'\n\t    )\n\t  }, function () {\n\t    return (\n\t      '  gl_FragColor = vec4(                                               \\n' +\n\t      '   (v_position.x + 1.0) / 2.0,                                       \\n' +\n\t      '   (v_position.y + 1.0) / 2.0,                                       \\n' +\n\t      '   (v_position.z + 1.0) / 2.0,                                       \\n' +\n\t      '   1.0);                                                             \\n'\n\t    )\n\t    \n\t  })\n\t  shader.attributes.position    = 'vec4';\n\t  shader.vertex_uniforms.inverse_camera = 'mat4';\n\t  shader.varyings.v_position    = 'vec4';\n\t\n\t  var plate = new Plate(shader);\n\t  plate.add({z: -.5})\n\t  \n\t  var uniforms = {};\n\t  var mat1 = m4.identity(new Float32Array(16));\n\t  var mat2 = m4.identity(new Float32Array(16));\n\t  var mat3 = m4.identity(new Float32Array(16));\n\t  environment.addRenderable({\n\t    renderOrder: 10,\n\t    render : function (gl) {\n\t      gl.disable(gl.DEPTH_TEST);\n\t\n\t      environment.camera.computeMatrix()\n\t      m4.inverse(environment.camera.perspective, mat1);\n\t      m4.inverse(environment.camera.skyorientation, mat2);\n\t      m4.multiply(mat1, mat2, mat3);\n\t      uniforms.inverse_camera = mat3;\n\t\n\t      var geom = plate.getGeometry(gl);\n\t      plate.drawPrep(geom, uniforms);\n\t      geom.draw();\n\t\n\t      gl.enable(gl.DEPTH_TEST);\n\t    }\n\t  })\n\t  \n\t  screen.addRenderable({\n\t    renderOrder : 2,\n\t    render : function (gl) {\n\t      environment.render(gl)\n\t    }\n\t  })\n\t\n\t}())\n\t  \n\t;(function () {\n\t  \n\t  var shader = new Shader(function () {\n\t    return (\n\t      '  v_pos       = camera * position; \\n' +\n\t      '  gl_Position = vec4(position.x, position.y, 0.5, 1.0); \\n'\n\t    ) \n\t  }, function () {\n\t    return (\n\t      '  gl_FragColor = textureCube(                            \\n'+\n\t      '      texture,                                           \\n'+\n\t      '      vec3(v_pos.xyz / v_pos.w));                        \\n'\n\t    )\n\t  })\n\t  shader.attributes.position              = 'vec4';\n\t  shader.fragment_uniforms.texture        = 'samplerCube';\n\t  shader.vertex_uniforms.camera           = 'mat4';\n\t  shader.varyings.v_pos                   = 'vec4';\n\t  \n\t  var plate = new Plate(shader);\n\t  plate.textureData = {texture : cubeFBO.texture}\n\t  plate.add({z: 1})\n\t  \n\t  var uniforms = {};\n\t\n\t  var inverse = m4.identity(new Float32Array(16));\n\t  \n\t  \n\t  screen.addRenderable({\n\t    renderOrder : 3,\n\t    render : function (gl) {\n\t      gl.disable(gl.DEPTH_TEST);\n\t      gl.enable(gl.BLEND);\n\t      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n\t      camera.computeMatrix()\n\t      m4.inverse(camera.skymatrix, inverse);\n\t      uniforms.camera = inverse;\n\t      uniforms.texture = plate.textureData.texture.texture;\n\t      var geom = plate.getGeometry(gl);\n\t      plate.drawPrep(geom, uniforms);\n\t      geom.draw();\n\t      gl.disable(gl.BLEND);\n\t      gl.enable(gl.DEPTH_TEST);\n\t    }\n\t  })\n\t\n\t}());\n\t\n\tscreen.beginFrameRendering(false)\n\n\n/***/ }\n]);\n\n\n/** WEBPACK FOOTER **\n ** environment/bundle.js\n **/","var twgl              = require('../../lib/twgl')\nvar m4                = require('../../lib/twgl').m4\nvar DkcpGl            = require('../../src/dkcp-gl')\n\nvar Renderable        = DkcpGl.Renderable\nvar Model             = DkcpGl.Model\nvar Plate             = DkcpGl.Plate\nvar shaders           = DkcpGl.shaders\nvar Shader            = DkcpGl.Shader\nvar Allocation        = DkcpGl.Allocation\nvar Environment       = DkcpGl.Environment\n\nvar main = new DkcpGl({\n  canvas : document.getElementById('canvas'),\n  frameRate : {\n    element : document.getElementById('framerate')\n  },\n  wasd : {\n    document : document,\n    delta : .05,\n    theta : -Math.PI / 120\n  }\n})\nvar camera = main.camera;\nvar screen = main.screen;\nvar gl     = main.screen.gl;\n\nfunction getRenderable() {\n  return new Renderable({\n    before : function () {\n      gl.clearColor(0,0,0,0);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n    },\n    renderOrder : 1,\n    getUniforms : function () {\n      return {\n        camera : camera.computeMatrix()\n      }\n    },\n    factory : function () {\n      \n      var maxColors = 100\n      var colorAllocation = new Allocation.Float(maxColors, 4)\n\n      var shader = new Shader(function () {\n        return '  gl_Position = camera * position; \\n' + \n               '  f_color = colors[int(color)]; \\n'\n      }, function () {\n        return '  gl_FragColor = f_color ;\\n'\n      })\n      shader.attributes.position   = 'vec4';\n      shader.attributes.color      = 'float';\n      shader.varyings.f_color      = 'vec4';\n      shader.vertex_uniforms.camera = 'mat4';\n      shader.vertex_uniforms['colors[' + maxColors + ']'] = 'vec4';\n\n      var m = new Model(this, shader, 100)\n      m.addAttribute('position', 4, 'Float32Array', function (i, item) {\n        return item.vertices[i]\n      });\n      \n      m.addAttribute('color', 1, 'Float32Array', function (i, item) {\n        return [\n          colorAllocation.add(item.color, item, function () {\n            return item.color.color\n          })\n        ]\n      });\n  \n      m.uniforms.colors = colorAllocation.buffer;\n  \n      return m\n    }\n  })\n}\n\nvar square = function (x, y, z, w) {\n  return [\n    [x - w,  y - w, z, 1],\n    [x - w,  y + w, z, 1],\n    [x + w,  y - w, z, 1],\n    [x + w,  y + w, z, 1]\n  ]\n}\n\nvar red   = {id: 'red',   color: [1, 0, 0, 1]}\nvar green = {id: 'green', color: [0, 1, 0, 1]}\nvar blue  = {id: 'blue',  color: [0, 0, 1, 1]}\nvar white = {id: 'white', color: [1, 1, 1, 1]}\n\n  \nvar quads  = getRenderable()\nscreen.addRenderable(quads)\nquads.add({\n  color : red,\n  allocations : {},\n  vertices : square(.25, 0, .7, .05)\n})\nquads.add({\n  color : green,\n  allocations : {},\n  vertices : square(0, .25, .7, .05)\n})\nquads.add({\n  color : blue,\n  allocations : {},\n  vertices : square(0, 0, .9, .05)\n})\nquads.add({\n  color : white,\n  allocations : {},\n  vertices : square(0, 0, .7, .01)\n})\n\nfunction CubeFramebuffer(size, opt_depth) {\n  var faceTargets = [\n    gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n    gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n    gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n    gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n    gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n    gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];\n\n  this.size = size;\n  this.depth = opt_depth;\n  var tex = {\n    texture : twgl.createTexture(gl, {\n      target : gl.TEXTURE_CUBE_MAP,\n      width  : this.size,\n      height : this.size,\n      min    : gl.LINEAR,\n      mag    : gl.LINEAR,\n      format : gl.RGBA,\n      type   : gl.UNSIGNED_BYTE,\n      wrapS  : gl.CLAMP_TO_EDGE,\n      wrapT  : gl.CLAMP_TO_EDGE,\n      // unpackAlignment\n      // premultiplyAlpha\n      // flipY\n      // colorspaceConversion\n      // color\n      // src    : undefined,\n    })\n  }\n  // gl.bindTexture(gl.TEXTURE_CUBE_MAP, tex.texture);\n  // tex.setParameter(gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n  // tex.setParameter(gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n  // tex.setParameter(gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  // tex.setParameter(gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  // for (var ff = 0; ff < 6; ++ff) {\n  //   gl.texImage2D(faceTargets[ff],\n  //                 0,                 // level\n  //                 gl.RGBA,           // internalFormat\n  //                 this.size,         // width\n  //                 this.size,         // height\n  //                 0,                 // border\n  //                 gl.RGBA,           // format\n  //                 gl.UNSIGNED_BYTE,  // type\n  //                 null);             // data\n  // }\n  if (this.depth) {\n    var db = gl.createRenderbuffer();\n    gl.bindRenderbuffer(gl.RENDERBUFFER, db);\n    gl.renderbufferStorage(\n        gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.size, this.size);\n  }\n  this.framebuffers = [];\n  for (var ff = 0; ff < 6; ++ff) {\n    var fb = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        faceTargets[ff],\n        tex.texture,\n        0);\n    if (this.depth) {\n      gl.framebufferRenderbuffer(\n          gl.FRAMEBUFFER,\n          gl.DEPTH_ATTACHMENT,\n          gl.RENDERBUFFER,\n          db);\n    }\n    var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (status != gl.FRAMEBUFFER_COMPLETE) {\n      throw(\"gl.checkFramebufferStatus() returned \" + WebGLDebugUtils.glEnumToString(status));\n    }\n    this.framebuffers.push(fb);\n  }\n  gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n  this.texture = tex;\n}\n/**\n * Binds a face as the current render target.\n * @param {number} face The face to use as the render target.\n */\nCubeFramebuffer.prototype.bind = function(face) {\n  gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffers[face]);\n  gl.viewport(0, 0, this.size, this.size);\n};\n\n/**\n * Unbinds this framebuffer as the current render target.\n */\nCubeFramebuffer.prototype.unbind = function() {\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.viewport(\n      0, 0,\n      gl.drawingBufferWidth || gl.canvas.width,\n      gl.drawingBufferHeight || gl.canvas.height);\n};\n\n\nvar cubeFBO = new CubeFramebuffer(1024, true);\ncubeFBO.unbind()\n\n;(function () {\n\n  \n  var environment = new Environment(cubeFBO)\n\n  var shader = new Shader(function () {\n    return (\n      '  gl_Position = position; \\n' +\n      '  v_position  = inverse_camera * position; \\n'\n    )\n  }, function () {\n    return (\n      '  gl_FragColor = vec4(                                               \\n' +\n      '   (v_position.x + 1.0) / 2.0,                                       \\n' +\n      '   (v_position.y + 1.0) / 2.0,                                       \\n' +\n      '   (v_position.z + 1.0) / 2.0,                                       \\n' +\n      '   1.0);                                                             \\n'\n    )\n    \n  })\n  shader.attributes.position    = 'vec4';\n  shader.vertex_uniforms.inverse_camera = 'mat4';\n  shader.varyings.v_position    = 'vec4';\n\n  var plate = new Plate(shader);\n  plate.add({z: -.5})\n  \n  var uniforms = {};\n  var mat1 = m4.identity(new Float32Array(16));\n  var mat2 = m4.identity(new Float32Array(16));\n  var mat3 = m4.identity(new Float32Array(16));\n  environment.addRenderable({\n    renderOrder: 10,\n    render : function (gl) {\n      gl.disable(gl.DEPTH_TEST);\n\n      environment.camera.computeMatrix()\n      m4.inverse(environment.camera.perspective, mat1);\n      m4.inverse(environment.camera.skyorientation, mat2);\n      m4.multiply(mat1, mat2, mat3);\n      uniforms.inverse_camera = mat3;\n\n      var geom = plate.getGeometry(gl);\n      plate.drawPrep(geom, uniforms);\n      geom.draw();\n\n      gl.enable(gl.DEPTH_TEST);\n    }\n  })\n  \n  screen.addRenderable({\n    renderOrder : 2,\n    render : function (gl) {\n      environment.render(gl)\n    }\n  })\n\n}())\n  \n;(function () {\n  \n  var shader = new Shader(function () {\n    return (\n      '  v_pos       = camera * position; \\n' +\n      '  gl_Position = vec4(position.x, position.y, 0.5, 1.0); \\n'\n    ) \n  }, function () {\n    return (\n      '  gl_FragColor = textureCube(                            \\n'+\n      '      texture,                                           \\n'+\n      '      vec3(v_pos.xyz / v_pos.w));                        \\n'\n    )\n  })\n  shader.attributes.position              = 'vec4';\n  shader.fragment_uniforms.texture        = 'samplerCube';\n  shader.vertex_uniforms.camera           = 'mat4';\n  shader.varyings.v_pos                   = 'vec4';\n  \n  var plate = new Plate(shader);\n  plate.textureData = {texture : cubeFBO.texture}\n  plate.add({z: 1})\n  \n  var uniforms = {};\n\n  var inverse = m4.identity(new Float32Array(16));\n  \n  \n  screen.addRenderable({\n    renderOrder : 3,\n    render : function (gl) {\n      gl.disable(gl.DEPTH_TEST);\n      gl.enable(gl.BLEND);\n      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n      camera.computeMatrix()\n      m4.inverse(camera.skymatrix, inverse);\n      uniforms.camera = inverse;\n      uniforms.texture = plate.textureData.texture.texture;\n      var geom = plate.getGeometry(gl);\n      plate.drawPrep(geom, uniforms);\n      geom.draw();\n      gl.disable(gl.BLEND);\n      gl.enable(gl.DEPTH_TEST);\n    }\n  })\n\n}());\n\nscreen.beginFrameRendering(false)\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./examples/environment/index.js\n ** module id = 0\n ** module chunks = 2\n **/"],"sourceRoot":""}