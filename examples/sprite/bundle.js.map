{"version":3,"sources":["webpack:///sprite/bundle.js","webpack:///./examples/sprite/index.js"],"names":["webpackJsonp","module","exports","__webpack_require__","getRenderable","Renderable","before","gl","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","getUniforms","camera","computeMatrix","texture","this","getTexture","factory","Texture","main","screen","img","shader","Shader","fragment_uniforms","attributes","position","texCoord","varyings","f_texCoord","vertex_uniforms","m","Model","addAttribute","i","item","vertices","textureData","getSpriteRenderable","aspect","getAspect","offset","w","width","h","height","DkcpGl","shaders","canvas","document","getElementById","frameRate","element","wasd","delta","theta","Math","PI","createElement","square","x","y","z","sprite","quads","addRenderable","spriteQuads","started","start","add","color","allocations","addEventListener","console","log","beginFrameRendering","setAttribute"],"mappings":"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","file":"sprite/bundle.js","sourcesContent":["webpackJsonp([6],[\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar DkcpGl            = __webpack_require__(1)\n\t\n\tvar Renderable        = DkcpGl.Renderable\n\tvar Model             = DkcpGl.Model\n\tvar shaders           = DkcpGl.shaders\n\tvar Shader            = DkcpGl.Shader\n\tvar Texture           = DkcpGl.Texture\n\t\n\tvar main = new DkcpGl({\n\t  canvas : document.getElementById('canvas'),\n\t  frameRate : {\n\t    element : document.getElementById('framerate')\n\t  },\n\t  wasd : {\n\t    document : document,\n\t    delta : .05,\n\t    theta : -Math.PI / 120\n\t  }\n\t})\n\tvar camera = main.camera;\n\tvar screen = main.screen;\n\tvar gl     = main.screen.gl;\n\t\n\tvar img = document.createElement('img')\n\t\n\tfunction getRenderable() {\n\t  return new Renderable({\n\t    before : function () {\n\t      gl.clearColor(0.9,0.9,0.9,1.0);\n\t      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t    },\n\t    getUniforms : function () {\n\t      return {\n\t        camera : camera.computeMatrix(),\n\t        texture : this.texture.getTexture().texture\n\t      }\n\t    },\n\t    factory : function () {\n\t      if (!this.texture) {\n\t        this.texture = new Texture(main.screen.gl, img)\n\t      }\n\t\n\t      var shader = new Shader(function () {\n\t        return '  gl_Position = camera * position; \\n' + \n\t               '  f_texCoord = texCoord; \\n'\n\t      }, function () {\n\t        return (\n\t          '  float txWidth  = 256.0;                                  \\n'+\n\t          '  float txHeight = 256.0;                                  \\n'+\n\t          '  vec2 clamped = vec2(                                     \\n'+\n\t          '     (float(int(f_texCoord.x * (txWidth - 1.0) )))/(txWidth - 1.0),  \\n'+\n\t          '     (float(int(f_texCoord.y * (txHeight - 1.0))))/(txHeight - 1.0)  \\n'+\n\t          '  );                                                       \\n'+\n\t          '  gl_FragColor = texture2D(texture, clamped);              \\n'+\n\t          '   if (gl_FragColor.a < 0.999)                             \\n'+\n\t          '     discard;                                              \\n'+\n\t          ''\n\t        )\n\t      })\n\t      shader.fragment_uniforms.texture = 'sampler2D';\n\t      shader.attributes.position       = 'vec4';\n\t      shader.attributes.texCoord       = 'vec2';\n\t      shader.varyings.f_texCoord       = 'vec2';\n\t      shader.vertex_uniforms.camera    = 'mat4';\n\t\n\t      var m                    = new Model(this, shader, 100)\n\t      m.addAttribute('position', 4, 'Float32Array', function (i, item) {\n\t        return item.vertices[i]\n\t      });\n\t      m.addAttribute('texCoord', 2, 'Float32Array', function (i, item) {\n\t        return [[0,0],[0,1],[1,0],[1,1]][i]\n\t      });\n\t      \n\t      m.textureData = {texture : this.texture.getTexture()}\n\t  \n\t      return m\n\t    }\n\t  })\n\t}\n\t\n\tfunction getSpriteRenderable() {\n\t  return new Renderable({\n\t    getUniforms : function () {\n\t      return {\n\t        camera : camera.computeMatrix(),\n\t        aspect : camera.getAspect(),\n\t        texture : this.texture.getTexture().texture\n\t      }\n\t    },\n\t    factory : function () {\n\t      if (!this.texture) {\n\t        this.texture = new Texture(main.screen.gl, img)\n\t      }\n\t\n\t      var shader = new Shader(function () {\n\t        return (\n\t          ' vec4 pos = camera * position; \\n' + \n\t          // ' vec4 pos2 = vec4(pos.x / pos.w, pos.y / pos.w, pos.z / pos.w, 1.0); \\n' +\n\t          ' gl_Position = pos + offset * aspect; \\n' + \n\t          ' f_texCoord = texCoord; \\n'\n\t        )\n\t      }, function () {\n\t        return (\n\t          '  float txWidth  = 256.0;                                  \\n'+\n\t          '  float txHeight = 256.0;                                  \\n'+\n\t          '  vec2 clamped = vec2(                                     \\n'+\n\t          '     (float(int(f_texCoord.x * (txWidth - 1.0) )))/(txWidth - 1.0),  \\n'+\n\t          '     (float(int(f_texCoord.y * (txHeight - 1.0))))/(txHeight - 1.0)  \\n'+\n\t          '  );                                                       \\n'+\n\t          '  gl_FragColor = texture2D(texture, clamped);              \\n'+\n\t          '   if (gl_FragColor.a < 0.999)                             \\n'+\n\t          '     discard;                                              \\n'+\n\t          ''\n\t        )\n\t      })\n\t      shader.fragment_uniforms.texture = 'sampler2D';\n\t      shader.attributes.position       = 'vec4';\n\t      shader.attributes.texCoord       = 'vec2';\n\t      shader.varyings.f_texCoord       = 'vec2';\n\t      shader.vertex_uniforms.camera    = 'mat4';\n\t      shader.vertex_uniforms.aspect    = 'vec4';\n\t      shader.attributes.offset         = 'vec4';\n\t\n\t      var m                    = new Model(this, shader, 100)\n\t      m.addAttribute('position', 4, 'Float32Array', function (i, item) {\n\t        return item.vertices\n\t      });\n\t      m.addAttribute('offset', 4, 'Float32Array', function (i, item) {\n\t        var w = item.width\n\t        var h = item.height\n\t        return [[-w, -h, 0, 0],\n\t                [-w,  h, 0, 0],\n\t                [ w, -h, 0, 0],\n\t                [ w,  h, 0, 0]\n\t        ][i]\n\t      });\n\t      m.addAttribute('texCoord', 2, 'Float32Array', function (i, item) {\n\t        return [[0,0],[0,1],[1,0],[1,1]][i]\n\t      });\n\t      \n\t      m.textureData = {texture : this.texture.getTexture()}\n\t  \n\t      return m\n\t    }\n\t  })\n\t}\n\t\n\t\n\tvar square = function (x, y, z, w) {\n\t  return [\n\t    [x - w,  y - w, z, 1],\n\t    [x - w,  y + w, z, 1],\n\t    [x + w,  y - w, z, 1],\n\t    [x + w,  y + w, z, 1]\n\t  ]\n\t}\n\t\n\t\n\tvar sprite = function (x, y, z) {\n\t  return [x, y, z, 1]\n\t}\n\t\n\tvar quads  = getRenderable()\n\tscreen.addRenderable(quads)\n\tvar spriteQuads  = getSpriteRenderable()\n\tscreen.addRenderable(spriteQuads)\n\t\n\tvar started = false\n\tvar start = function() {\n\t  if (started) return\n\t  started = true\n\t\n\t  quads.add({\n\t    color : 1,\n\t    allocations : {},\n\t    vertices : square(.25, 0, .7, .05)\n\t  })\n\t  quads.add({\n\t    color : 2,\n\t    allocations : {},\n\t    vertices : square(0, .25, .7, .05)\n\t  })\n\t  quads.add({\n\t    color : 3,\n\t    allocations : {},\n\t    vertices : square(0, 0, .9, .05)\n\t  })\n\t  spriteQuads.add({\n\t    color : 4,\n\t    allocations : {},\n\t    vertices : sprite(0, 0, .7, .05),\n\t    width: .04,\n\t    height: .04\n\t  })\n\t}\n\t\n\timg.addEventListener('load', function () {\n\t  console.log('img loaded')\n\t  start()\n\t  screen.beginFrameRendering(false)\n\t})\n\timg.setAttribute('src', '../img/img.png')\n\t\n\t\n\n\n/***/ }\n]);\n\n\n/** WEBPACK FOOTER **\n ** sprite/bundle.js\n **/","var DkcpGl            = require('../../src/dkcp-gl')\n\nvar Renderable        = DkcpGl.Renderable\nvar Model             = DkcpGl.Model\nvar shaders           = DkcpGl.shaders\nvar Shader            = DkcpGl.Shader\nvar Texture           = DkcpGl.Texture\n\nvar main = new DkcpGl({\n  canvas : document.getElementById('canvas'),\n  frameRate : {\n    element : document.getElementById('framerate')\n  },\n  wasd : {\n    document : document,\n    delta : .05,\n    theta : -Math.PI / 120\n  }\n})\nvar camera = main.camera;\nvar screen = main.screen;\nvar gl     = main.screen.gl;\n\nvar img = document.createElement('img')\n\nfunction getRenderable() {\n  return new Renderable({\n    before : function () {\n      gl.clearColor(0.9,0.9,0.9,1.0);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n    },\n    getUniforms : function () {\n      return {\n        camera : camera.computeMatrix(),\n        texture : this.texture.getTexture().texture\n      }\n    },\n    factory : function () {\n      if (!this.texture) {\n        this.texture = new Texture(main.screen.gl, img)\n      }\n\n      var shader = new Shader(function () {\n        return '  gl_Position = camera * position; \\n' + \n               '  f_texCoord = texCoord; \\n'\n      }, function () {\n        return (\n          '  float txWidth  = 256.0;                                  \\n'+\n          '  float txHeight = 256.0;                                  \\n'+\n          '  vec2 clamped = vec2(                                     \\n'+\n          '     (float(int(f_texCoord.x * (txWidth - 1.0) )))/(txWidth - 1.0),  \\n'+\n          '     (float(int(f_texCoord.y * (txHeight - 1.0))))/(txHeight - 1.0)  \\n'+\n          '  );                                                       \\n'+\n          '  gl_FragColor = texture2D(texture, clamped);              \\n'+\n          '   if (gl_FragColor.a < 0.999)                             \\n'+\n          '     discard;                                              \\n'+\n          ''\n        )\n      })\n      shader.fragment_uniforms.texture = 'sampler2D';\n      shader.attributes.position       = 'vec4';\n      shader.attributes.texCoord       = 'vec2';\n      shader.varyings.f_texCoord       = 'vec2';\n      shader.vertex_uniforms.camera    = 'mat4';\n\n      var m                    = new Model(this, shader, 100)\n      m.addAttribute('position', 4, 'Float32Array', function (i, item) {\n        return item.vertices[i]\n      });\n      m.addAttribute('texCoord', 2, 'Float32Array', function (i, item) {\n        return [[0,0],[0,1],[1,0],[1,1]][i]\n      });\n      \n      m.textureData = {texture : this.texture.getTexture()}\n  \n      return m\n    }\n  })\n}\n\nfunction getSpriteRenderable() {\n  return new Renderable({\n    getUniforms : function () {\n      return {\n        camera : camera.computeMatrix(),\n        aspect : camera.getAspect(),\n        texture : this.texture.getTexture().texture\n      }\n    },\n    factory : function () {\n      if (!this.texture) {\n        this.texture = new Texture(main.screen.gl, img)\n      }\n\n      var shader = new Shader(function () {\n        return (\n          ' vec4 pos = camera * position; \\n' + \n          // ' vec4 pos2 = vec4(pos.x / pos.w, pos.y / pos.w, pos.z / pos.w, 1.0); \\n' +\n          ' gl_Position = pos + offset * aspect; \\n' + \n          ' f_texCoord = texCoord; \\n'\n        )\n      }, function () {\n        return (\n          '  float txWidth  = 256.0;                                  \\n'+\n          '  float txHeight = 256.0;                                  \\n'+\n          '  vec2 clamped = vec2(                                     \\n'+\n          '     (float(int(f_texCoord.x * (txWidth - 1.0) )))/(txWidth - 1.0),  \\n'+\n          '     (float(int(f_texCoord.y * (txHeight - 1.0))))/(txHeight - 1.0)  \\n'+\n          '  );                                                       \\n'+\n          '  gl_FragColor = texture2D(texture, clamped);              \\n'+\n          '   if (gl_FragColor.a < 0.999)                             \\n'+\n          '     discard;                                              \\n'+\n          ''\n        )\n      })\n      shader.fragment_uniforms.texture = 'sampler2D';\n      shader.attributes.position       = 'vec4';\n      shader.attributes.texCoord       = 'vec2';\n      shader.varyings.f_texCoord       = 'vec2';\n      shader.vertex_uniforms.camera    = 'mat4';\n      shader.vertex_uniforms.aspect    = 'vec4';\n      shader.attributes.offset         = 'vec4';\n\n      var m                    = new Model(this, shader, 100)\n      m.addAttribute('position', 4, 'Float32Array', function (i, item) {\n        return item.vertices\n      });\n      m.addAttribute('offset', 4, 'Float32Array', function (i, item) {\n        var w = item.width\n        var h = item.height\n        return [[-w, -h, 0, 0],\n                [-w,  h, 0, 0],\n                [ w, -h, 0, 0],\n                [ w,  h, 0, 0]\n        ][i]\n      });\n      m.addAttribute('texCoord', 2, 'Float32Array', function (i, item) {\n        return [[0,0],[0,1],[1,0],[1,1]][i]\n      });\n      \n      m.textureData = {texture : this.texture.getTexture()}\n  \n      return m\n    }\n  })\n}\n\n\nvar square = function (x, y, z, w) {\n  return [\n    [x - w,  y - w, z, 1],\n    [x - w,  y + w, z, 1],\n    [x + w,  y - w, z, 1],\n    [x + w,  y + w, z, 1]\n  ]\n}\n\n\nvar sprite = function (x, y, z) {\n  return [x, y, z, 1]\n}\n\nvar quads  = getRenderable()\nscreen.addRenderable(quads)\nvar spriteQuads  = getSpriteRenderable()\nscreen.addRenderable(spriteQuads)\n\nvar started = false\nvar start = function() {\n  if (started) return\n  started = true\n\n  quads.add({\n    color : 1,\n    allocations : {},\n    vertices : square(.25, 0, .7, .05)\n  })\n  quads.add({\n    color : 2,\n    allocations : {},\n    vertices : square(0, .25, .7, .05)\n  })\n  quads.add({\n    color : 3,\n    allocations : {},\n    vertices : square(0, 0, .9, .05)\n  })\n  spriteQuads.add({\n    color : 4,\n    allocations : {},\n    vertices : sprite(0, 0, .7, .05),\n    width: .04,\n    height: .04\n  })\n}\n\nimg.addEventListener('load', function () {\n  console.log('img loaded')\n  start()\n  screen.beginFrameRendering(false)\n})\nimg.setAttribute('src', '../img/img.png')\n\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./examples/sprite/index.js\n ** module id = 0\n ** module chunks = 6\n **/"],"sourceRoot":""}