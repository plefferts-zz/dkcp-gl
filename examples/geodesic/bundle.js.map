{"version":3,"sources":["webpack:///geodesic/bundle.js","webpack:///./examples/geodesic/index.js"],"names":["webpackJsonp","module","exports","__webpack_require__","getRenderable","subdivisions","individual_faces","Renderable","before","getUniforms","camera","computeMatrix","factory","maxColors","colorAllocation","Allocation","Float","shader","Shader","attributes","position","color","varyings","f_color","vertex_uniforms","m","Model","Geodesics","this","addAttribute","i","item","vertices","add","uniforms","colors","buffer","DkcpGl","shaders","geodesic","main","canvas","document","getElementById","frameRate","element","wasd","delta","theta","Math","PI","screen","red","id","yellow","green","cyan","blue","magenta","white","subs","faces","geos","addRenderable","g","getGeometry","color_ints","tris","length","c","random","j","push","points","forEach","point","allocations","subs2","faces2","geos2","beginFrameRendering"],"mappings":"AAAAA,cAAc,IAER,SAASC,EAAQC,EAASC,GCqBhC,QAAAC,GAAAC,EAAAC,GACA,UAAAC,IACAC,OAAA,aAEAC,YAAA,WACA,OACAC,SAAAC,kBAGAC,QAAA,WAEA,GAAAC,GAAA,IACAC,EAAA,GAAAC,GAAAC,MAAAH,EAAA,GAEAI,EAAA,GAAAC,GAAA,WACA,iFAEO,WACP,sCAEAD,GAAAE,WAAAC,SAAA,OACAH,EAAAE,WAAAE,MAAA,QACAJ,EAAAK,SAAAC,QAAA,OACAN,EAAAO,gBAAAd,OAAA,OACAO,EAAAO,gBAAA,UAAAX,EAAA,WAEA,IAAAY,GAAA,GAAAC,GAAAC,UAAAC,KAAAX,EAAA,EAAAZ,EAAAC,EAeA,OAdAmB,GAAAI,aAAA,qCAAAC,EAAAC,GACA,MAAAA,GAAAC,SAAAF,KAGAL,EAAAI,aAAA,kCAAAC,EAAAC,GACA,OACAjB,EAAAmB,IAAAF,EAAAV,MAAAS,GAAAC,EAAA,WACA,MAAAA,GAAAV,MAAAS,GAAAT,WAKAI,EAAAS,SAAAC,OAAArB,EAAAsB,OAEAX,KAhEA,GAAAY,GAAAlC,EAAA,GAEAI,EAAA8B,EAAA9B,WACAmB,EAAAW,EAAAX,MAEAR,GADAmB,EAAAC,QACAD,EAAAnB,QACAH,EAAAsB,EAAAtB,WACAwB,EAAAF,EAAAE,SAEAC,EAAA,GAAAH,IACAI,OAAAC,SAAAC,eAAA,UACAC,WACAC,QAAAH,SAAAC,eAAA,cAEAG,MACAJ,kBACAK,MAAA,IACAC,OAAAC,KAAAC,GAAA,MAGAxC,EAAA8B,EAAA9B,OACAyC,EAAAX,EAAAW,OAgDAC,GAAeC,GAAA,MAAAhC,OAAA,UACfiC,GAAeD,GAAA,SAAAhC,OAAA,UACfkC,GAAeF,GAAA,QAAAhC,OAAA,UACfmC,GAAeH,GAAA,OAAAhC,OAAA,UACfoC,GAAeJ,GAAA,OAAAhC,OAAA,UACfqC,GAAeL,GAAA,UAAAhC,OAAA,UACfsC,GAAeN,GAAA,QAAAhC,OAAA,UAEfc,GAAAiB,EAAAE,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAGAC,EAAA,GACAC,GAAA,EACAC,EAAA1D,EAAAwD,EAAAC,EACAV,GAAAY,cAAAD,EAIA,QAFAE,GAAAzB,EAAAqB,GAAAK,YAAAJ,GACAK,KACApC,EAAA,EAAeA,EAAAkC,EAAAG,KAAAC,OAAmBtC,IAElC,OADAuC,GAAAlC,EAAAc,KAAAqB,SAAAnC,EAAAiC,OAAA,GACAG,EAAA,GAAiBV,EAAA,KAAAU,EAAqBA,IACtCL,EAAAM,KAAAH,EAGA,IAAArC,KACAgC,GAAAS,OAAAC,QAAA,SAAAC,GACA3C,EAAAwC,MACA,EAAAG,EAAA,GACA,EAAAA,EAAA,GACA,EAAAA,EAAA,KACA,MAGAb,EAAA7B,KACAZ,MAAA6C,EACAU,eACAT,KAAAH,EAAAG,KACAnC,YAGA,IAAA6C,GAAA,EACAC,GAAA,EACAC,EAAA3E,EAAAyE,EAAAC,EACA3B,GAAAY,cAAAgB,EAGA,QAFAf,GAAAzB,EAAAsC,GAAAZ,YAAAa,GACAZ,KACApC,EAAA,EAAeA,EAAAkC,EAAAG,KAAAC,OAAmBtC,IAElC,OADAuC,GAAAlC,EAAAc,KAAAqB,SAAAnC,EAAAiC,OAAA,GACAG,EAAA,GAAiBO,EAAA,KAAAP,EAAsBA,IACvCL,EAAAM,KAAAH,EAGA,IAAArC,KACAgC,GAAAS,OAAAC,QAAA,SAAAC,GACA3C,EAAAwC,MACA,EAAAG,EAAA,OACA,EAAAA,EAAA,OACA,EAAAA,EAAA,QACA,MAGAI,EAAA9C,KACAZ,MAAA6C,EACAU,eACAT,KAAAH,EAAAG,KACAnC,aAGAmB,EAAA6B,qBAAA","file":"geodesic/bundle.js","sourcesContent":["webpackJsonp([3],[\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar DkcpGl            = __webpack_require__(1)\n\t\n\tvar Renderable        = DkcpGl.Renderable\n\tvar Model             = DkcpGl.Model\n\tvar shaders           = DkcpGl.shaders\n\tvar Shader            = DkcpGl.Shader\n\tvar Allocation        = DkcpGl.Allocation\n\tvar geodesic          = DkcpGl.geodesic\n\t\n\tvar main = new DkcpGl({\n\t  canvas : document.getElementById('canvas'),\n\t  frameRate : {\n\t    element : document.getElementById('framerate')\n\t  },\n\t  wasd : {\n\t    document : document,\n\t    delta : .25,\n\t    theta : -Math.PI / 60\n\t  }\n\t})\n\tvar camera = main.camera;\n\tvar screen = main.screen;\n\t\n\tfunction getRenderable(subdivisions, individual_faces) {\n\t  return new Renderable({\n\t    before : function () {\n\t    },\n\t    getUniforms : function () {\n\t      return {\n\t        camera : camera.computeMatrix()\n\t      }\n\t    },\n\t    factory : function () {\n\t      \n\t      var maxColors = 300\n\t      var colorAllocation = new Allocation.Float(maxColors, 4)\n\t      \n\t      var shader = new Shader(function () {\n\t        return '  gl_Position = camera * position; \\n' + \n\t               '  f_color = colors[int(color)]; \\n'\n\t      }, function () {\n\t        return '  gl_FragColor = f_color ;\\n'\n\t      })\n\t      shader.attributes.position   = 'vec4';\n\t      shader.attributes.color      = 'float';\n\t      shader.varyings.f_color      = 'vec4';\n\t      shader.vertex_uniforms.camera = 'mat4';\n\t      shader.vertex_uniforms['colors[' + maxColors + ']'] = 'vec4';\n\t\n\t      var m = new Model.Geodesics(this, shader, 2, subdivisions, individual_faces)\n\t      m.addAttribute('position', 4, 'Float32Array', function (i, item) {\n\t        return item.vertices[i]\n\t      });\n\t      \n\t      m.addAttribute('color', 1, 'Float32Array', function (i, item) {\n\t        return [\n\t          colorAllocation.add(item.color[i], item, function () {\n\t            return item.color[i].color\n\t          })\n\t        ]\n\t      });\n\t  \n\t      m.uniforms.colors = colorAllocation.buffer;\n\t  \n\t      return m\n\t    }\n\t  })\n\t}\n\t\n\tvar red     = {id: 'red',     color: [1, 0, 0, 1]}\n\tvar yellow  = {id: 'yellow',  color: [1, 1, 0, 1]}\n\tvar green   = {id: 'green',   color: [0, 1, 0, 1]}\n\tvar cyan    = {id: 'cyan',    color: [0, 1, 1, 1]}\n\tvar blue    = {id: 'blue',    color: [0, 0, 1, 1]}\n\tvar magenta = {id: 'magenta', color: [1, 0, 1, 1]}\n\tvar white   = {id: 'white',   color: [1, 1, 1, 1]}\n\t\n\tvar colors  = [red, yellow, green, cyan, blue, magenta, white];\n\t\n\t\n\tvar subs = 11\n\tvar faces = false\n\tvar geos  = getRenderable(subs, faces)\n\tscreen.addRenderable(geos)\n\t\n\tvar g = geodesic(subs).getGeometry(faces);\n\tvar color_ints = [];\n\tfor (var i = 0; i < g.tris.length; i ++) {\n\t  var c = colors[Math.random() * colors.length | 0]\n\t  for (var j = 0; j < (faces ? 3 : 1); j ++) {\n\t    color_ints.push(c)\n\t  }\n\t}\n\tvar vertices = []\n\tg.points.forEach(function (point) {\n\t  vertices.push([\n\t    point[0] * 2,\n\t    point[1] * 2,\n\t    point[2] * 2 + 5,\n\t    1\n\t  ])\n\t})\n\tgeos.add({\n\t  color       : color_ints,\n\t  allocations : {},\n\t  tris        : g.tris,\n\t  vertices    : vertices\n\t})\n\t\n\tvar subs2 = 4\n\tvar faces2 = true\n\tvar geos2  = getRenderable(subs2, faces2)\n\tscreen.addRenderable(geos2)\n\tvar g = geodesic(subs2).getGeometry(faces2);\n\tvar color_ints = [];\n\tfor (var i = 0; i < g.tris.length; i ++) {\n\t  var c = colors[Math.random() * colors.length | 0]\n\t  for (var j = 0; j < (faces2 ? 3 : 1); j ++) {\n\t    color_ints.push(c)\n\t  }\n\t}\n\tvar vertices = []\n\tg.points.forEach(function (point) {\n\t  vertices.push([\n\t    point[0] * 2 / 3 + 4,\n\t    point[1] * 2 / 3 + 4,\n\t    point[2] * 2 / 3 + 10,\n\t    1\n\t  ])\n\t})\n\tgeos2.add({\n\t  color       : color_ints,\n\t  allocations : {},\n\t  tris        : g.tris,\n\t  vertices    : vertices\n\t})\n\t\n\tscreen.beginFrameRendering(false)\n\n\n/***/ }\n]);\n\n\n/** WEBPACK FOOTER **\n ** geodesic/bundle.js\n **/","var DkcpGl            = require('../../src/dkcp-gl')\n\nvar Renderable        = DkcpGl.Renderable\nvar Model             = DkcpGl.Model\nvar shaders           = DkcpGl.shaders\nvar Shader            = DkcpGl.Shader\nvar Allocation        = DkcpGl.Allocation\nvar geodesic          = DkcpGl.geodesic\n\nvar main = new DkcpGl({\n  canvas : document.getElementById('canvas'),\n  frameRate : {\n    element : document.getElementById('framerate')\n  },\n  wasd : {\n    document : document,\n    delta : .25,\n    theta : -Math.PI / 60\n  }\n})\nvar camera = main.camera;\nvar screen = main.screen;\n\nfunction getRenderable(subdivisions, individual_faces) {\n  return new Renderable({\n    before : function () {\n    },\n    getUniforms : function () {\n      return {\n        camera : camera.computeMatrix()\n      }\n    },\n    factory : function () {\n      \n      var maxColors = 300\n      var colorAllocation = new Allocation.Float(maxColors, 4)\n      \n      var shader = new Shader(function () {\n        return '  gl_Position = camera * position; \\n' + \n               '  f_color = colors[int(color)]; \\n'\n      }, function () {\n        return '  gl_FragColor = f_color ;\\n'\n      })\n      shader.attributes.position   = 'vec4';\n      shader.attributes.color      = 'float';\n      shader.varyings.f_color      = 'vec4';\n      shader.vertex_uniforms.camera = 'mat4';\n      shader.vertex_uniforms['colors[' + maxColors + ']'] = 'vec4';\n\n      var m = new Model.Geodesics(this, shader, 2, subdivisions, individual_faces)\n      m.addAttribute('position', 4, 'Float32Array', function (i, item) {\n        return item.vertices[i]\n      });\n      \n      m.addAttribute('color', 1, 'Float32Array', function (i, item) {\n        return [\n          colorAllocation.add(item.color[i], item, function () {\n            return item.color[i].color\n          })\n        ]\n      });\n  \n      m.uniforms.colors = colorAllocation.buffer;\n  \n      return m\n    }\n  })\n}\n\nvar red     = {id: 'red',     color: [1, 0, 0, 1]}\nvar yellow  = {id: 'yellow',  color: [1, 1, 0, 1]}\nvar green   = {id: 'green',   color: [0, 1, 0, 1]}\nvar cyan    = {id: 'cyan',    color: [0, 1, 1, 1]}\nvar blue    = {id: 'blue',    color: [0, 0, 1, 1]}\nvar magenta = {id: 'magenta', color: [1, 0, 1, 1]}\nvar white   = {id: 'white',   color: [1, 1, 1, 1]}\n\nvar colors  = [red, yellow, green, cyan, blue, magenta, white];\n\n\nvar subs = 11\nvar faces = false\nvar geos  = getRenderable(subs, faces)\nscreen.addRenderable(geos)\n\nvar g = geodesic(subs).getGeometry(faces);\nvar color_ints = [];\nfor (var i = 0; i < g.tris.length; i ++) {\n  var c = colors[Math.random() * colors.length | 0]\n  for (var j = 0; j < (faces ? 3 : 1); j ++) {\n    color_ints.push(c)\n  }\n}\nvar vertices = []\ng.points.forEach(function (point) {\n  vertices.push([\n    point[0] * 2,\n    point[1] * 2,\n    point[2] * 2 + 5,\n    1\n  ])\n})\ngeos.add({\n  color       : color_ints,\n  allocations : {},\n  tris        : g.tris,\n  vertices    : vertices\n})\n\nvar subs2 = 4\nvar faces2 = true\nvar geos2  = getRenderable(subs2, faces2)\nscreen.addRenderable(geos2)\nvar g = geodesic(subs2).getGeometry(faces2);\nvar color_ints = [];\nfor (var i = 0; i < g.tris.length; i ++) {\n  var c = colors[Math.random() * colors.length | 0]\n  for (var j = 0; j < (faces2 ? 3 : 1); j ++) {\n    color_ints.push(c)\n  }\n}\nvar vertices = []\ng.points.forEach(function (point) {\n  vertices.push([\n    point[0] * 2 / 3 + 4,\n    point[1] * 2 / 3 + 4,\n    point[2] * 2 / 3 + 10,\n    1\n  ])\n})\ngeos2.add({\n  color       : color_ints,\n  allocations : {},\n  tris        : g.tris,\n  vertices    : vertices\n})\n\nscreen.beginFrameRendering(false)\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./examples/geodesic/index.js\n ** module id = 0\n ** module chunks = 3\n **/"],"sourceRoot":""}