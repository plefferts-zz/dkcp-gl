{"version":3,"sources":["webpack:///picking/bundle.js","webpack:///./examples/picking/index.js","webpack:///./~/inherits/inherits_browser.js","webpack:///./src/picking.js"],"names":["webpackJsonp","module","exports","__webpack_require__","getRenderable","m4","identity","Float32Array","Renderable","renderOrder","getUniforms","uniforms","renderSet","camera","computeMatrix","factory","maxColors","colorAllocation","Allocation","Float","shader","picking","HitTestShader","hitTestManager","hitColorAllocation","hit_test","hit_test_zoom_matrix","attributes","position","color","varyings","f_color","vertex_uniforms","m","Model","this","mixinModel","addAttribute","i","item","vertices","add","colors","buffer","click","x","y","render","gl","mousemove","mousex","mousey","DkcpGl","Plate","Shader","main","canvas","document","getElementById","frameRate","element","wasd","delta","theta","Math","PI","screen","HitTestManager","square","z","w","red","id","green","blue","white","addRenderable","before","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","quads","hit_area","allocations","fragment_uniforms","texture","v_pos","framebuffers","plate","textureData","disable","DEPTH_TEST","enable","BLEND","blendEquationSeparate","FUNC_ADD","blendFuncSeparate","ONE_MINUS_DST_ALPHA","DST_ALPHA","ONE","geom","getGeometry","drawPrep","draw","beginFrameRendering","on","addEventListener","e","rect","getBoundingClientRect","clientX","left","width","frameWidth","clientY","top","height","frameHeight",32,"Object","create","ctor","superCtor","super_","prototype","constructor","value","enumerable","writable","configurable","TempCtor",33,"HitTestRenderSet","HitTestFrameBuffer","unbind","RenderSet","call","size","opt_depth","depth","tex","twgl","createTexture","target","TEXTURE_2D","min","LINEAR","mag","format","RGBA","type","UNSIGNED_BYTE","wrapS","CLAMP_TO_EDGE","wrapT","db","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","fb","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","DEPTH_ATTACHMENT","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","WebGLDebugUtils","glEnumToString","framebuffer","inherits","HitColorAllocation","max","owner","index","b","g","r","hitAreaFor","arr","c","members","attribute_name","uniform_name","model","allocation","getVertexBodySource","getFragmentBodySource","wrapVertexSource","wrapFragmentSource","f_hit_color","hit_color","slots","fn","getProgram","hit_test_program","createProgramInfo","getVertexSource","getFragmentSource","clickx","clicky","bind","zoom","dst","translate","scaling","Uint8Array","readPixels","Array","slice","join","lastarr","console","log","viewport","drawingBufferWidth","drawingBufferHeight"],"mappings":"AAAAA,cAAc,IAER,EACA,SAASC,EAAQC,EAASC,GCwBhC,QAAAC,KACAC,EAAAC,SAAA,GAAAC,cAAA,IACA,WAAAC,IACAC,YAAA,GACAC,YAAA,SAAAC,EAAAC,GAEA,MADAD,GAAAE,SAAAC,gBACAH,GAEAI,QAAA,WAEA,GAAAC,GAAA,IACAC,EAAA,GAAAC,GAAAC,MAAAH,EAAA,GAEAI,EAAA,GAAAC,GAAAC,cAAAC,EAAAC,mBAAA,SAAAC,GACA,GAAAC,GAAAD,EAAA,4BAEA,0BAAAC,EAAA,wEAEO,WACP,sCAGAN,GAAAO,WAAAC,SAAA,OACAR,EAAAO,WAAAE,MAAA,QACAT,EAAAU,SAAAC,QAAA,OACAX,EAAAY,gBAAAnB,OAAA,OACAO,EAAAY,gBAAA,UAAAhB,EAAA,WAEA,IAAAiB,GAAA,GAAAC,GAAAC,KAAAf,EAAA,IAkBA,OAhBAG,GAAAa,WAAAH,GAEAA,EAAAI,aAAA,qCAAAC,EAAAC,GACA,MAAAA,GAAAC,SAAAF,KAGAL,EAAAI,aAAA,kCAAAC,EAAAC,GACA,OACAtB,EAAAwB,IAAAF,EAAAV,MAAAU,EAAA,WACA,MAAAA,GAAAV,iBAKAI,EAAAtB,SAAA+B,OAAAzB,EAAA0B,OAEAV,KA+GA,QAAAW,GAAAC,EAAAC,GACAvB,EAAAX,UAAAmC,OAAAC,EAAAnC,EAAAgC,EAAA,EAAAC,EAAA,GAEA,QAAAG,GAAAJ,EAAAC,GACAvB,EAAAX,UAAAmC,OAAAC,EAAAnC,EAAAqC,EAAAL,EAAA,EAAAM,EAAAL,EAAA,GA5LA,GAAAzC,GAAAF,EAAA,GAAAE,GACA+C,EAAAjD,EAAA,GACAkB,EAAAlB,EAAA,IAEAK,EAAA4C,EAAA5C,WACA0B,EAAAkB,EAAAlB,MACAmB,EAAAD,EAAAC,MACAC,EAAAF,EAAAE,OACApC,EAAAkC,EAAAlC,WAEAqC,EAAA,GAAAH,IACAI,OAAAC,SAAAC,eAAA,UACAC,WACAC,QAAAH,SAAAC,eAAA,cAEAG,MACAJ,kBACAK,MAAA,IACAC,OAAAC,KAAAC,GAAA,OAGApD,EAAA0C,EAAA1C,OACAqD,EAAAX,EAAAW,OACAlB,EAAAO,EAAAW,OAAAlB,GAEAzB,EAAA,GAAAF,GAAA8C,eAAAnB,EAAA,KAqDAoB,EAAA,SAAAvB,EAAAC,EAAAuB,EAAAC,GACA,QACAzB,EAAAyB,EAAAxB,EAAAwB,EAAAD,EAAA,IACAxB,EAAAyB,EAAAxB,EAAAwB,EAAAD,EAAA,IACAxB,EAAAyB,EAAAxB,EAAAwB,EAAAD,EAAA,IACAxB,EAAAyB,EAAAxB,EAAAwB,EAAAD,EAAA,KAIAE,GAAeC,GAAA,MAAA3C,OAAA,UACf4C,GAAeD,GAAA,QAAA3C,OAAA,UACf6C,GAAeF,GAAA,OAAA3C,OAAA,UACf8C,GAAeH,GAAA,QAAA3C,OAAA,SAEfqC,GAAAU,eACAC,OAAA,WACA7B,EAAA8B,WAAA,SACA9B,EAAA+B,MAAA/B,EAAAgC,iBAAAhC,EAAAiC,mBAEAxE,YAAA,GAGA,IAAAyE,GAAA9E,GACA8D,GAAAU,cAAAM,GACA3D,EAAAX,UAAAgE,cAAAM,GAEAA,EAAAzC,KACAZ,MAAA0C,EACAY,SAAA,MACAC,eACA5C,SAAA4B,EAAA,gBAEAc,EAAAzC,KACAZ,MAAA4C,EACAU,SAAA,QACAC,eACA5C,SAAA4B,EAAA,gBAEAc,EAAAzC,KACAZ,MAAA6C,EACAS,SAAA,OACAC,eACA5C,SAAA4B,EAAA,cAEAc,EAAAzC,KACAZ,MAAA8C,EACAQ,SAAA,QACAC,eACA5C,SAAA4B,EAAA,cAKC,WAED,GAAAhD,GAAA,GAAAkC,GAAA,WACA,qHAIG,WACH,qLAMAlC,GAAAO,WAAAC,SAAA,OACAR,EAAAiE,kBAAAC,QAAA,YACAlE,EAAAY,gBAAAnB,OAAA,OACAO,EAAAU,SAAAyD,MAAA,MAEA,IAAAD,GAAA/D,EAAAX,UAAA4E,aAAAF,QACAG,EAAA,GAAApC,GAAAjC,EACAqE,GAAAC,aAAuBJ,WACvBG,EAAAhD,KAAa4B,EAAA,GAEb,IAAA1D,KAEAuD,GAAAU,eACAnE,YAAA,GACAsC,OAAA,SAAAC,GACAA,EAAA2C,QAAA3C,EAAA4C,YACA5C,EAAA6C,OAAA7C,EAAA8C,OACA9C,EAAA+C,sBAAA/C,EAAAgD,SAAAhD,EAAAgD,UACAhD,EAAAiD,kBAAAjD,EAAAkD,oBAAAlD,EAAAmD,UAAAnD,EAAAoD,IAAApD,EAAAoD,KACAzF,EAAAE,SAAAC,gBACAH,EAAA2E,iBACA,IAAAe,GAAAZ,EAAAa,YAAAtD,EACAyC,GAAAc,SAAAF,EAAA1F,GACA0F,EAAAG,OACAxD,EAAA2C,QAAA3C,EAAA8C,OACA9C,EAAA6C,OAAA7C,EAAA4C,kBAMA1B,EAAAuC,qBAAA,EAEA,IAAAvD,GAAAC,CAEAe,GAAAwC,GAAA,mBACAnF,EAAAX,UAAAmC,OAAAC,EAAAnC,EAAAqC,EAAAC,KAUAM,SAAAC,eAAA,UAAAiD,iBAAA,iBAAAC,GACA,GAAAC,GAAApD,SAAAC,eAAA,UAAAoD,uBACAlE,IAAAgE,EAAAG,QAAAF,EAAAG,MAAAH,EAAAI,MAAApG,EAAAqG,YAAAN,EAAAO,QAAAN,EAAAO,KAAAP,EAAAQ,OAAAxG,EAAAyG,eAGA7D,SAAAC,eAAA,UAAAiD,iBAAA,qBAAAC,GACA,GAAAC,GAAApD,SAAAC,eAAA,UAAAoD,uBACA7D,IAAA2D,EAAAG,QAAAF,EAAAG,MAAAH,EAAAI,MAAApG,EAAAqG,YAAAN,EAAAO,QAAAN,EAAAO,KAAAP,EAAAQ,OAAAxG,EAAAyG,gBDUMC,GACA,SAAStH,EAAQC,GEjNvB,kBAAAsH,QAAAC,OAEAxH,EAAAC,QAAA,SAAAwH,EAAAC,GACAD,EAAAE,OAAAD,EACAD,EAAAG,UAAAL,OAAAC,OAAAE,EAAAE,WACAC,aACAC,MAAAL,EACAM,YAAA,EACAC,UAAA,EACAC,cAAA,MAMAjI,EAAAC,QAAA,SAAAwH,EAAAC,GACAD,EAAAE,OAAAD,CACA,IAAAQ,GAAA,YACAA,GAAAN,UAAAF,EAAAE,UACAH,EAAAG,UAAA,GAAAM,GACAT,EAAAG,UAAAC,YAAAJ,IF0NMU,GACA,SAASnI,EAAQC,EAASC,GGlJhC,QAAAkI,GAAArF,EAAAzB,GACAY,KAAAZ,iBACAY,KAAAqD,aAAA,GAAA8C,GAAAtF,EAAA,MACAb,KAAAqD,aAAA+C,SAEAC,EAAAC,KAAAtG,MAEAA,KAAAyC,eACAC,OAAA,WACA7B,EAAA8B,WAAA,SACA9B,EAAA+B,MAAA/B,EAAAgC,iBAAAhC,EAAAiC,mBAEAxE,YAAA,IAqCA,QAAA6H,GAAAtF,EAAA0F,EAAAC,GACAxG,KAAAa,KACAb,KAAAuG,OACAvG,KAAAyG,MAAAD,CACA,IAAAE,IACAvD,QAAAwD,EAAAC,cAAA/F,GACAgG,OAAAhG,EAAAiG,WACAhC,MAAA9E,KAAAuG,KACArB,OAAAlF,KAAAuG,KACAQ,IAAAlG,EAAAmG,OACAC,IAAApG,EAAAmG,OACAE,OAAArG,EAAAsG,KACAC,KAAAvG,EAAAwG,cACAC,MAAAzG,EAAA0G,cACAC,MAAA3G,EAAA0G,gBAGA,IAAAvH,KAAAyG,MAAA,CACA,GAAAgB,GAAA5G,EAAA6G,oBACA7G,GAAA8G,iBAAA9G,EAAA+G,aAAAH,GACA5G,EAAAgH,oBACAhH,EAAA+G,aAAA/G,EAAAiH,kBAAA9H,KAAAuG,KAAAvG,KAAAuG,MAGA,GAAAwB,GAAAlH,EAAAmH,mBACAnH,GAAAoH,gBAAApH,EAAAqH,YAAAH,GACAlH,EAAAsH,qBACAtH,EAAAqH,YACArH,EAAAuH,kBACAvH,EAAAiG,WACAJ,EAAAvD,QACA,GACAnD,KAAAyG,OACA5F,EAAAwH,wBACAxH,EAAAqH,YACArH,EAAAyH,iBACAzH,EAAA+G,aACAH,EAEA,IAAAc,GAAA1H,EAAA2H,uBAAA3H,EAAAqH,YACA,IAAAK,GAAA1H,EAAA4H,qBACA,6CAAAC,gBAAAC,eAAAJ,EAEAvI,MAAA4I,YAAAb,EACAlH,EAAA8G,iBAAA9G,EAAA+G,aAAA,MACA5H,KAAAmD,QAAAuD,EA3LA,GAAAmC,GAAA7K,EAAA,IACAiD,EAAAjD,EAAA,GACAe,EAAAkC,EAAAlC,WACAoC,EAAAF,EAAAE,OACAkF,EAAApF,EAAAoF,UACAM,EAAA3I,EAAA,GACAE,EAAAyI,EAAAzI,GAEA4K,EAAA,SAAAC,GACAhK,EAAAC,MAAAsH,KAAAtG,KAAA+I,EAAA,GAEAF,GAAAC,EAAA/J,EAAAC,OAEA8J,EAAApD,UAAApF,IAAA,SAAAF,EAAA4I,GACA,MAAAjK,GAAAC,MAAA0G,UAAApF,IAAAgG,KAAAtG,KAAAI,EAAA4I,EAAA,SAAAC,GACA,GAAAC,IAAAD,IAAA,OACAE,GAAAF,IAAA,OACAG,GAAAH,IAAA,OACA,QAAAG,EAAA,IAAAD,EAAA,IAAAD,EAAA,UAIAJ,EAAApD,UAAA2D,WAAA,SAAAC,GACA,GAAAC,GAAA,MAAAD,EAAA,OAAAA,EAAA,GAAAA,EAAA,EACA,OAAAtJ,MAAAwJ,QAAAD,GAGA,IAAAvH,GAAA,SAAAnB,EAAAkI,GACA/I,KAAAyJ,eAAA,YACAzJ,KAAA0J,aAAA,aACA1J,KAAAX,mBAAA,GAAAyJ,GAAAC,GACA/I,KAAAvB,UAAA,GAAAyH,GAAArF,EAAAb,MAGAgC,GAAA0D,UAAA2D,WAAA,SAAAC,GACA,MAAAtJ,MAAAX,mBAAAgK,WAAAC,IAGAtH,EAAA0D,UAAAzF,WAAA,SAAA0J,GACA,GAAAC,GAAA5J,KAAAX,kBACAsK,GAAAzJ,aAAAF,KAAAyJ,eAAA,0BAAAtJ,EAAAC,GACA,OACAwJ,EAAAtJ,KAAsB+B,GAAAjC,EAAA4C,UAAkB5C,MAGxCuJ,EAAAnL,SAAAwB,KAAA0J,cAAA1J,KAAAX,mBAAAmB,OAGA,IAAArB,GAAA,SAAAE,EAAAwK,EAAAC,GACA3I,EAAAmF,KAAAtG,KACAA,KAAA+J,iBAAAF,GACA7J,KAAAgK,mBAAAF,IAEA9J,KAAAX,qBACAW,KAAAL,SAAAsK,YAAA,OACAjK,KAAAR,WAAA0K,UAAA,QACAlK,KAAAH,gBAAAN,qBAAA,OACAS,KAAAH,gBAAA,cAAAG,KAAAX,mBAAA8K,MAAApB,IAAA,YAEAF,GAAA1J,EAAAgC,GAEAhC,EAAAuG,UAAAqE,iBAAA,SAAAK,GACA,kBACA,MAAAA,GAAApK,KAAAV,UAAA,kDAIAH,EAAAuG,UAAAsE,mBAAA,SAAAI,GACA,kBACA,MAAApK,MAAAV,SACA,mCAEA8K,MAIAjL,EAAAuG,UAAA2E,WAAA,SAAAxJ,EAAArC,GACA,MAAAA,GAAAe,qBACAS,KAAAsK,iBACAtK,KAAAsK,kBAEAtK,KAAAV,UAAA,EACAU,KAAAsK,iBAAA3D,EAAA4D,kBACA1J,GACAb,KAAAwK,kBAAAxK,KAAAyK,wBAIAzK,KAAAV,UAAA,EACA6B,EAAAuE,UAAA2E,WAAA/D,KAAAtG,KAAAa,EAAArC,KAoBAqK,EAAA3C,EAAAG,GAEAH,EAAAR,UAAAnH,YAAA,WACA,OACAgB,qBAAAS,KAAAT,uBAGA2G,EAAAR,UAAA9E,OAAA,SAAAC,EAAAnC,EAAAgM,EAAAC,GACA3K,KAAAqD,aAAAuH,MACA,IAAAC,GAAAhJ,KAAAkH,IAAArK,EAAAqG,WAAArG,EAAAyG,aACA2F,EAAA,GAAA1M,cAAA,GACAF,GAAA6M,UAAA7M,EAAA8M,SAAAH,IAAA,KACA,MAAAH,EAAAhM,EAAAqG,YACA,OAAA4F,EAAAjM,EAAAyG,aACA,GACA2F,GAEA9K,KAAAT,qBAAAuL,EAEAzE,EAAAX,UAAA9E,OAAA0F,KAAAtG,KAAAa,EAEA,IAAAyI,GAAA,GAAA2B,YAAA,GACApK,GAAAqK,WAAA,QAAArK,EAAAsG,KAAAtG,EAAAwG,cAAAiC,GACAA,EAAA6B,MAAAzF,UAAA0F,MAAA9E,KAAAgD,EAAA,KACAA,EAAA+B,KAAA,MAAArL,KAAAsL,SACAC,QAAAC,IAAAxL,KAAAZ,eAAAiK,WAAAC,IAEAtJ,KAAAsL,QAAAhC,EAAA+B,KAAA,KAEArL,KAAAqD,aAAA+C,UAoDAD,EAAAT,UAAAkF,KAAA,WACA,GAAA/J,GAAAb,KAAAa,EACAA,GAAAoH,gBAAApH,EAAAqH,YAAAlI,KAAA4I,aACA/H,EAAA4K,SAAA,IAAAzL,KAAAuG,KAAAvG,KAAAuG,OAGAJ,EAAAT,UAAAU,OAAA,WACA,GAAAvF,GAAAb,KAAAa,EACAA,GAAAoH,gBAAApH,EAAAqH,YAAA,MACArH,EAAA4K,SACA,IACA5K,EAAA6K,oBAAA7K,EAAAQ,OAAAyD,MACAjE,EAAA8K,qBAAA9K,EAAAQ,OAAA6D,SAGApH,EAAAC,QAAAoB,gBACArB,EAAAC,QAAAiE","file":"picking/bundle.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar m4                = __webpack_require__(7).m4\n\tvar DkcpGl            = __webpack_require__(1)\n\tvar picking           = __webpack_require__(33)\n\t\n\tvar Renderable        = DkcpGl.Renderable\n\tvar Model             = DkcpGl.Model\n\tvar Plate             = DkcpGl.Plate\n\tvar Shader            = DkcpGl.Shader\n\tvar Allocation        = DkcpGl.Allocation\n\t\n\tvar main = new DkcpGl({\n\t  canvas : document.getElementById('canvas'),\n\t  frameRate : {\n\t    element : document.getElementById('framerate')\n\t  },\n\t  wasd : {\n\t    document : document,\n\t    delta : .05,\n\t    theta : -Math.PI / 120\n\t  }\n\t})\n\tvar camera = main.camera;\n\tvar screen = main.screen;\n\tvar gl     = main.screen.gl;\n\t\n\tvar hitTestManager = new picking.HitTestManager(gl, 100);\n\t\n\tfunction getRenderable() {\n\t  var identity = m4.identity(new Float32Array(16));\n\t  return new Renderable({\n\t    renderOrder : 10,\n\t    getUniforms : function (uniforms, renderSet) {\n\t      uniforms.camera = camera.computeMatrix()\n\t      return uniforms\n\t    },\n\t    factory : function () {\n\t      \n\t      var maxColors = 100\n\t      var colorAllocation    = new Allocation.Float(maxColors, 4)\n\t      \n\t      var shader = new picking.HitTestShader(hitTestManager.hitColorAllocation, function (hit_test) {\n\t        var hit_test_zoom_matrix = hit_test ? 'hit_test_zoom_matrix * ' : '';\n\t\n\t        return '  gl_Position = ' + hit_test_zoom_matrix + 'camera * position; \\n' + \n\t               '  f_color = colors[int(color)];              \\n'\n\t      }, function () {\n\t        return '  gl_FragColor = f_color; \\n'\n\t      })\n\t\n\t      shader.attributes.position     = 'vec4';\n\t      shader.attributes.color        = 'float';\n\t      shader.varyings.f_color        = 'vec4';\n\t      shader.vertex_uniforms.camera  = 'mat4';\n\t      shader.vertex_uniforms['colors[' + maxColors + ']'] = 'vec4';\n\t\n\t      var m = new Model(this, shader, 100)\n\t\n\t      hitTestManager.mixinModel(m)\n\t      \n\t      m.addAttribute('position', 4, 'Float32Array', function (i, item) {\n\t        return item.vertices[i]\n\t      });\n\t      \n\t      m.addAttribute('color', 1, 'Float32Array', function (i, item) {\n\t        return [\n\t          colorAllocation.add(item.color, item, function () {\n\t            return item.color.color\n\t          })\n\t        ]\n\t      });\n\t\n\t      m.uniforms.colors = colorAllocation.buffer;\n\t  \n\t      return m\n\t    }\n\t  })\n\t}\n\t\n\tvar square = function (x, y, z, w) {\n\t  return [\n\t    [x - w,  y - w, z, 1],\n\t    [x - w,  y + w, z, 1],\n\t    [x + w,  y - w, z, 1],\n\t    [x + w,  y + w, z, 1]\n\t  ]\n\t}\n\t\n\tvar red     = {id: 'red',     color: [1, 0, 0, 1]}\n\tvar green   = {id: 'green',   color: [0, 1, 0, 1]}\n\tvar blue    = {id: 'blue',    color: [0, 0, 1, 1]}\n\tvar white   = {id: 'white',   color: [1, 1, 1, 1]}\n\t\n\tscreen.addRenderable({\n\t  before : function () {\n\t    gl.clearColor(0,0,0,0);\n\t    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t  },\n\t  renderOrder : 0\n\t})\n\t\n\tvar quads  = getRenderable()\n\tscreen.addRenderable(quads)\n\thitTestManager.renderSet.addRenderable(quads);\n\t\n\tquads.add({\n\t  color : red,\n\t  hit_area : 'red',\n\t  allocations : {},\n\t  vertices : square(.25, 0, .7, .05)\n\t})\n\tquads.add({\n\t  color : green,\n\t  hit_area : 'green',\n\t  allocations : {},\n\t  vertices : square(0, .25, .7, .05)\n\t})\n\tquads.add({\n\t  color : blue,\n\t  hit_area : 'blue',\n\t  allocations : {},\n\t  vertices : square(0, 0, .9, .05)\n\t})\n\tquads.add({\n\t  color : white,\n\t  hit_area : 'white',\n\t  allocations : {},\n\t  vertices : square(0, 0, .7, .01)\n\t})\n\t\n\t\n\t  \n\t;(function () {\n\t  \n\t  var shader = new Shader(function () {\n\t    return (\n\t      '  v_pos       = position; \\n' +\n\t      '  gl_Position = camera * vec4(position.x / 4.0, position.y / 4.0, 1.5, 1.0); \\n'\n\t    ) \n\t  }, function () {\n\t    return (\n\t      '  gl_FragColor = texture2D(                            \\n'+\n\t      '      texture,                                         \\n'+\n\t      '      vec2(v_pos.x / 2.0 + 0.5, v_pos.y / 2.0 + 0.5)); \\n'\n\t    )\n\t  })\n\t  shader.attributes.position              = 'vec4';\n\t  shader.fragment_uniforms.texture        = 'sampler2D';\n\t  shader.vertex_uniforms.camera           = 'mat4';\n\t  shader.varyings.v_pos                   = 'vec4';\n\t  \n\t  var texture = hitTestManager.renderSet.framebuffers.texture\n\t  var plate = new Plate(shader);\n\t  plate.textureData = {texture : texture}\n\t  plate.add({z: 1})\n\t  \n\t  var uniforms = {};\n\t\n\t  screen.addRenderable({\n\t    renderOrder : 30,\n\t    render : function (gl) {\n\t      gl.disable(gl.DEPTH_TEST);\n\t      gl.enable(gl.BLEND);\n\t      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n\t      uniforms.camera = camera.computeMatrix();\n\t      uniforms.texture = texture.texture;\n\t      var geom = plate.getGeometry(gl);\n\t      plate.drawPrep(geom, uniforms);\n\t      geom.draw();\n\t      gl.disable(gl.BLEND);\n\t      gl.enable(gl.DEPTH_TEST);\n\t    }\n\t  })\n\t\n\t}());\n\t\n\tscreen.beginFrameRendering(false)\n\t\n\tvar mousex, mousey;\n\t\n\tscreen.on('moved', function () {\n\t  hitTestManager.renderSet.render(gl, camera, mousex, mousey)\n\t})\n\t\n\tfunction click(x, y) {\n\t  hitTestManager.renderSet.render(gl, camera, x - 1, y - 1)\n\t}\n\tfunction mousemove(x, y) {\n\t  hitTestManager.renderSet.render(gl, camera, mousex = x - 1, mousey = y - 1)\n\t}\n\t\n\tdocument.getElementById('canvas').addEventListener('click', function (e) {\n\t  var rect = document.getElementById('canvas').getBoundingClientRect()\n\t  click((e.clientX - rect.left) / rect.width * camera.frameWidth, (e.clientY - rect.top) / rect.height * camera.frameHeight)\n\t})\n\t\n\tdocument.getElementById('canvas').addEventListener('mousemove', function (e) {\n\t  var rect = document.getElementById('canvas').getBoundingClientRect()\n\t  mousemove((e.clientX - rect.left) / rect.width * camera.frameWidth, (e.clientY - rect.top) / rect.height * camera.frameHeight)\n\t})\n\n/***/ },\n\n/***/ 32:\n/***/ function(module, exports) {\n\n\tif (typeof Object.create === 'function') {\n\t  // implementation from standard node.js 'util' module\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor\n\t    ctor.prototype = Object.create(superCtor.prototype, {\n\t      constructor: {\n\t        value: ctor,\n\t        enumerable: false,\n\t        writable: true,\n\t        configurable: true\n\t      }\n\t    });\n\t  };\n\t} else {\n\t  // old school shim for old browsers\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor\n\t    var TempCtor = function () {}\n\t    TempCtor.prototype = superCtor.prototype\n\t    ctor.prototype = new TempCtor()\n\t    ctor.prototype.constructor = ctor\n\t  }\n\t}\n\n\n/***/ },\n\n/***/ 33:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar inherits   = __webpack_require__(32)\n\tvar DkcpGl     = __webpack_require__(1)\n\tvar Allocation = DkcpGl.Allocation\n\tvar Shader     = DkcpGl.Shader\n\tvar RenderSet  = DkcpGl.RenderSet\n\tvar twgl       = __webpack_require__(7)\n\tvar m4         = twgl.m4\n\t\n\tvar HitColorAllocation = function (max) {\n\t  Allocation.Float.call(this, max, 4)\n\t}\n\tinherits(HitColorAllocation, Allocation.Float)\n\t\n\tHitColorAllocation.prototype.add = function (item, owner) {\n\t  return Allocation.Float.prototype.add.call(this, item, owner, function (index) {\n\t    var b = (index >>>  0) % 0x100;\n\t    var g = (index >>>  8) % 0x100;\n\t    var r = (index >>> 16) % 0x100;\n\t    return [r / 255, g / 255, b / 255, 1]\n\t  })\n\t}\n\t\n\tHitColorAllocation.prototype.hitAreaFor = function (arr) {\n\t  var c = arr[0] * 0x10000 + arr[1] * 0x100 + arr[2];\n\t  return this.members[c]\n\t}\n\t\n\tvar HitTestManager = function (gl, max) {\n\t  this.attribute_name     = 'hit_color';\n\t  this.uniform_name       = 'hit_colors';\n\t  this.hitColorAllocation = new HitColorAllocation(max);\n\t  this.renderSet          = new HitTestRenderSet(gl, this);\n\t}\n\t\n\tHitTestManager.prototype.hitAreaFor = function (arr) {\n\t  return this.hitColorAllocation.hitAreaFor(arr)\n\t}\n\t\n\tHitTestManager.prototype.mixinModel = function (model) {\n\t  var allocation = this.hitColorAllocation\n\t  model.addAttribute(this.attribute_name, 1, 'Float32Array', function (i, item) {\n\t    return [\n\t      allocation.add({id: item.hit_area}, item)\n\t    ]\n\t  });\n\t  model.uniforms[this.uniform_name] = this.hitColorAllocation.buffer;\n\t}\n\t\n\tvar HitTestShader = function (hitColorAllocation, getVertexBodySource, getFragmentBodySource) {\n\t  Shader.call(this,\n\t      this.wrapVertexSource(getVertexBodySource),\n\t      this.wrapFragmentSource(getFragmentBodySource))\n\t\n\t  this.hitColorAllocation = hitColorAllocation\n\t  this.varyings.f_hit_color  = 'vec4';\n\t  this.attributes.hit_color  = 'float';\n\t  this.vertex_uniforms.hit_test_zoom_matrix = 'mat4';\n\t  this.vertex_uniforms['hit_colors[' + this.hitColorAllocation.slots.max + ']'] = 'vec4';\n\t}\n\tinherits(HitTestShader, Shader)\n\t\n\tHitTestShader.prototype.wrapVertexSource = function (fn) {\n\t  return function () {\n\t    return fn(this.hit_test) + '\\n  f_hit_color = hit_colors[int(hit_color)];'\n\t  }\n\t};\n\t\n\tHitTestShader.prototype.wrapFragmentSource = function (fn) {\n\t  return function () {\n\t    if (this.hit_test) {\n\t      return ' gl_FragColor = f_hit_color;  \\n'\n\t    }\n\t    return fn();\n\t  }\n\t};\n\t\n\tHitTestShader.prototype.getProgram = function (gl, uniforms) {\n\t  if (uniforms.hit_test_zoom_matrix) {\n\t    if (this.hit_test_program)\n\t      return this.hit_test_program\n\t    \n\t    this.hit_test = true\n\t    return this.hit_test_program = twgl.createProgramInfo(\n\t      gl,\n\t      [this.getVertexSource(), this.getFragmentSource()]\n\t    )\n\t  }\n\t  \n\t  this.hit_test = false\n\t  return Shader.prototype.getProgram.call(this, gl, uniforms)\n\t};\n\t\n\t\n\tfunction HitTestRenderSet(gl, hitTestManager) {\n\t  this.hitTestManager = hitTestManager;\n\t  this.framebuffers = new HitTestFrameBuffer(gl, 2, true);\n\t  this.framebuffers.unbind()\n\t  \n\t  RenderSet.call(this)\n\t\n\t  this.addRenderable({\n\t    before : function () {\n\t      gl.clearColor(1, 1, 1, 1);\n\t      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t    },\n\t    renderOrder : 0\n\t  })\n\t  \n\t}\n\tinherits(HitTestRenderSet, RenderSet)\n\t\n\tHitTestRenderSet.prototype.getUniforms = function () {\n\t  return {\n\t    hit_test_zoom_matrix : this.hit_test_zoom_matrix\n\t  }\n\t}\n\tHitTestRenderSet.prototype.render = function (gl, camera, clickx, clicky) {\n\t  this.framebuffers.bind();\n\t  var zoom = Math.max(camera.frameWidth, camera.frameHeight);\n\t  var dst = new Float32Array(16)\n\t  m4.translate(m4.scaling([zoom, zoom, 1]), [\n\t    2 * (.5 - clickx / camera.frameWidth),\n\t    -2 * (.5 - clicky / camera.frameHeight),\n\t    0\n\t  ], dst)\n\t\n\t  this.hit_test_zoom_matrix = dst\n\t\n\t  RenderSet.prototype.render.call(this, gl);\n\t  \n\t  var arr = new Uint8Array(4 * 4)\n\t  gl.readPixels(0, 0, 2, 2, gl.RGBA, gl.UNSIGNED_BYTE, arr)\n\t  arr = Array.prototype.slice.call(arr, 0, 3)\n\t  if (arr.join(',') != this.lastarr) {\n\t    console.log(this.hitTestManager.hitAreaFor(arr))\n\t  }\n\t  this.lastarr = arr.join(',')\n\t  \n\t  this.framebuffers.unbind();\n\t}\n\t\n\t\n\tfunction HitTestFrameBuffer(gl, size, opt_depth) {\n\t  this.gl = gl\n\t  this.size = size;\n\t  this.depth = opt_depth;\n\t  var tex = {\n\t    texture : twgl.createTexture(gl, {\n\t      target : gl.TEXTURE_2D,\n\t      width  : this.size,\n\t      height : this.size,\n\t      min    : gl.LINEAR,\n\t      mag    : gl.LINEAR,\n\t      format : gl.RGBA,\n\t      type   : gl.UNSIGNED_BYTE,\n\t      wrapS  : gl.CLAMP_TO_EDGE,\n\t      wrapT  : gl.CLAMP_TO_EDGE\n\t    })\n\t  }\n\t  if (this.depth) {\n\t    var db = gl.createRenderbuffer();\n\t    gl.bindRenderbuffer(gl.RENDERBUFFER, db);\n\t    gl.renderbufferStorage(\n\t        gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.size, this.size);\n\t  }\n\t\n\t  var fb = gl.createFramebuffer();\n\t  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n\t  gl.framebufferTexture2D(\n\t      gl.FRAMEBUFFER,\n\t      gl.COLOR_ATTACHMENT0,\n\t      gl.TEXTURE_2D,\n\t      tex.texture,\n\t      0);\n\t  if (this.depth) {\n\t    gl.framebufferRenderbuffer(\n\t        gl.FRAMEBUFFER,\n\t        gl.DEPTH_ATTACHMENT,\n\t        gl.RENDERBUFFER,\n\t        db);\n\t  }\n\t  var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\t  if (status != gl.FRAMEBUFFER_COMPLETE) {\n\t    throw(\"gl.checkFramebufferStatus() returned \" + WebGLDebugUtils.glEnumToString(status));\n\t  }\n\t  this.framebuffer = fb;\n\t  gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t  this.texture = tex;\n\t}\n\t\n\tHitTestFrameBuffer.prototype.bind = function() {\n\t  var gl = this.gl\n\t  gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n\t  gl.viewport(0, 0, this.size, this.size);\n\t};\n\t\n\tHitTestFrameBuffer.prototype.unbind = function() {\n\t  var gl = this.gl\n\t  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t  gl.viewport(\n\t      0, 0,\n\t      gl.drawingBufferWidth || gl.canvas.width,\n\t      gl.drawingBufferHeight || gl.canvas.height);\n\t};\n\t\n\tmodule.exports.HitTestShader  = HitTestShader\n\tmodule.exports.HitTestManager = HitTestManager\n\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** picking/bundle.js\n **/","var m4                = require('../../lib/twgl').m4\nvar DkcpGl            = require('../../src/dkcp-gl')\nvar picking           = require('../../src/picking')\n\nvar Renderable        = DkcpGl.Renderable\nvar Model             = DkcpGl.Model\nvar Plate             = DkcpGl.Plate\nvar Shader            = DkcpGl.Shader\nvar Allocation        = DkcpGl.Allocation\n\nvar main = new DkcpGl({\n  canvas : document.getElementById('canvas'),\n  frameRate : {\n    element : document.getElementById('framerate')\n  },\n  wasd : {\n    document : document,\n    delta : .05,\n    theta : -Math.PI / 120\n  }\n})\nvar camera = main.camera;\nvar screen = main.screen;\nvar gl     = main.screen.gl;\n\nvar hitTestManager = new picking.HitTestManager(gl, 100);\n\nfunction getRenderable() {\n  var identity = m4.identity(new Float32Array(16));\n  return new Renderable({\n    renderOrder : 10,\n    getUniforms : function (uniforms, renderSet) {\n      uniforms.camera = camera.computeMatrix()\n      return uniforms\n    },\n    factory : function () {\n      \n      var maxColors = 100\n      var colorAllocation    = new Allocation.Float(maxColors, 4)\n      \n      var shader = new picking.HitTestShader(hitTestManager.hitColorAllocation, function (hit_test) {\n        var hit_test_zoom_matrix = hit_test ? 'hit_test_zoom_matrix * ' : '';\n\n        return '  gl_Position = ' + hit_test_zoom_matrix + 'camera * position; \\n' + \n               '  f_color = colors[int(color)];              \\n'\n      }, function () {\n        return '  gl_FragColor = f_color; \\n'\n      })\n\n      shader.attributes.position     = 'vec4';\n      shader.attributes.color        = 'float';\n      shader.varyings.f_color        = 'vec4';\n      shader.vertex_uniforms.camera  = 'mat4';\n      shader.vertex_uniforms['colors[' + maxColors + ']'] = 'vec4';\n\n      var m = new Model(this, shader, 100)\n\n      hitTestManager.mixinModel(m)\n      \n      m.addAttribute('position', 4, 'Float32Array', function (i, item) {\n        return item.vertices[i]\n      });\n      \n      m.addAttribute('color', 1, 'Float32Array', function (i, item) {\n        return [\n          colorAllocation.add(item.color, item, function () {\n            return item.color.color\n          })\n        ]\n      });\n\n      m.uniforms.colors = colorAllocation.buffer;\n  \n      return m\n    }\n  })\n}\n\nvar square = function (x, y, z, w) {\n  return [\n    [x - w,  y - w, z, 1],\n    [x - w,  y + w, z, 1],\n    [x + w,  y - w, z, 1],\n    [x + w,  y + w, z, 1]\n  ]\n}\n\nvar red     = {id: 'red',     color: [1, 0, 0, 1]}\nvar green   = {id: 'green',   color: [0, 1, 0, 1]}\nvar blue    = {id: 'blue',    color: [0, 0, 1, 1]}\nvar white   = {id: 'white',   color: [1, 1, 1, 1]}\n\nscreen.addRenderable({\n  before : function () {\n    gl.clearColor(0,0,0,0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n  },\n  renderOrder : 0\n})\n\nvar quads  = getRenderable()\nscreen.addRenderable(quads)\nhitTestManager.renderSet.addRenderable(quads);\n\nquads.add({\n  color : red,\n  hit_area : 'red',\n  allocations : {},\n  vertices : square(.25, 0, .7, .05)\n})\nquads.add({\n  color : green,\n  hit_area : 'green',\n  allocations : {},\n  vertices : square(0, .25, .7, .05)\n})\nquads.add({\n  color : blue,\n  hit_area : 'blue',\n  allocations : {},\n  vertices : square(0, 0, .9, .05)\n})\nquads.add({\n  color : white,\n  hit_area : 'white',\n  allocations : {},\n  vertices : square(0, 0, .7, .01)\n})\n\n\n  \n;(function () {\n  \n  var shader = new Shader(function () {\n    return (\n      '  v_pos       = position; \\n' +\n      '  gl_Position = camera * vec4(position.x / 4.0, position.y / 4.0, 1.5, 1.0); \\n'\n    ) \n  }, function () {\n    return (\n      '  gl_FragColor = texture2D(                            \\n'+\n      '      texture,                                         \\n'+\n      '      vec2(v_pos.x / 2.0 + 0.5, v_pos.y / 2.0 + 0.5)); \\n'\n    )\n  })\n  shader.attributes.position              = 'vec4';\n  shader.fragment_uniforms.texture        = 'sampler2D';\n  shader.vertex_uniforms.camera           = 'mat4';\n  shader.varyings.v_pos                   = 'vec4';\n  \n  var texture = hitTestManager.renderSet.framebuffers.texture\n  var plate = new Plate(shader);\n  plate.textureData = {texture : texture}\n  plate.add({z: 1})\n  \n  var uniforms = {};\n\n  screen.addRenderable({\n    renderOrder : 30,\n    render : function (gl) {\n      gl.disable(gl.DEPTH_TEST);\n      gl.enable(gl.BLEND);\n      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n      uniforms.camera = camera.computeMatrix();\n      uniforms.texture = texture.texture;\n      var geom = plate.getGeometry(gl);\n      plate.drawPrep(geom, uniforms);\n      geom.draw();\n      gl.disable(gl.BLEND);\n      gl.enable(gl.DEPTH_TEST);\n    }\n  })\n\n}());\n\nscreen.beginFrameRendering(false)\n\nvar mousex, mousey;\n\nscreen.on('moved', function () {\n  hitTestManager.renderSet.render(gl, camera, mousex, mousey)\n})\n\nfunction click(x, y) {\n  hitTestManager.renderSet.render(gl, camera, x - 1, y - 1)\n}\nfunction mousemove(x, y) {\n  hitTestManager.renderSet.render(gl, camera, mousex = x - 1, mousey = y - 1)\n}\n\ndocument.getElementById('canvas').addEventListener('click', function (e) {\n  var rect = document.getElementById('canvas').getBoundingClientRect()\n  click((e.clientX - rect.left) / rect.width * camera.frameWidth, (e.clientY - rect.top) / rect.height * camera.frameHeight)\n})\n\ndocument.getElementById('canvas').addEventListener('mousemove', function (e) {\n  var rect = document.getElementById('canvas').getBoundingClientRect()\n  mousemove((e.clientX - rect.left) / rect.width * camera.frameWidth, (e.clientY - rect.top) / rect.height * camera.frameHeight)\n})\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./examples/picking/index.js\n ** module id = 0\n ** module chunks = 1\n **/","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/inherits/inherits_browser.js\n ** module id = 32\n ** module chunks = 1\n **/","var inherits   = require('inherits')\nvar DkcpGl     = require('./dkcp-gl')\nvar Allocation = DkcpGl.Allocation\nvar Shader     = DkcpGl.Shader\nvar RenderSet  = DkcpGl.RenderSet\nvar twgl       = require('../lib/twgl')\nvar m4         = twgl.m4\n\nvar HitColorAllocation = function (max) {\n  Allocation.Float.call(this, max, 4)\n}\ninherits(HitColorAllocation, Allocation.Float)\n\nHitColorAllocation.prototype.add = function (item, owner) {\n  return Allocation.Float.prototype.add.call(this, item, owner, function (index) {\n    var b = (index >>>  0) % 0x100;\n    var g = (index >>>  8) % 0x100;\n    var r = (index >>> 16) % 0x100;\n    return [r / 255, g / 255, b / 255, 1]\n  })\n}\n\nHitColorAllocation.prototype.hitAreaFor = function (arr) {\n  var c = arr[0] * 0x10000 + arr[1] * 0x100 + arr[2];\n  return this.members[c]\n}\n\nvar HitTestManager = function (gl, max) {\n  this.attribute_name     = 'hit_color';\n  this.uniform_name       = 'hit_colors';\n  this.hitColorAllocation = new HitColorAllocation(max);\n  this.renderSet          = new HitTestRenderSet(gl, this);\n}\n\nHitTestManager.prototype.hitAreaFor = function (arr) {\n  return this.hitColorAllocation.hitAreaFor(arr)\n}\n\nHitTestManager.prototype.mixinModel = function (model) {\n  var allocation = this.hitColorAllocation\n  model.addAttribute(this.attribute_name, 1, 'Float32Array', function (i, item) {\n    return [\n      allocation.add({id: item.hit_area}, item)\n    ]\n  });\n  model.uniforms[this.uniform_name] = this.hitColorAllocation.buffer;\n}\n\nvar HitTestShader = function (hitColorAllocation, getVertexBodySource, getFragmentBodySource) {\n  Shader.call(this,\n      this.wrapVertexSource(getVertexBodySource),\n      this.wrapFragmentSource(getFragmentBodySource))\n\n  this.hitColorAllocation = hitColorAllocation\n  this.varyings.f_hit_color  = 'vec4';\n  this.attributes.hit_color  = 'float';\n  this.vertex_uniforms.hit_test_zoom_matrix = 'mat4';\n  this.vertex_uniforms['hit_colors[' + this.hitColorAllocation.slots.max + ']'] = 'vec4';\n}\ninherits(HitTestShader, Shader)\n\nHitTestShader.prototype.wrapVertexSource = function (fn) {\n  return function () {\n    return fn(this.hit_test) + '\\n  f_hit_color = hit_colors[int(hit_color)];'\n  }\n};\n\nHitTestShader.prototype.wrapFragmentSource = function (fn) {\n  return function () {\n    if (this.hit_test) {\n      return ' gl_FragColor = f_hit_color;  \\n'\n    }\n    return fn();\n  }\n};\n\nHitTestShader.prototype.getProgram = function (gl, uniforms) {\n  if (uniforms.hit_test_zoom_matrix) {\n    if (this.hit_test_program)\n      return this.hit_test_program\n    \n    this.hit_test = true\n    return this.hit_test_program = twgl.createProgramInfo(\n      gl,\n      [this.getVertexSource(), this.getFragmentSource()]\n    )\n  }\n  \n  this.hit_test = false\n  return Shader.prototype.getProgram.call(this, gl, uniforms)\n};\n\n\nfunction HitTestRenderSet(gl, hitTestManager) {\n  this.hitTestManager = hitTestManager;\n  this.framebuffers = new HitTestFrameBuffer(gl, 2, true);\n  this.framebuffers.unbind()\n  \n  RenderSet.call(this)\n\n  this.addRenderable({\n    before : function () {\n      gl.clearColor(1, 1, 1, 1);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n    },\n    renderOrder : 0\n  })\n  \n}\ninherits(HitTestRenderSet, RenderSet)\n\nHitTestRenderSet.prototype.getUniforms = function () {\n  return {\n    hit_test_zoom_matrix : this.hit_test_zoom_matrix\n  }\n}\nHitTestRenderSet.prototype.render = function (gl, camera, clickx, clicky) {\n  this.framebuffers.bind();\n  var zoom = Math.max(camera.frameWidth, camera.frameHeight);\n  var dst = new Float32Array(16)\n  m4.translate(m4.scaling([zoom, zoom, 1]), [\n    2 * (.5 - clickx / camera.frameWidth),\n    -2 * (.5 - clicky / camera.frameHeight),\n    0\n  ], dst)\n\n  this.hit_test_zoom_matrix = dst\n\n  RenderSet.prototype.render.call(this, gl);\n  \n  var arr = new Uint8Array(4 * 4)\n  gl.readPixels(0, 0, 2, 2, gl.RGBA, gl.UNSIGNED_BYTE, arr)\n  arr = Array.prototype.slice.call(arr, 0, 3)\n  if (arr.join(',') != this.lastarr) {\n    console.log(this.hitTestManager.hitAreaFor(arr))\n  }\n  this.lastarr = arr.join(',')\n  \n  this.framebuffers.unbind();\n}\n\n\nfunction HitTestFrameBuffer(gl, size, opt_depth) {\n  this.gl = gl\n  this.size = size;\n  this.depth = opt_depth;\n  var tex = {\n    texture : twgl.createTexture(gl, {\n      target : gl.TEXTURE_2D,\n      width  : this.size,\n      height : this.size,\n      min    : gl.LINEAR,\n      mag    : gl.LINEAR,\n      format : gl.RGBA,\n      type   : gl.UNSIGNED_BYTE,\n      wrapS  : gl.CLAMP_TO_EDGE,\n      wrapT  : gl.CLAMP_TO_EDGE\n    })\n  }\n  if (this.depth) {\n    var db = gl.createRenderbuffer();\n    gl.bindRenderbuffer(gl.RENDERBUFFER, db);\n    gl.renderbufferStorage(\n        gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.size, this.size);\n  }\n\n  var fb = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      tex.texture,\n      0);\n  if (this.depth) {\n    gl.framebufferRenderbuffer(\n        gl.FRAMEBUFFER,\n        gl.DEPTH_ATTACHMENT,\n        gl.RENDERBUFFER,\n        db);\n  }\n  var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  if (status != gl.FRAMEBUFFER_COMPLETE) {\n    throw(\"gl.checkFramebufferStatus() returned \" + WebGLDebugUtils.glEnumToString(status));\n  }\n  this.framebuffer = fb;\n  gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n  this.texture = tex;\n}\n\nHitTestFrameBuffer.prototype.bind = function() {\n  var gl = this.gl\n  gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n  gl.viewport(0, 0, this.size, this.size);\n};\n\nHitTestFrameBuffer.prototype.unbind = function() {\n  var gl = this.gl\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.viewport(\n      0, 0,\n      gl.drawingBufferWidth || gl.canvas.width,\n      gl.drawingBufferHeight || gl.canvas.height);\n};\n\nmodule.exports.HitTestShader  = HitTestShader\nmodule.exports.HitTestManager = HitTestManager\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/picking.js\n ** module id = 33\n ** module chunks = 1\n **/"],"sourceRoot":""}