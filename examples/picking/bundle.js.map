{"version":3,"sources":["webpack:///picking/bundle.js","webpack:///./examples/picking/index.js"],"names":["webpackJsonp","module","exports","__webpack_require__","getRenderable","Renderable","renderOrder","getUniforms","renderSet","camera","screen","computeMatrix","factory","maxColors","colorAllocation","Allocation","Float","shader","Shader","attributes","position","color","varyings","f_color","vertex_uniforms","m","Model","this","addAttribute","i","item","vertices","add","uniforms","colors","buffer","MyRenderSet","framebuffers","RenderSet","call","MyFramebuffer","size","opt_depth","depth","tex","texture","twgl","createTexture","gl","target","TEXTURE_2D","width","height","min","LINEAR","mag","format","RGBA","type","UNSIGNED_BYTE","wrapS","CLAMP_TO_EDGE","wrapT","db","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","ff","fb","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","DEPTH_ATTACHMENT","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","WebGLDebugUtils","glEnumToString","push","click","x","y","myRenderSet","render","console","log","Math","floor","m4","DkcpGl","Plate","shaders","util","main","BasicCamera","canvas","document","getElementById","frameRate","element","wasd","delta","theta","PI","square","z","w","red","id","green","blue","white","quads","addRenderable","allocations","inherits","prototype","bind","unbind","face","viewport","drawingBufferWidth","drawingBufferHeight","myFBO","plate","identity","Float32Array","before","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","disable","DEPTH_TEST","enable","BLEND","blendEquationSeparate","FUNC_ADD","blendFuncSeparate","ONE_MINUS_DST_ALPHA","DST_ALPHA","ONE","geom","getGeometry","drawPrep","draw","fragment_uniforms","v_pos","textureData","matrix","beginFrameRendering","addEventListener","e","rect","getBoundingClientRect","clientX","left","frameWidth","clientY","top","frameHeight"],"mappings":"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","file":"picking/bundle.js","sourcesContent":["webpackJsonp([1],[\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar twgl              = __webpack_require__(7)\n\tvar m4                = __webpack_require__(7).m4\n\tvar DkcpGl            = __webpack_require__(1)\n\t\n\tvar Renderable        = DkcpGl.Renderable\n\tvar Model             = DkcpGl.Model\n\tvar Plate             = DkcpGl.Plate\n\tvar shaders           = DkcpGl.shaders\n\tvar Shader            = DkcpGl.Shader\n\tvar Allocation        = DkcpGl.Allocation\n\t\n\tvar util        = __webpack_require__(3)\n\tvar RenderSet   = DkcpGl.RenderSet\n\tvar BasicCamera = DkcpGl.camera.BasicCamera\n\t\n\tvar main = new DkcpGl({\n\t  canvas : document.getElementById('canvas'),\n\t  frameRate : {\n\t    element : document.getElementById('framerate')\n\t  },\n\t  wasd : {\n\t    document : document,\n\t    delta : .05,\n\t    theta : -Math.PI / 120\n\t  }\n\t})\n\tvar camera = main.camera;\n\tvar screen = main.screen;\n\tvar gl     = main.screen.gl;\n\t\n\tfunction getRenderable() {\n\t  return new Renderable({\n\t    renderOrder : 10,\n\t    getUniforms : function (renderSet) {\n\t      return {\n\t        camera : renderSet == screen ? camera.computeMatrix() : renderSet.camera.computeMatrix()\n\t      }\n\t    },\n\t    factory : function () {\n\t      \n\t      var maxColors = 100\n\t      var colorAllocation = new Allocation.Float(maxColors, 4)\n\t\n\t      var shader = new Shader(function () {\n\t        return '  gl_Position = camera * position; \\n' + \n\t               '  f_color = colors[int(color)]; \\n'\n\t      }, function () {\n\t        return '  gl_FragColor = f_color ;\\n'\n\t      })\n\t      shader.attributes.position   = 'vec4';\n\t      shader.attributes.color      = 'float';\n\t      shader.varyings.f_color      = 'vec4';\n\t      shader.vertex_uniforms.camera = 'mat4';\n\t      shader.vertex_uniforms['colors[' + maxColors + ']'] = 'vec4';\n\t\n\t      var m = new Model(this, shader, 100)\n\t      m.addAttribute('position', 4, 'Float32Array', function (i, item) {\n\t        return item.vertices[i]\n\t      });\n\t      \n\t      m.addAttribute('color', 1, 'Float32Array', function (i, item) {\n\t        return [\n\t          colorAllocation.add(item.color, item, function () {\n\t            return item.color.color\n\t          })\n\t        ]\n\t      });\n\t  \n\t      m.uniforms.colors = colorAllocation.buffer;\n\t  \n\t      return m\n\t    }\n\t  })\n\t}\n\t\n\tvar square = function (x, y, z, w) {\n\t  return [\n\t    [x - w,  y - w, z, 1],\n\t    [x - w,  y + w, z, 1],\n\t    [x + w,  y - w, z, 1],\n\t    [x + w,  y + w, z, 1]\n\t  ]\n\t}\n\t\n\tvar red   = {id: 'red',   color: [1, 0, 0, 1]}\n\tvar green = {id: 'green', color: [0, 1, 0, 1]}\n\tvar blue  = {id: 'blue',  color: [0, 0, 1, 1]}\n\tvar white = {id: 'white', color: [1, 1, 1, 1]}\n\t\n\t  \n\tvar quads  = getRenderable()\n\tscreen.addRenderable(quads)\n\tquads.add({\n\t  color : red,\n\t  allocations : {},\n\t  vertices : square(.25, 0, .7, .05)\n\t})\n\tquads.add({\n\t  color : green,\n\t  allocations : {},\n\t  vertices : square(0, .25, .7, .05)\n\t})\n\tquads.add({\n\t  color : blue,\n\t  allocations : {},\n\t  vertices : square(0, 0, .9, .05)\n\t})\n\tquads.add({\n\t  color : white,\n\t  allocations : {},\n\t  vertices : square(0, 0, .7, .01)\n\t})\n\t\n\tfunction MyRenderSet(framebuffers) {\n\t\n\t  this.framebuffers = framebuffers;\n\t  \n\t  RenderSet.call(this)\n\t}\n\tutil.inherits(MyRenderSet, RenderSet)\n\t\n\tMyRenderSet.prototype.render = function (gl) {\n\t  for (var ff = 0; ff < 1; ++ff) {\n\t    this.framebuffers.bind(ff);\n\t    this.camera = main.camera\n\t    RenderSet.prototype.render.call(this, gl);\n\t  }\n\t  this.framebuffers.unbind();\n\t}\n\t\n\t\n\tfunction MyFramebuffer(size, opt_depth) {\n\t  this.size = size;\n\t  this.depth = opt_depth;\n\t  var tex = {\n\t    texture : twgl.createTexture(gl, {\n\t      target : gl.TEXTURE_2D,\n\t      width  : this.size,\n\t      height : this.size,\n\t      min    : gl.LINEAR,\n\t      mag    : gl.LINEAR,\n\t      format : gl.RGBA,\n\t      type   : gl.UNSIGNED_BYTE,\n\t      wrapS  : gl.CLAMP_TO_EDGE,\n\t      wrapT  : gl.CLAMP_TO_EDGE\n\t    })\n\t  }\n\t  if (this.depth) {\n\t    var db = gl.createRenderbuffer();\n\t    gl.bindRenderbuffer(gl.RENDERBUFFER, db);\n\t    gl.renderbufferStorage(\n\t        gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.size, this.size);\n\t  }\n\t  this.framebuffers = [];\n\t  for (var ff = 0; ff < 1; ++ff) {\n\t    var fb = gl.createFramebuffer();\n\t    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n\t    gl.framebufferTexture2D(\n\t        gl.FRAMEBUFFER,\n\t        gl.COLOR_ATTACHMENT0,\n\t        gl.TEXTURE_2D,\n\t        tex.texture,\n\t        0);\n\t    if (this.depth) {\n\t      gl.framebufferRenderbuffer(\n\t          gl.FRAMEBUFFER,\n\t          gl.DEPTH_ATTACHMENT,\n\t          gl.RENDERBUFFER,\n\t          db);\n\t    }\n\t    var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\t    if (status != gl.FRAMEBUFFER_COMPLETE) {\n\t      throw(\"gl.checkFramebufferStatus() returned \" + WebGLDebugUtils.glEnumToString(status));\n\t    }\n\t    this.framebuffers.push(fb);\n\t  }\n\t  gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t  this.texture = tex;\n\t}\n\t\n\tMyFramebuffer.prototype.bind = function(face) {\n\t  gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffers[face]);\n\t  gl.viewport(0, 0, this.size, this.size);\n\t};\n\t\n\tMyFramebuffer.prototype.unbind = function() {\n\t  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t  gl.viewport(\n\t      0, 0,\n\t      gl.drawingBufferWidth || gl.canvas.width,\n\t      gl.drawingBufferHeight || gl.canvas.height);\n\t};\n\t\n\t\n\tvar myFBO = new MyFramebuffer(1024, true);\n\tmyFBO.unbind()\n\t\n\tvar myRenderSet;\n\t\n\t;(function () {\n\t\n\t  \n\t myRenderSet = new MyRenderSet(myFBO)\n\t\n\t  var shader = new Shader(function () {\n\t    return (\n\t      '  gl_Position = position; \\n'\n\t    )\n\t  }, function () {\n\t    return (\n\t      '  gl_FragColor = vec4(0.5,0.5,0.5,1.0); \\n'\n\t    )\n\t    \n\t  })\n\t  shader.attributes.position    = 'vec4';\n\t\n\t  var plate = new Plate(shader);\n\t  plate.add({z: -.5})\n\t  \n\t  var uniforms = {};\n\t  var mat1 = m4.identity(new Float32Array(16));\n\t  var mat2 = m4.identity(new Float32Array(16));\n\t  var mat3 = m4.identity(new Float32Array(16));\n\t  \n\t  \n\t  myRenderSet.addRenderable({\n\t    before : function () {\n\t      gl.clearColor(0,0,0,0);\n\t      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t    },\n\t    renderOrder : 0\n\t  })\n\t\n\t  myRenderSet.addRenderable({\n\t    renderOrder: 11,\n\t    render : function (gl) {\n\t      gl.disable(gl.DEPTH_TEST);\n\t      \n\t      gl.enable(gl.BLEND);\n\t      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n\t\n\t      var geom = plate.getGeometry(gl);\n\t      plate.drawPrep(geom, uniforms);\n\t      geom.draw();\n\t\n\t      gl.disable(gl.BLEND);\n\t      gl.enable(gl.DEPTH_TEST);\n\t    }\n\t  })\n\t  \n\t  myRenderSet.addRenderable(quads)\n\t\n\t  screen.addRenderable({\n\t    before : function () {\n\t      gl.clearColor(0,0,0,0);\n\t      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t    },\n\t    renderOrder : 0\n\t  })\n\t  \n\t}())\n\t  \n\t;(function () {\n\t  \n\t  var shader = new Shader(function () {\n\t    return (\n\t      '  v_pos       = position; \\n' +\n\t      '  gl_Position = camera * vec4(position.x / 4.0, position.y / 4.0, 1.5, 1.0); \\n'\n\t    ) \n\t  }, function () {\n\t    return (\n\t      '  gl_FragColor = texture2D(                            \\n'+\n\t      '      texture,                                         \\n'+\n\t      '      vec2(v_pos.x / 2.0 + 0.5, v_pos.y / 2.0 + 0.5)); \\n'\n\t    )\n\t  })\n\t  shader.attributes.position              = 'vec4';\n\t  shader.fragment_uniforms.texture        = 'sampler2D';\n\t  shader.vertex_uniforms.camera           = 'mat4';\n\t  shader.varyings.v_pos                   = 'vec4';\n\t  \n\t  var plate = new Plate(shader);\n\t  plate.textureData = {texture : myFBO.texture}\n\t  plate.add({z: 1})\n\t  \n\t  var uniforms = {};\n\t\n\t  var inverse = m4.identity(new Float32Array(16));\n\t  \n\t  \n\t  screen.addRenderable({\n\t    renderOrder : 30,\n\t    render : function (gl) {\n\t      gl.disable(gl.DEPTH_TEST);\n\t      gl.enable(gl.BLEND);\n\t      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n\t      camera.computeMatrix()\n\t      // m4.inverse(camera.skymatrix, inverse);\n\t      uniforms.camera = camera.matrix;\n\t      uniforms.texture = plate.textureData.texture.texture;\n\t      var geom = plate.getGeometry(gl);\n\t      plate.drawPrep(geom, uniforms);\n\t      geom.draw();\n\t      gl.disable(gl.BLEND);\n\t      gl.enable(gl.DEPTH_TEST);\n\t    }\n\t  })\n\t\n\t}());\n\t\n\tscreen.beginFrameRendering(false)\n\t\n\t\n\tfunction click(x, y) {\n\t  myRenderSet.render(gl)\n\t  console.log(Math.floor(x), Math.floor(y))\n\t}\n\t\n\tdocument.getElementById('canvas').addEventListener('click', function (e) {\n\t  var rect = document.getElementById('canvas').getBoundingClientRect()\n\t  click((e.clientX - rect.left) / rect.width * camera.frameWidth, (e.clientY - rect.top) / rect.height * camera.frameHeight)\n\t})\n\n/***/ }\n]);\n\n\n/** WEBPACK FOOTER **\n ** picking/bundle.js\n **/","var twgl              = require('../../lib/twgl')\nvar m4                = require('../../lib/twgl').m4\nvar DkcpGl            = require('../../src/dkcp-gl')\n\nvar Renderable        = DkcpGl.Renderable\nvar Model             = DkcpGl.Model\nvar Plate             = DkcpGl.Plate\nvar shaders           = DkcpGl.shaders\nvar Shader            = DkcpGl.Shader\nvar Allocation        = DkcpGl.Allocation\n\nvar util        = require('util')\nvar RenderSet   = DkcpGl.RenderSet\nvar BasicCamera = DkcpGl.camera.BasicCamera\n\nvar main = new DkcpGl({\n  canvas : document.getElementById('canvas'),\n  frameRate : {\n    element : document.getElementById('framerate')\n  },\n  wasd : {\n    document : document,\n    delta : .05,\n    theta : -Math.PI / 120\n  }\n})\nvar camera = main.camera;\nvar screen = main.screen;\nvar gl     = main.screen.gl;\n\nfunction getRenderable() {\n  return new Renderable({\n    renderOrder : 10,\n    getUniforms : function (renderSet) {\n      return {\n        camera : renderSet == screen ? camera.computeMatrix() : renderSet.camera.computeMatrix()\n      }\n    },\n    factory : function () {\n      \n      var maxColors = 100\n      var colorAllocation = new Allocation.Float(maxColors, 4)\n\n      var shader = new Shader(function () {\n        return '  gl_Position = camera * position; \\n' + \n               '  f_color = colors[int(color)]; \\n'\n      }, function () {\n        return '  gl_FragColor = f_color ;\\n'\n      })\n      shader.attributes.position   = 'vec4';\n      shader.attributes.color      = 'float';\n      shader.varyings.f_color      = 'vec4';\n      shader.vertex_uniforms.camera = 'mat4';\n      shader.vertex_uniforms['colors[' + maxColors + ']'] = 'vec4';\n\n      var m = new Model(this, shader, 100)\n      m.addAttribute('position', 4, 'Float32Array', function (i, item) {\n        return item.vertices[i]\n      });\n      \n      m.addAttribute('color', 1, 'Float32Array', function (i, item) {\n        return [\n          colorAllocation.add(item.color, item, function () {\n            return item.color.color\n          })\n        ]\n      });\n  \n      m.uniforms.colors = colorAllocation.buffer;\n  \n      return m\n    }\n  })\n}\n\nvar square = function (x, y, z, w) {\n  return [\n    [x - w,  y - w, z, 1],\n    [x - w,  y + w, z, 1],\n    [x + w,  y - w, z, 1],\n    [x + w,  y + w, z, 1]\n  ]\n}\n\nvar red   = {id: 'red',   color: [1, 0, 0, 1]}\nvar green = {id: 'green', color: [0, 1, 0, 1]}\nvar blue  = {id: 'blue',  color: [0, 0, 1, 1]}\nvar white = {id: 'white', color: [1, 1, 1, 1]}\n\n  \nvar quads  = getRenderable()\nscreen.addRenderable(quads)\nquads.add({\n  color : red,\n  allocations : {},\n  vertices : square(.25, 0, .7, .05)\n})\nquads.add({\n  color : green,\n  allocations : {},\n  vertices : square(0, .25, .7, .05)\n})\nquads.add({\n  color : blue,\n  allocations : {},\n  vertices : square(0, 0, .9, .05)\n})\nquads.add({\n  color : white,\n  allocations : {},\n  vertices : square(0, 0, .7, .01)\n})\n\nfunction MyRenderSet(framebuffers) {\n\n  this.framebuffers = framebuffers;\n  \n  RenderSet.call(this)\n}\nutil.inherits(MyRenderSet, RenderSet)\n\nMyRenderSet.prototype.render = function (gl) {\n  for (var ff = 0; ff < 1; ++ff) {\n    this.framebuffers.bind(ff);\n    this.camera = main.camera\n    RenderSet.prototype.render.call(this, gl);\n  }\n  this.framebuffers.unbind();\n}\n\n\nfunction MyFramebuffer(size, opt_depth) {\n  this.size = size;\n  this.depth = opt_depth;\n  var tex = {\n    texture : twgl.createTexture(gl, {\n      target : gl.TEXTURE_2D,\n      width  : this.size,\n      height : this.size,\n      min    : gl.LINEAR,\n      mag    : gl.LINEAR,\n      format : gl.RGBA,\n      type   : gl.UNSIGNED_BYTE,\n      wrapS  : gl.CLAMP_TO_EDGE,\n      wrapT  : gl.CLAMP_TO_EDGE\n    })\n  }\n  if (this.depth) {\n    var db = gl.createRenderbuffer();\n    gl.bindRenderbuffer(gl.RENDERBUFFER, db);\n    gl.renderbufferStorage(\n        gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.size, this.size);\n  }\n  this.framebuffers = [];\n  for (var ff = 0; ff < 1; ++ff) {\n    var fb = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        tex.texture,\n        0);\n    if (this.depth) {\n      gl.framebufferRenderbuffer(\n          gl.FRAMEBUFFER,\n          gl.DEPTH_ATTACHMENT,\n          gl.RENDERBUFFER,\n          db);\n    }\n    var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (status != gl.FRAMEBUFFER_COMPLETE) {\n      throw(\"gl.checkFramebufferStatus() returned \" + WebGLDebugUtils.glEnumToString(status));\n    }\n    this.framebuffers.push(fb);\n  }\n  gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n  this.texture = tex;\n}\n\nMyFramebuffer.prototype.bind = function(face) {\n  gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffers[face]);\n  gl.viewport(0, 0, this.size, this.size);\n};\n\nMyFramebuffer.prototype.unbind = function() {\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.viewport(\n      0, 0,\n      gl.drawingBufferWidth || gl.canvas.width,\n      gl.drawingBufferHeight || gl.canvas.height);\n};\n\n\nvar myFBO = new MyFramebuffer(1024, true);\nmyFBO.unbind()\n\nvar myRenderSet;\n\n;(function () {\n\n  \n myRenderSet = new MyRenderSet(myFBO)\n\n  var shader = new Shader(function () {\n    return (\n      '  gl_Position = position; \\n'\n    )\n  }, function () {\n    return (\n      '  gl_FragColor = vec4(0.5,0.5,0.5,1.0); \\n'\n    )\n    \n  })\n  shader.attributes.position    = 'vec4';\n\n  var plate = new Plate(shader);\n  plate.add({z: -.5})\n  \n  var uniforms = {};\n  var mat1 = m4.identity(new Float32Array(16));\n  var mat2 = m4.identity(new Float32Array(16));\n  var mat3 = m4.identity(new Float32Array(16));\n  \n  \n  myRenderSet.addRenderable({\n    before : function () {\n      gl.clearColor(0,0,0,0);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n    },\n    renderOrder : 0\n  })\n\n  myRenderSet.addRenderable({\n    renderOrder: 11,\n    render : function (gl) {\n      gl.disable(gl.DEPTH_TEST);\n      \n      gl.enable(gl.BLEND);\n      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n\n      var geom = plate.getGeometry(gl);\n      plate.drawPrep(geom, uniforms);\n      geom.draw();\n\n      gl.disable(gl.BLEND);\n      gl.enable(gl.DEPTH_TEST);\n    }\n  })\n  \n  myRenderSet.addRenderable(quads)\n\n  screen.addRenderable({\n    before : function () {\n      gl.clearColor(0,0,0,0);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n    },\n    renderOrder : 0\n  })\n  \n}())\n  \n;(function () {\n  \n  var shader = new Shader(function () {\n    return (\n      '  v_pos       = position; \\n' +\n      '  gl_Position = camera * vec4(position.x / 4.0, position.y / 4.0, 1.5, 1.0); \\n'\n    ) \n  }, function () {\n    return (\n      '  gl_FragColor = texture2D(                            \\n'+\n      '      texture,                                         \\n'+\n      '      vec2(v_pos.x / 2.0 + 0.5, v_pos.y / 2.0 + 0.5)); \\n'\n    )\n  })\n  shader.attributes.position              = 'vec4';\n  shader.fragment_uniforms.texture        = 'sampler2D';\n  shader.vertex_uniforms.camera           = 'mat4';\n  shader.varyings.v_pos                   = 'vec4';\n  \n  var plate = new Plate(shader);\n  plate.textureData = {texture : myFBO.texture}\n  plate.add({z: 1})\n  \n  var uniforms = {};\n\n  var inverse = m4.identity(new Float32Array(16));\n  \n  \n  screen.addRenderable({\n    renderOrder : 30,\n    render : function (gl) {\n      gl.disable(gl.DEPTH_TEST);\n      gl.enable(gl.BLEND);\n      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n      camera.computeMatrix()\n      // m4.inverse(camera.skymatrix, inverse);\n      uniforms.camera = camera.matrix;\n      uniforms.texture = plate.textureData.texture.texture;\n      var geom = plate.getGeometry(gl);\n      plate.drawPrep(geom, uniforms);\n      geom.draw();\n      gl.disable(gl.BLEND);\n      gl.enable(gl.DEPTH_TEST);\n    }\n  })\n\n}());\n\nscreen.beginFrameRendering(false)\n\n\nfunction click(x, y) {\n  myRenderSet.render(gl)\n  console.log(Math.floor(x), Math.floor(y))\n}\n\ndocument.getElementById('canvas').addEventListener('click', function (e) {\n  var rect = document.getElementById('canvas').getBoundingClientRect()\n  click((e.clientX - rect.left) / rect.width * camera.frameWidth, (e.clientY - rect.top) / rect.height * camera.frameHeight)\n})\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./examples/picking/index.js\n ** module id = 0\n ** module chunks = 1\n **/"],"sourceRoot":""}