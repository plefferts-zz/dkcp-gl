{"version":3,"sources":["webpack:///picking/bundle.js","webpack:///./examples/picking/index.js","webpack:///./src/picking.js","webpack:///./~/inherits/inherits_browser.js"],"names":["webpackJsonp","module","exports","__webpack_require__","getRenderable","Renderable","renderOrder","getUniforms","uniforms","renderSet","camera","computeMatrix","factory","maxColors","colorAllocation","Allocation","Float","shader","picking","HitTestShader","hitTestManager","hitColorAllocation","hit_test","hit_test_zoom_matrix","attributes","position","color","varyings","f_color","vertex_uniforms","m","Model","this","mixinModel","addAttribute","i","item","vertices","add","colors","buffer","click","x","y","test","gl","mousemove","mousex","mousey","DkcpGl","m4","Plate","Shader","main","MouseTrack","canvas","document","getElementById","frameRate","element","wasd","delta","theta","Math","PI","screen","HitTestManager","square","z","w","red","id","green","blue","white","addRenderable","before","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","quads","hit_area","allocations","fragment_uniforms","texture","v_pos","framebuffers","plate","textureData","render","disable","DEPTH_TEST","enable","BLEND","blendEquationSeparate","FUNC_ADD","blendFuncSeparate","ONE_MINUS_DST_ALPHA","DST_ALPHA","ONE","geom","getGeometry","drawPrep","draw","beginFrameRendering","on","addEventListener","e","rect","getBoundingClientRect","clientX","left","width","frameWidth","clientY","top","height","frameHeight",33,"HitTestRenderSet","HitTestFrameBuffer","unbind","RenderSet","call","size","opt_depth","depth","tex","twgl","createTexture","target","TEXTURE_2D","min","LINEAR","mag","format","RGBA","type","UNSIGNED_BYTE","wrapS","CLAMP_TO_EDGE","wrapT","db","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","fb","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","DEPTH_ATTACHMENT","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","WebGLDebugUtils","glEnumToString","framebuffer","inherits","HitColorAllocation","max","prototype","owner","index","b","g","r","hitAreaFor","arr","c","members","attribute_name","uniform_name","join","lastarr","console","log","model","allocation","getVertexBodySource","getFragmentBodySource","wrapVertexSource","wrapFragmentSource","f_hit_color","hit_color","slots","fn","getProgram","hit_test_program","createProgramInfo","getVertexSource","getFragmentSource","bind","zoom","dst","Float32Array","translate","scaling","Uint8Array","readPixels","Array","slice","viewport","drawingBufferWidth","drawingBufferHeight",34,"Object","create","ctor","superCtor","super_","constructor","value","enumerable","writable","configurable","TempCtor"],"mappings":"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","file":"picking/bundle.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar m4                = __webpack_require__(7).m4\n\tvar DkcpGl            = __webpack_require__(1)\n\tvar picking           = __webpack_require__(33)\n\t\n\tvar Renderable        = DkcpGl.Renderable\n\tvar Model             = DkcpGl.Model\n\tvar Plate             = DkcpGl.Plate\n\tvar Shader            = DkcpGl.Shader\n\tvar Allocation        = DkcpGl.Allocation\n\tvar MouseTrack        = DkcpGl.MouseTrack\n\t\n\tvar main = new DkcpGl({\n\t  canvas : document.getElementById('canvas'),\n\t  frameRate : {\n\t    element : document.getElementById('framerate')\n\t  },\n\t  wasd : {\n\t    document : document,\n\t    delta : .05,\n\t    theta : -Math.PI / 120\n\t  }\n\t})\n\tvar camera = main.camera;\n\tvar screen = main.screen;\n\tvar gl     = main.screen.gl;\n\t\n\tvar hitTestManager = new picking.HitTestManager(gl, 100);\n\t\n\tfunction getRenderable() {\n\t  return new Renderable({\n\t    renderOrder : 10,\n\t    getUniforms : function (uniforms, renderSet) {\n\t      uniforms.camera = camera.computeMatrix()\n\t      return uniforms\n\t    },\n\t    factory : function () {\n\t      \n\t      var maxColors = 100\n\t      var colorAllocation    = new Allocation.Float(maxColors, 4)\n\t      \n\t      var shader = new picking.HitTestShader(hitTestManager.hitColorAllocation, function (hit_test) {\n\t        var hit_test_zoom_matrix = hit_test ? 'hit_test_zoom_matrix * ' : '';\n\t\n\t        return '  gl_Position = ' + hit_test_zoom_matrix + 'camera * position; \\n' + \n\t               '  f_color = colors[int(color)];              \\n'\n\t      }, function () {\n\t        return '  gl_FragColor = f_color; \\n'\n\t      })\n\t\n\t      shader.attributes.position     = 'vec4';\n\t      shader.attributes.color        = 'float';\n\t      shader.varyings.f_color        = 'vec4';\n\t      shader.vertex_uniforms.camera  = 'mat4';\n\t      shader.vertex_uniforms['colors[' + maxColors + ']'] = 'vec4';\n\t\n\t      var m = new Model(this, shader, 100)\n\t\n\t      hitTestManager.mixinModel(m)\n\t      \n\t      m.addAttribute('position', 4, 'Float32Array', function (i, item) {\n\t        return item.vertices[i]\n\t      });\n\t      \n\t      m.addAttribute('color', 1, 'Float32Array', function (i, item) {\n\t        return [\n\t          colorAllocation.add(item.color, item, function () {\n\t            return item.color.color\n\t          })\n\t        ]\n\t      });\n\t\n\t      m.uniforms.colors = colorAllocation.buffer;\n\t  \n\t      return m\n\t    }\n\t  })\n\t}\n\t\n\tvar square = function (x, y, z, w) {\n\t  return [\n\t    [x - w,  y - w, z, 1],\n\t    [x - w,  y + w, z, 1],\n\t    [x + w,  y - w, z, 1],\n\t    [x + w,  y + w, z, 1]\n\t  ]\n\t}\n\t\n\tvar red     = {id: 'red',     color: [1, 0, 0, 1]}\n\tvar green   = {id: 'green',   color: [0, 1, 0, 1]}\n\tvar blue    = {id: 'blue',    color: [0, 0, 1, 1]}\n\tvar white   = {id: 'white',   color: [1, 1, 1, 1]}\n\t\n\tscreen.addRenderable({\n\t  before : function () {\n\t    gl.clearColor(0,0,0,0);\n\t    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t  },\n\t  renderOrder : 0\n\t})\n\t\n\tvar quads  = getRenderable()\n\tscreen.addRenderable(quads)\n\thitTestManager.renderSet.addRenderable(quads);\n\t\n\tquads.add({\n\t  color : red,\n\t  hit_area : 'red',\n\t  allocations : {},\n\t  vertices : square(.25, 0, .7, .05)\n\t})\n\tquads.add({\n\t  color : green,\n\t  hit_area : 'green',\n\t  allocations : {},\n\t  vertices : square(0, .25, .7, .05)\n\t})\n\tquads.add({\n\t  color : blue,\n\t  hit_area : 'blue',\n\t  allocations : {},\n\t  vertices : square(0, 0, .9, .05)\n\t})\n\tquads.add({\n\t  color : white,\n\t  hit_area : 'white',\n\t  allocations : {},\n\t  vertices : square(0, 0, .7, .01)\n\t})\n\t\n\t\n\t  \n\t;(function () {\n\t  \n\t  var shader = new Shader(function () {\n\t    return (\n\t      '  v_pos       = position; \\n' +\n\t      '  gl_Position = camera * vec4(position.x / 4.0, position.y / 4.0, 1.5, 1.0); \\n'\n\t    ) \n\t  }, function () {\n\t    return (\n\t      '  gl_FragColor = texture2D(                            \\n'+\n\t      '      texture,                                         \\n'+\n\t      '      vec2(v_pos.x / 2.0 + 0.5, v_pos.y / 2.0 + 0.5)); \\n'\n\t    )\n\t  })\n\t  shader.attributes.position              = 'vec4';\n\t  shader.fragment_uniforms.texture        = 'sampler2D';\n\t  shader.vertex_uniforms.camera           = 'mat4';\n\t  shader.varyings.v_pos                   = 'vec4';\n\t  \n\t  var texture = hitTestManager.renderSet.framebuffers.texture\n\t  var plate = new Plate(shader);\n\t  plate.textureData = {texture : texture}\n\t  plate.add({z: 1})\n\t  \n\t  var uniforms = {};\n\t\n\t  screen.addRenderable({\n\t    renderOrder : 30,\n\t    render : function (gl) {\n\t      gl.disable(gl.DEPTH_TEST);\n\t      gl.enable(gl.BLEND);\n\t      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n\t      uniforms.camera = camera.computeMatrix();\n\t      uniforms.texture = texture.texture;\n\t      var geom = plate.getGeometry(gl);\n\t      plate.drawPrep(geom, uniforms);\n\t      geom.draw();\n\t      gl.disable(gl.BLEND);\n\t      gl.enable(gl.DEPTH_TEST);\n\t    }\n\t  })\n\t\n\t}());\n\t\n\tscreen.beginFrameRendering(false)\n\t\n\tvar mousex, mousey;\n\t\n\tscreen.on('moved', function () {\n\t  hitTestManager.test(gl, camera, mousex, mousey)\n\t})\n\t\n\tfunction click(x, y) {\n\t  hitTestManager.test(gl, camera, x - 1, y - 1)\n\t}\n\tfunction mousemove(x, y) {\n\t  hitTestManager.test(gl, camera, mousex = x - 1, mousey = y - 1)\n\t}\n\t\n\t// var mouseTrack = new MouseTrack()\n\t// mouseTrack.bindMouseEvents(main.screen.canvas)\n\t\n\tdocument.getElementById('canvas').addEventListener('click', function (e) {\n\t  var rect = document.getElementById('canvas').getBoundingClientRect()\n\t  click((e.clientX - rect.left) / rect.width * camera.frameWidth, (e.clientY - rect.top) / rect.height * camera.frameHeight)\n\t})\n\t\n\tdocument.getElementById('canvas').addEventListener('mousemove', function (e) {\n\t  var rect = document.getElementById('canvas').getBoundingClientRect()\n\t  mousemove((e.clientX - rect.left) / rect.width * camera.frameWidth, (e.clientY - rect.top) / rect.height * camera.frameHeight)\n\t})\n\n/***/ },\n\n/***/ 33:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar inherits   = __webpack_require__(34)\n\tvar DkcpGl     = __webpack_require__(1)\n\tvar Allocation = DkcpGl.Allocation\n\tvar Shader     = DkcpGl.Shader\n\tvar RenderSet  = DkcpGl.RenderSet\n\tvar twgl       = __webpack_require__(7)\n\tvar m4         = twgl.m4\n\t\n\tvar HitColorAllocation = function (max) {\n\t  Allocation.Float.call(this, max, 4)\n\t}\n\tinherits(HitColorAllocation, Allocation.Float)\n\t\n\tHitColorAllocation.prototype.add = function (item, owner) {\n\t  return Allocation.Float.prototype.add.call(this, item, owner, function (index) {\n\t    var b = (index >>>  0) % 0x100;\n\t    var g = (index >>>  8) % 0x100;\n\t    var r = (index >>> 16) % 0x100;\n\t    return [r / 255, g / 255, b / 255, 1]\n\t  })\n\t}\n\t\n\tHitColorAllocation.prototype.hitAreaFor = function (arr) {\n\t  var c = arr[0] * 0x10000 + arr[1] * 0x100 + arr[2];\n\t  return this.members[c]\n\t}\n\t\n\tvar HitTestManager = function (gl, max) {\n\t  this.attribute_name     = 'hit_color';\n\t  this.uniform_name       = 'hit_colors';\n\t  this.hitColorAllocation = new HitColorAllocation(max);\n\t  this.renderSet          = new HitTestRenderSet(gl, this);\n\t}\n\t\n\tHitTestManager.prototype.test = function (gl, camera, mousex, mousey) {\n\t  var arr = this.renderSet.render(gl, camera, mousex, mousey)\n\t  if (arr.join(',') != this.lastarr) {\n\t    console.log(this.hitColorAllocation.hitAreaFor(arr))\n\t  }\n\t  this.lastarr = arr.join(',')\n\t}\n\t\n\tHitTestManager.prototype.mixinModel = function (model) {\n\t  var allocation = this.hitColorAllocation\n\t  model.addAttribute(this.attribute_name, 1, 'Float32Array', function (i, item) {\n\t    return [\n\t      allocation.add({id: item.hit_area}, item)\n\t    ]\n\t  });\n\t  model.uniforms[this.uniform_name] = this.hitColorAllocation.buffer;\n\t}\n\t\n\tvar HitTestShader = function (hitColorAllocation, getVertexBodySource, getFragmentBodySource) {\n\t  Shader.call(this,\n\t      this.wrapVertexSource(getVertexBodySource),\n\t      this.wrapFragmentSource(getFragmentBodySource))\n\t\n\t  this.hitColorAllocation = hitColorAllocation\n\t  this.varyings.f_hit_color  = 'vec4';\n\t  this.attributes.hit_color  = 'float';\n\t  this.vertex_uniforms.hit_test_zoom_matrix = 'mat4';\n\t  this.vertex_uniforms['hit_colors[' + this.hitColorAllocation.slots.max + ']'] = 'vec4';\n\t}\n\tinherits(HitTestShader, Shader)\n\t\n\tHitTestShader.prototype.wrapVertexSource = function (fn) {\n\t  return function () {\n\t    return fn(this.hit_test) + '\\n  f_hit_color = hit_colors[int(hit_color)];'\n\t  }\n\t};\n\t\n\tHitTestShader.prototype.wrapFragmentSource = function (fn) {\n\t  return function () {\n\t    if (this.hit_test) {\n\t      return ' gl_FragColor = f_hit_color;  \\n'\n\t    }\n\t    return fn();\n\t  }\n\t};\n\t\n\tHitTestShader.prototype.getProgram = function (gl, uniforms) {\n\t  if (uniforms.hit_test_zoom_matrix) {\n\t    if (this.hit_test_program)\n\t      return this.hit_test_program\n\t    \n\t    this.hit_test = true\n\t    return this.hit_test_program = twgl.createProgramInfo(\n\t      gl,\n\t      [this.getVertexSource(), this.getFragmentSource()]\n\t    )\n\t  }\n\t  \n\t  this.hit_test = false\n\t  return Shader.prototype.getProgram.call(this, gl, uniforms)\n\t};\n\t\n\t\n\tfunction HitTestRenderSet(gl, hitTestManager) {\n\t  this.hitTestManager = hitTestManager;\n\t  this.framebuffers = new HitTestFrameBuffer(gl, 2, true);\n\t  this.framebuffers.unbind()\n\t  \n\t  RenderSet.call(this)\n\t\n\t  this.addRenderable({\n\t    before : function () {\n\t      gl.clearColor(1, 1, 1, 1);\n\t      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t    },\n\t    renderOrder : 0\n\t  })\n\t  \n\t}\n\tinherits(HitTestRenderSet, RenderSet)\n\t\n\tHitTestRenderSet.prototype.getUniforms = function () {\n\t  return {\n\t    hit_test_zoom_matrix : this.hit_test_zoom_matrix\n\t  }\n\t}\n\tHitTestRenderSet.prototype.render = function (gl, camera, x, y) {\n\t  this.framebuffers.bind();\n\t  var zoom = Math.max(camera.frameWidth, camera.frameHeight);\n\t  var dst = new Float32Array(16)\n\t  m4.translate(m4.scaling([zoom, zoom, 1]), [\n\t    2 * (.5 - x / camera.frameWidth),\n\t    -2 * (.5 - y / camera.frameHeight),\n\t    0\n\t  ], dst)\n\t\n\t  this.hit_test_zoom_matrix = dst\n\t\n\t  RenderSet.prototype.render.call(this, gl);\n\t  \n\t  var arr = new Uint8Array(4 * 4)\n\t  gl.readPixels(0, 0, 2, 2, gl.RGBA, gl.UNSIGNED_BYTE, arr)\n\t  arr = Array.prototype.slice.call(arr, 0, 3)\n\t  this.framebuffers.unbind();\n\t  return arr\n\t}\n\t\n\t\n\tfunction HitTestFrameBuffer(gl, size, opt_depth) {\n\t  this.gl = gl\n\t  this.size = size;\n\t  this.depth = opt_depth;\n\t  var tex = {\n\t    texture : twgl.createTexture(gl, {\n\t      target : gl.TEXTURE_2D,\n\t      width  : this.size,\n\t      height : this.size,\n\t      min    : gl.LINEAR,\n\t      mag    : gl.LINEAR,\n\t      format : gl.RGBA,\n\t      type   : gl.UNSIGNED_BYTE,\n\t      wrapS  : gl.CLAMP_TO_EDGE,\n\t      wrapT  : gl.CLAMP_TO_EDGE\n\t    })\n\t  }\n\t  if (this.depth) {\n\t    var db = gl.createRenderbuffer();\n\t    gl.bindRenderbuffer(gl.RENDERBUFFER, db);\n\t    gl.renderbufferStorage(\n\t        gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.size, this.size);\n\t  }\n\t\n\t  var fb = gl.createFramebuffer();\n\t  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n\t  gl.framebufferTexture2D(\n\t      gl.FRAMEBUFFER,\n\t      gl.COLOR_ATTACHMENT0,\n\t      gl.TEXTURE_2D,\n\t      tex.texture,\n\t      0);\n\t  if (this.depth) {\n\t    gl.framebufferRenderbuffer(\n\t        gl.FRAMEBUFFER,\n\t        gl.DEPTH_ATTACHMENT,\n\t        gl.RENDERBUFFER,\n\t        db);\n\t  }\n\t  var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\t  if (status != gl.FRAMEBUFFER_COMPLETE) {\n\t    throw(\"gl.checkFramebufferStatus() returned \" + WebGLDebugUtils.glEnumToString(status));\n\t  }\n\t  this.framebuffer = fb;\n\t  gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t  this.texture = tex;\n\t}\n\t\n\tHitTestFrameBuffer.prototype.bind = function() {\n\t  var gl = this.gl\n\t  gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n\t  gl.viewport(0, 0, this.size, this.size);\n\t};\n\t\n\tHitTestFrameBuffer.prototype.unbind = function() {\n\t  var gl = this.gl\n\t  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t  gl.viewport(\n\t      0, 0,\n\t      gl.drawingBufferWidth || gl.canvas.width,\n\t      gl.drawingBufferHeight || gl.canvas.height);\n\t};\n\t\n\tmodule.exports.HitTestShader  = HitTestShader\n\tmodule.exports.HitTestManager = HitTestManager\n\n\n/***/ },\n\n/***/ 34:\n/***/ function(module, exports) {\n\n\tif (typeof Object.create === 'function') {\n\t  // implementation from standard node.js 'util' module\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor\n\t    ctor.prototype = Object.create(superCtor.prototype, {\n\t      constructor: {\n\t        value: ctor,\n\t        enumerable: false,\n\t        writable: true,\n\t        configurable: true\n\t      }\n\t    });\n\t  };\n\t} else {\n\t  // old school shim for old browsers\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor\n\t    var TempCtor = function () {}\n\t    TempCtor.prototype = superCtor.prototype\n\t    ctor.prototype = new TempCtor()\n\t    ctor.prototype.constructor = ctor\n\t  }\n\t}\n\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** picking/bundle.js\n **/","var m4                = require('../../lib/twgl').m4\nvar DkcpGl            = require('../../src/dkcp-gl')\nvar picking           = require('../../src/picking')\n\nvar Renderable        = DkcpGl.Renderable\nvar Model             = DkcpGl.Model\nvar Plate             = DkcpGl.Plate\nvar Shader            = DkcpGl.Shader\nvar Allocation        = DkcpGl.Allocation\nvar MouseTrack        = DkcpGl.MouseTrack\n\nvar main = new DkcpGl({\n  canvas : document.getElementById('canvas'),\n  frameRate : {\n    element : document.getElementById('framerate')\n  },\n  wasd : {\n    document : document,\n    delta : .05,\n    theta : -Math.PI / 120\n  }\n})\nvar camera = main.camera;\nvar screen = main.screen;\nvar gl     = main.screen.gl;\n\nvar hitTestManager = new picking.HitTestManager(gl, 100);\n\nfunction getRenderable() {\n  return new Renderable({\n    renderOrder : 10,\n    getUniforms : function (uniforms, renderSet) {\n      uniforms.camera = camera.computeMatrix()\n      return uniforms\n    },\n    factory : function () {\n      \n      var maxColors = 100\n      var colorAllocation    = new Allocation.Float(maxColors, 4)\n      \n      var shader = new picking.HitTestShader(hitTestManager.hitColorAllocation, function (hit_test) {\n        var hit_test_zoom_matrix = hit_test ? 'hit_test_zoom_matrix * ' : '';\n\n        return '  gl_Position = ' + hit_test_zoom_matrix + 'camera * position; \\n' + \n               '  f_color = colors[int(color)];              \\n'\n      }, function () {\n        return '  gl_FragColor = f_color; \\n'\n      })\n\n      shader.attributes.position     = 'vec4';\n      shader.attributes.color        = 'float';\n      shader.varyings.f_color        = 'vec4';\n      shader.vertex_uniforms.camera  = 'mat4';\n      shader.vertex_uniforms['colors[' + maxColors + ']'] = 'vec4';\n\n      var m = new Model(this, shader, 100)\n\n      hitTestManager.mixinModel(m)\n      \n      m.addAttribute('position', 4, 'Float32Array', function (i, item) {\n        return item.vertices[i]\n      });\n      \n      m.addAttribute('color', 1, 'Float32Array', function (i, item) {\n        return [\n          colorAllocation.add(item.color, item, function () {\n            return item.color.color\n          })\n        ]\n      });\n\n      m.uniforms.colors = colorAllocation.buffer;\n  \n      return m\n    }\n  })\n}\n\nvar square = function (x, y, z, w) {\n  return [\n    [x - w,  y - w, z, 1],\n    [x - w,  y + w, z, 1],\n    [x + w,  y - w, z, 1],\n    [x + w,  y + w, z, 1]\n  ]\n}\n\nvar red     = {id: 'red',     color: [1, 0, 0, 1]}\nvar green   = {id: 'green',   color: [0, 1, 0, 1]}\nvar blue    = {id: 'blue',    color: [0, 0, 1, 1]}\nvar white   = {id: 'white',   color: [1, 1, 1, 1]}\n\nscreen.addRenderable({\n  before : function () {\n    gl.clearColor(0,0,0,0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n  },\n  renderOrder : 0\n})\n\nvar quads  = getRenderable()\nscreen.addRenderable(quads)\nhitTestManager.renderSet.addRenderable(quads);\n\nquads.add({\n  color : red,\n  hit_area : 'red',\n  allocations : {},\n  vertices : square(.25, 0, .7, .05)\n})\nquads.add({\n  color : green,\n  hit_area : 'green',\n  allocations : {},\n  vertices : square(0, .25, .7, .05)\n})\nquads.add({\n  color : blue,\n  hit_area : 'blue',\n  allocations : {},\n  vertices : square(0, 0, .9, .05)\n})\nquads.add({\n  color : white,\n  hit_area : 'white',\n  allocations : {},\n  vertices : square(0, 0, .7, .01)\n})\n\n\n  \n;(function () {\n  \n  var shader = new Shader(function () {\n    return (\n      '  v_pos       = position; \\n' +\n      '  gl_Position = camera * vec4(position.x / 4.0, position.y / 4.0, 1.5, 1.0); \\n'\n    ) \n  }, function () {\n    return (\n      '  gl_FragColor = texture2D(                            \\n'+\n      '      texture,                                         \\n'+\n      '      vec2(v_pos.x / 2.0 + 0.5, v_pos.y / 2.0 + 0.5)); \\n'\n    )\n  })\n  shader.attributes.position              = 'vec4';\n  shader.fragment_uniforms.texture        = 'sampler2D';\n  shader.vertex_uniforms.camera           = 'mat4';\n  shader.varyings.v_pos                   = 'vec4';\n  \n  var texture = hitTestManager.renderSet.framebuffers.texture\n  var plate = new Plate(shader);\n  plate.textureData = {texture : texture}\n  plate.add({z: 1})\n  \n  var uniforms = {};\n\n  screen.addRenderable({\n    renderOrder : 30,\n    render : function (gl) {\n      gl.disable(gl.DEPTH_TEST);\n      gl.enable(gl.BLEND);\n      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n      uniforms.camera = camera.computeMatrix();\n      uniforms.texture = texture.texture;\n      var geom = plate.getGeometry(gl);\n      plate.drawPrep(geom, uniforms);\n      geom.draw();\n      gl.disable(gl.BLEND);\n      gl.enable(gl.DEPTH_TEST);\n    }\n  })\n\n}());\n\nscreen.beginFrameRendering(false)\n\nvar mousex, mousey;\n\nscreen.on('moved', function () {\n  hitTestManager.test(gl, camera, mousex, mousey)\n})\n\nfunction click(x, y) {\n  hitTestManager.test(gl, camera, x - 1, y - 1)\n}\nfunction mousemove(x, y) {\n  hitTestManager.test(gl, camera, mousex = x - 1, mousey = y - 1)\n}\n\n// var mouseTrack = new MouseTrack()\n// mouseTrack.bindMouseEvents(main.screen.canvas)\n\ndocument.getElementById('canvas').addEventListener('click', function (e) {\n  var rect = document.getElementById('canvas').getBoundingClientRect()\n  click((e.clientX - rect.left) / rect.width * camera.frameWidth, (e.clientY - rect.top) / rect.height * camera.frameHeight)\n})\n\ndocument.getElementById('canvas').addEventListener('mousemove', function (e) {\n  var rect = document.getElementById('canvas').getBoundingClientRect()\n  mousemove((e.clientX - rect.left) / rect.width * camera.frameWidth, (e.clientY - rect.top) / rect.height * camera.frameHeight)\n})\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./examples/picking/index.js\n ** module id = 0\n ** module chunks = 1\n **/","var inherits   = require('inherits')\nvar DkcpGl     = require('./dkcp-gl')\nvar Allocation = DkcpGl.Allocation\nvar Shader     = DkcpGl.Shader\nvar RenderSet  = DkcpGl.RenderSet\nvar twgl       = require('../lib/twgl')\nvar m4         = twgl.m4\n\nvar HitColorAllocation = function (max) {\n  Allocation.Float.call(this, max, 4)\n}\ninherits(HitColorAllocation, Allocation.Float)\n\nHitColorAllocation.prototype.add = function (item, owner) {\n  return Allocation.Float.prototype.add.call(this, item, owner, function (index) {\n    var b = (index >>>  0) % 0x100;\n    var g = (index >>>  8) % 0x100;\n    var r = (index >>> 16) % 0x100;\n    return [r / 255, g / 255, b / 255, 1]\n  })\n}\n\nHitColorAllocation.prototype.hitAreaFor = function (arr) {\n  var c = arr[0] * 0x10000 + arr[1] * 0x100 + arr[2];\n  return this.members[c]\n}\n\nvar HitTestManager = function (gl, max) {\n  this.attribute_name     = 'hit_color';\n  this.uniform_name       = 'hit_colors';\n  this.hitColorAllocation = new HitColorAllocation(max);\n  this.renderSet          = new HitTestRenderSet(gl, this);\n}\n\nHitTestManager.prototype.test = function (gl, camera, mousex, mousey) {\n  var arr = this.renderSet.render(gl, camera, mousex, mousey)\n  if (arr.join(',') != this.lastarr) {\n    console.log(this.hitColorAllocation.hitAreaFor(arr))\n  }\n  this.lastarr = arr.join(',')\n}\n\nHitTestManager.prototype.mixinModel = function (model) {\n  var allocation = this.hitColorAllocation\n  model.addAttribute(this.attribute_name, 1, 'Float32Array', function (i, item) {\n    return [\n      allocation.add({id: item.hit_area}, item)\n    ]\n  });\n  model.uniforms[this.uniform_name] = this.hitColorAllocation.buffer;\n}\n\nvar HitTestShader = function (hitColorAllocation, getVertexBodySource, getFragmentBodySource) {\n  Shader.call(this,\n      this.wrapVertexSource(getVertexBodySource),\n      this.wrapFragmentSource(getFragmentBodySource))\n\n  this.hitColorAllocation = hitColorAllocation\n  this.varyings.f_hit_color  = 'vec4';\n  this.attributes.hit_color  = 'float';\n  this.vertex_uniforms.hit_test_zoom_matrix = 'mat4';\n  this.vertex_uniforms['hit_colors[' + this.hitColorAllocation.slots.max + ']'] = 'vec4';\n}\ninherits(HitTestShader, Shader)\n\nHitTestShader.prototype.wrapVertexSource = function (fn) {\n  return function () {\n    return fn(this.hit_test) + '\\n  f_hit_color = hit_colors[int(hit_color)];'\n  }\n};\n\nHitTestShader.prototype.wrapFragmentSource = function (fn) {\n  return function () {\n    if (this.hit_test) {\n      return ' gl_FragColor = f_hit_color;  \\n'\n    }\n    return fn();\n  }\n};\n\nHitTestShader.prototype.getProgram = function (gl, uniforms) {\n  if (uniforms.hit_test_zoom_matrix) {\n    if (this.hit_test_program)\n      return this.hit_test_program\n    \n    this.hit_test = true\n    return this.hit_test_program = twgl.createProgramInfo(\n      gl,\n      [this.getVertexSource(), this.getFragmentSource()]\n    )\n  }\n  \n  this.hit_test = false\n  return Shader.prototype.getProgram.call(this, gl, uniforms)\n};\n\n\nfunction HitTestRenderSet(gl, hitTestManager) {\n  this.hitTestManager = hitTestManager;\n  this.framebuffers = new HitTestFrameBuffer(gl, 2, true);\n  this.framebuffers.unbind()\n  \n  RenderSet.call(this)\n\n  this.addRenderable({\n    before : function () {\n      gl.clearColor(1, 1, 1, 1);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n    },\n    renderOrder : 0\n  })\n  \n}\ninherits(HitTestRenderSet, RenderSet)\n\nHitTestRenderSet.prototype.getUniforms = function () {\n  return {\n    hit_test_zoom_matrix : this.hit_test_zoom_matrix\n  }\n}\nHitTestRenderSet.prototype.render = function (gl, camera, x, y) {\n  this.framebuffers.bind();\n  var zoom = Math.max(camera.frameWidth, camera.frameHeight);\n  var dst = new Float32Array(16)\n  m4.translate(m4.scaling([zoom, zoom, 1]), [\n    2 * (.5 - x / camera.frameWidth),\n    -2 * (.5 - y / camera.frameHeight),\n    0\n  ], dst)\n\n  this.hit_test_zoom_matrix = dst\n\n  RenderSet.prototype.render.call(this, gl);\n  \n  var arr = new Uint8Array(4 * 4)\n  gl.readPixels(0, 0, 2, 2, gl.RGBA, gl.UNSIGNED_BYTE, arr)\n  arr = Array.prototype.slice.call(arr, 0, 3)\n  this.framebuffers.unbind();\n  return arr\n}\n\n\nfunction HitTestFrameBuffer(gl, size, opt_depth) {\n  this.gl = gl\n  this.size = size;\n  this.depth = opt_depth;\n  var tex = {\n    texture : twgl.createTexture(gl, {\n      target : gl.TEXTURE_2D,\n      width  : this.size,\n      height : this.size,\n      min    : gl.LINEAR,\n      mag    : gl.LINEAR,\n      format : gl.RGBA,\n      type   : gl.UNSIGNED_BYTE,\n      wrapS  : gl.CLAMP_TO_EDGE,\n      wrapT  : gl.CLAMP_TO_EDGE\n    })\n  }\n  if (this.depth) {\n    var db = gl.createRenderbuffer();\n    gl.bindRenderbuffer(gl.RENDERBUFFER, db);\n    gl.renderbufferStorage(\n        gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.size, this.size);\n  }\n\n  var fb = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      tex.texture,\n      0);\n  if (this.depth) {\n    gl.framebufferRenderbuffer(\n        gl.FRAMEBUFFER,\n        gl.DEPTH_ATTACHMENT,\n        gl.RENDERBUFFER,\n        db);\n  }\n  var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  if (status != gl.FRAMEBUFFER_COMPLETE) {\n    throw(\"gl.checkFramebufferStatus() returned \" + WebGLDebugUtils.glEnumToString(status));\n  }\n  this.framebuffer = fb;\n  gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n  this.texture = tex;\n}\n\nHitTestFrameBuffer.prototype.bind = function() {\n  var gl = this.gl\n  gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n  gl.viewport(0, 0, this.size, this.size);\n};\n\nHitTestFrameBuffer.prototype.unbind = function() {\n  var gl = this.gl\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.viewport(\n      0, 0,\n      gl.drawingBufferWidth || gl.canvas.width,\n      gl.drawingBufferHeight || gl.canvas.height);\n};\n\nmodule.exports.HitTestShader  = HitTestShader\nmodule.exports.HitTestManager = HitTestManager\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/picking.js\n ** module id = 33\n ** module chunks = 1\n **/","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/inherits/inherits_browser.js\n ** module id = 34\n ** module chunks = 1\n **/"],"sourceRoot":""}