{"version":3,"sources":["webpack:///picking/bundle.js","webpack:///./examples/picking/index.js","webpack:///./~/inherits/inherits_browser.js","webpack:///./src/picking.js"],"names":["webpackJsonp","module","exports","__webpack_require__","getRenderable","identity","m4","Float32Array","Renderable","renderOrder","getUniforms","renderSet","screen","camera","computeMatrix","camera2","hit_test","factory","maxColors","colorAllocation","Allocation","Float","shader","picking","HitTestShader","hitTestManager","hitColorAllocation","attributes","position","color","varyings","f_color","vertex_uniforms","m","Model","this","mixinModel","addAttribute","i","item","vertices","add","uniforms","colors","buffer","click","x","y","hitTestRenderSet","render","gl","mousemove","mousex","mousey","DkcpGl","Plate","Shader","shaders","main","RenderSet","BasicCamera","canvas","document","getElementById","frameRate","element","wasd","delta","theta","Math","PI","HitTestManager","square","z","w","red","id","green","blue","white","quads","addRenderable","hit_area","allocations","plate","before","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","lastarr","arr","Uint8Array","readPixels","RGBA","UNSIGNED_BYTE","Array","prototype","slice","call","join","console","log","hitAreaFor","disable","DEPTH_TEST","enable","BLEND","blendEquationSeparate","FUNC_ADD","blendFuncSeparate","ONE_MINUS_DST_ALPHA","DST_ALPHA","ONE","geom","getGeometry","drawPrep","draw","fragment_uniforms","texture","v_pos","textureData","framebuffers","matrix","beginFrameRendering","on","addEventListener","e","rect","getBoundingClientRect","clientX","left","width","frameWidth","clientY","top","height","frameHeight",32,"Object","create","ctor","superCtor","super_","constructor","value","enumerable","writable","configurable","TempCtor",33,"HitTestRenderSet","HitTestFrameBuffer","unbind","size","opt_depth","depth","tex","twgl","createTexture","target","TEXTURE_2D","min","LINEAR","mag","format","type","wrapS","CLAMP_TO_EDGE","wrapT","db","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","fb","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","DEPTH_ATTACHMENT","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","WebGLDebugUtils","glEnumToString","framebuffer","inherits","HitColorAllocation","max","owner","index","b","g","r","c","members","attribute_name","uniform_name","model","allocation","getVertexBodySource","getFragmentBodySource","wrapVertexSource","wrapFragmentSource","f_hit_color","hit_color","slots","fn","getProgram","hit_test_program","createProgramInfo","getVertexSource","getFragmentSource","clickx","clicky","bind","zoom","dst","translate","scaling","viewport","drawingBufferWidth","drawingBufferHeight"],"mappings":"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","file":"picking/bundle.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar twgl              = __webpack_require__(7)\n\tvar m4                = __webpack_require__(7).m4\n\tvar DkcpGl            = __webpack_require__(1)\n\tvar picking           = __webpack_require__(33)\n\t\n\tvar Renderable        = DkcpGl.Renderable\n\tvar Model             = DkcpGl.Model\n\tvar Plate             = DkcpGl.Plate\n\tvar shaders           = DkcpGl.shaders\n\tvar Shader            = DkcpGl.Shader\n\tvar Allocation        = DkcpGl.Allocation\n\t\n\tvar RenderSet         = DkcpGl.RenderSet\n\tvar BasicCamera       = DkcpGl.camera.BasicCamera\n\t\n\tvar main = new DkcpGl({\n\t  canvas : document.getElementById('canvas'),\n\t  frameRate : {\n\t    element : document.getElementById('framerate')\n\t  },\n\t  wasd : {\n\t    document : document,\n\t    delta : .05,\n\t    theta : -Math.PI / 120\n\t  }\n\t})\n\tvar camera = main.camera;\n\tvar screen = main.screen;\n\tvar gl     = main.screen.gl;\n\t\n\tvar hitTestManager = new picking.HitTestManager(gl, 100);\n\t\n\tfunction getRenderable() {\n\t  var identity = m4.identity(new Float32Array(16));\n\t  return new Renderable({\n\t    renderOrder : 10,\n\t    getUniforms : function (renderSet) {\n\t      if (renderSet == screen) {\n\t        return {\n\t          camera : camera.computeMatrix(),\n\t          camera2 : identity,\n\t          hit_test : 0\n\t        }\n\t      }\n\t      return {\n\t        camera : camera.computeMatrix(),\n\t        camera2 : renderSet.camera2,\n\t        hit_test : 1\n\t        \n\t      }\n\t    },\n\t    factory : function () {\n\t      \n\t      var maxColors = 100\n\t      var colorAllocation    = new Allocation.Float(maxColors, 4)\n\t      \n\t      var shader = new picking.HitTestShader(hitTestManager.hitColorAllocation, function () {\n\t        return '  gl_Position = camera2 * camera * position; \\n' + \n\t               '  f_color = colors[int(color)];              \\n'\n\t      }, function () {\n\t        return '  gl_FragColor = f_color; \\n'\n\t      })\n\t\n\t      shader.attributes.position     = 'vec4';\n\t      shader.attributes.color        = 'float';\n\t      shader.varyings.f_color        = 'vec4';\n\t      shader.vertex_uniforms.camera  = 'mat4';\n\t      shader.vertex_uniforms.camera2 = 'mat4';\n\t      shader.vertex_uniforms['colors[' + maxColors + ']'] = 'vec4';\n\t\n\t      var m = new Model(this, shader, 100)\n\t      hitTestManager.mixinModel(m)\n\t      \n\t      m.addAttribute('position', 4, 'Float32Array', function (i, item) {\n\t        return item.vertices[i]\n\t      });\n\t      \n\t      m.addAttribute('color', 1, 'Float32Array', function (i, item) {\n\t        return [\n\t          colorAllocation.add(item.color, item, function () {\n\t            return item.color.color\n\t          })\n\t        ]\n\t      });\n\t\n\t      m.uniforms.colors = colorAllocation.buffer;\n\t  \n\t      return m\n\t    }\n\t  })\n\t}\n\t\n\tvar square = function (x, y, z, w) {\n\t  return [\n\t    [x - w,  y - w, z, 1],\n\t    [x - w,  y + w, z, 1],\n\t    [x + w,  y - w, z, 1],\n\t    [x + w,  y + w, z, 1]\n\t  ]\n\t}\n\t\n\tvar red     = {id: 'red',     color: [1, 0, 0, 1]}\n\tvar green   = {id: 'green',   color: [0, 1, 0, 1]}\n\tvar blue    = {id: 'blue',    color: [0, 0, 1, 1]}\n\tvar white   = {id: 'white',   color: [1, 1, 1, 1]}\n\t\n\tvar quads  = getRenderable()\n\tscreen.addRenderable(quads)\n\tquads.add({\n\t  color : red,\n\t  hit_area : 'red',\n\t  allocations : {},\n\t  vertices : square(.25, 0, .7, .05)\n\t})\n\tquads.add({\n\t  color : green,\n\t  hit_area : 'green',\n\t  allocations : {},\n\t  vertices : square(0, .25, .7, .05)\n\t})\n\tquads.add({\n\t  color : blue,\n\t  hit_area : 'blue',\n\t  allocations : {},\n\t  vertices : square(0, 0, .9, .05)\n\t})\n\tquads.add({\n\t  color : white,\n\t  hit_area : 'white',\n\t  allocations : {},\n\t  vertices : square(0, 0, .7, .01)\n\t})\n\t\n\tvar hitTestRenderSet;\n\t\n\t;(function () {\n\t\n\t  \n\t hitTestRenderSet = hitTestManager.renderSet\n\t\n\t  var shader = new Shader(function () {\n\t    return (\n\t      '  gl_Position = position; \\n'\n\t    )\n\t  }, function () {\n\t    return (\n\t      '  gl_FragColor = vec4(0.5,0.5,0.5,1.0); \\n'\n\t    )\n\t    \n\t  })\n\t  shader.attributes.position    = 'vec4';\n\t\n\t  var plate = new Plate(shader);\n\t  plate.add({z: -.5})\n\t  \n\t  var uniforms = {};\n\t  var mat1 = m4.identity(new Float32Array(16));\n\t  var mat2 = m4.identity(new Float32Array(16));\n\t  var mat3 = m4.identity(new Float32Array(16));\n\t  \n\t  \n\t  hitTestRenderSet.addRenderable({\n\t    before : function () {\n\t      gl.clearColor(0,0,0,0);\n\t      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t    },\n\t    renderOrder : 0\n\t  })\n\t  \n\t  var lastarr;\n\t  hitTestRenderSet.addRenderable({\n\t    before : function () {\n\t      var arr = new Uint8Array(4 * 4)\n\t      gl.readPixels(0, 0, 2, 2, gl.RGBA, gl.UNSIGNED_BYTE, arr)\n\t      arr = Array.prototype.slice.call(arr, 0, 3)\n\t      if (arr.join(',') != lastarr) {\n\t        console.log(hitTestManager.hitAreaFor(arr))\n\t      }\n\t      lastarr = arr.join(',')\n\t    },\n\t    renderOrder : 999\n\t  })\n\t  \n\t  hitTestRenderSet.addRenderable({\n\t    renderOrder: 11,\n\t    render : function (gl) {\n\t      gl.disable(gl.DEPTH_TEST);\n\t      \n\t      gl.enable(gl.BLEND);\n\t      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n\t\n\t      var geom = plate.getGeometry(gl);\n\t      plate.drawPrep(geom, uniforms);\n\t      geom.draw();\n\t\n\t      gl.disable(gl.BLEND);\n\t      gl.enable(gl.DEPTH_TEST);\n\t    }\n\t  })\n\t  \n\t  hitTestRenderSet.addRenderable(quads)\n\t\n\t  screen.addRenderable({\n\t    before : function () {\n\t      gl.clearColor(0,0,0,0);\n\t      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t    },\n\t    renderOrder : 0\n\t  })\n\t  \n\t}())\n\t  \n\t;(function () {\n\t  \n\t  var shader = new Shader(function () {\n\t    return (\n\t      '  v_pos       = position; \\n' +\n\t      '  gl_Position = camera * vec4(position.x / 4.0, position.y / 4.0, 1.5, 1.0); \\n'\n\t    ) \n\t  }, function () {\n\t    return (\n\t      '  gl_FragColor = texture2D(                            \\n'+\n\t      '      texture,                                         \\n'+\n\t      '      vec2(v_pos.x / 2.0 + 0.5, v_pos.y / 2.0 + 0.5)); \\n'\n\t    )\n\t  })\n\t  shader.attributes.position              = 'vec4';\n\t  shader.fragment_uniforms.texture        = 'sampler2D';\n\t  shader.vertex_uniforms.camera           = 'mat4';\n\t  shader.varyings.v_pos                   = 'vec4';\n\t  \n\t  var plate = new Plate(shader);\n\t  plate.textureData = {texture : hitTestRenderSet.framebuffers.texture}\n\t  plate.add({z: 1})\n\t  \n\t  var uniforms = {};\n\t\n\t  var inverse = m4.identity(new Float32Array(16));\n\t  \n\t  \n\t  screen.addRenderable({\n\t    renderOrder : 30,\n\t    render : function (gl) {\n\t      gl.disable(gl.DEPTH_TEST);\n\t      gl.enable(gl.BLEND);\n\t      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n\t      camera.computeMatrix()\n\t      // m4.inverse(camera.skymatrix, inverse);\n\t      uniforms.camera = camera.matrix;\n\t      uniforms.texture = plate.textureData.texture.texture;\n\t      var geom = plate.getGeometry(gl);\n\t      plate.drawPrep(geom, uniforms);\n\t      geom.draw();\n\t      gl.disable(gl.BLEND);\n\t      gl.enable(gl.DEPTH_TEST);\n\t    }\n\t  })\n\t\n\t}());\n\t\n\tscreen.beginFrameRendering(false)\n\t\n\tvar mousex, mousey;\n\t\n\tscreen.on('moved', function () {\n\t  hitTestRenderSet.render(gl, camera, mousex, mousey)\n\t})\n\t\n\tfunction click(x, y) {\n\t  hitTestRenderSet.render(gl, camera, x - 1, y - 1)\n\t}\n\tfunction mousemove(x, y) {\n\t  hitTestRenderSet.render(gl, camera, mousex = x - 1, mousey = y - 1)\n\t}\n\t\n\tdocument.getElementById('canvas').addEventListener('click', function (e) {\n\t  var rect = document.getElementById('canvas').getBoundingClientRect()\n\t  click((e.clientX - rect.left) / rect.width * camera.frameWidth, (e.clientY - rect.top) / rect.height * camera.frameHeight)\n\t})\n\t\n\tdocument.getElementById('canvas').addEventListener('mousemove', function (e) {\n\t  var rect = document.getElementById('canvas').getBoundingClientRect()\n\t  mousemove((e.clientX - rect.left) / rect.width * camera.frameWidth, (e.clientY - rect.top) / rect.height * camera.frameHeight)\n\t})\n\n/***/ },\n\n/***/ 32:\n/***/ function(module, exports) {\n\n\tif (typeof Object.create === 'function') {\n\t  // implementation from standard node.js 'util' module\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor\n\t    ctor.prototype = Object.create(superCtor.prototype, {\n\t      constructor: {\n\t        value: ctor,\n\t        enumerable: false,\n\t        writable: true,\n\t        configurable: true\n\t      }\n\t    });\n\t  };\n\t} else {\n\t  // old school shim for old browsers\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor\n\t    var TempCtor = function () {}\n\t    TempCtor.prototype = superCtor.prototype\n\t    ctor.prototype = new TempCtor()\n\t    ctor.prototype.constructor = ctor\n\t  }\n\t}\n\n\n/***/ },\n\n/***/ 33:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar inherits   = __webpack_require__(32)\n\tvar DkcpGl     = __webpack_require__(1)\n\tvar Allocation = DkcpGl.Allocation\n\tvar Shader     = DkcpGl.Shader\n\tvar RenderSet  = DkcpGl.RenderSet\n\tvar twgl       = __webpack_require__(7)\n\tvar m4         = twgl.m4\n\t\n\tvar HitColorAllocation = function (max) {\n\t  Allocation.Float.call(this, max, 4)\n\t}\n\tinherits(HitColorAllocation, Allocation.Float)\n\t\n\tHitColorAllocation.prototype.add = function (item, owner) {\n\t  return Allocation.Float.prototype.add.call(this, item, owner, function (index) {\n\t    var b = (index >>>  0) % 0x100;\n\t    var g = (index >>>  8) % 0x100;\n\t    var r = (index >>> 16) % 0x100;\n\t    return [r / 255, g / 255, b / 255, 1]\n\t  })\n\t}\n\t\n\tHitColorAllocation.prototype.hitAreaFor = function (arr) {\n\t  var c = arr[0] * 0x10000 + arr[1] * 0x100 + arr[2];\n\t  return this.members[c]\n\t}\n\t\n\tvar HitTestManager = function (gl, max) {\n\t  this.attribute_name     = 'hit_color';\n\t  this.uniform_name       = 'hit_colors';\n\t  this.hitColorAllocation = new HitColorAllocation(max);\n\t  this.renderSet          = new HitTestRenderSet(gl);\n\t}\n\t\n\tHitTestManager.prototype.hitAreaFor = function (arr) {\n\t  return this.hitColorAllocation.hitAreaFor(arr)\n\t}\n\t\n\tHitTestManager.prototype.mixinModel = function (model) {\n\t  var allocation = this.hitColorAllocation\n\t  model.addAttribute(this.attribute_name, 1, 'Float32Array', function (i, item) {\n\t    return [\n\t      allocation.add({id: item.hit_area}, item)\n\t    ]\n\t  });\n\t  model.uniforms[this.uniform_name] = this.hitColorAllocation.buffer;\n\t}\n\t\n\tvar HitTestShader = function (hitColorAllocation, getVertexBodySource, getFragmentBodySource) {\n\t  Shader.call(this,\n\t      this.wrapVertexSource(getVertexBodySource),\n\t      this.wrapFragmentSource(getFragmentBodySource))\n\t\n\t  this.hitColorAllocation = hitColorAllocation\n\t  this.varyings.f_hit_color  = 'vec4';\n\t  this.attributes.hit_color  = 'float';\n\t  this.fragment_uniforms.hit_test = 'int';\n\t  this.vertex_uniforms['hit_colors[' + this.hitColorAllocation.slots.max + ']'] = 'vec4';\n\t}\n\tinherits(HitTestShader, Shader)\n\t\n\tHitTestShader.prototype.wrapVertexSource = function (fn) {\n\t  return function () {\n\t    return fn() + '\\n  f_hit_color = hit_colors[int(hit_color)];'\n\t  }\n\t};\n\t\n\tHitTestShader.prototype.wrapFragmentSource = function (fn) {\n\t  return function () {\n\t    if (this.hit_test) {\n\t      return ' gl_FragColor = f_hit_color;  \\n'\n\t    }\n\t    return fn();\n\t  }\n\t};\n\t\n\tHitTestShader.prototype.getProgram = function (gl, uniforms) {\n\t  if (uniforms.hit_test) {\n\t    if (this.hit_test_program)\n\t      return this.hit_test_program\n\t    \n\t    this.hit_test = true\n\t    return this.hit_test_program = twgl.createProgramInfo(\n\t      gl,\n\t      [this.getVertexSource(), this.getFragmentSource()]\n\t    )\n\t  }\n\t  \n\t  this.hit_test = false\n\t  return Shader.prototype.getProgram.call(this, gl, uniforms)\n\t};\n\t\n\t\n\tfunction HitTestRenderSet(gl, framebuffers) {\n\t  this.framebuffers = new HitTestFrameBuffer(gl, 2, true);\n\t  this.framebuffers.unbind()\n\t  \n\t  RenderSet.call(this)\n\t}\n\tinherits(HitTestRenderSet, RenderSet)\n\t\n\tHitTestRenderSet.prototype.render = function (gl, camera, clickx, clicky) {\n\t  this.framebuffers.bind();\n\t  var zoom = Math.max(camera.frameWidth, camera.frameHeight);\n\t  var dst = new Float32Array(16)\n\t  m4.translate(m4.scaling([zoom, zoom, 1]), [\n\t    2 * (.5 - clickx / camera.frameWidth),\n\t    -2 * (.5 - clicky / camera.frameHeight),\n\t    0\n\t  ], dst)\n\t  this.camera2 = dst\n\t\n\t  RenderSet.prototype.render.call(this, gl);\n\t  this.framebuffers.unbind();\n\t}\n\t\n\t\n\tfunction HitTestFrameBuffer(gl, size, opt_depth) {\n\t  this.gl = gl\n\t  this.size = size;\n\t  this.depth = opt_depth;\n\t  var tex = {\n\t    texture : twgl.createTexture(gl, {\n\t      target : gl.TEXTURE_2D,\n\t      width  : this.size,\n\t      height : this.size,\n\t      min    : gl.LINEAR,\n\t      mag    : gl.LINEAR,\n\t      format : gl.RGBA,\n\t      type   : gl.UNSIGNED_BYTE,\n\t      wrapS  : gl.CLAMP_TO_EDGE,\n\t      wrapT  : gl.CLAMP_TO_EDGE\n\t    })\n\t  }\n\t  if (this.depth) {\n\t    var db = gl.createRenderbuffer();\n\t    gl.bindRenderbuffer(gl.RENDERBUFFER, db);\n\t    gl.renderbufferStorage(\n\t        gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.size, this.size);\n\t  }\n\t\n\t  var fb = gl.createFramebuffer();\n\t  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n\t  gl.framebufferTexture2D(\n\t      gl.FRAMEBUFFER,\n\t      gl.COLOR_ATTACHMENT0,\n\t      gl.TEXTURE_2D,\n\t      tex.texture,\n\t      0);\n\t  if (this.depth) {\n\t    gl.framebufferRenderbuffer(\n\t        gl.FRAMEBUFFER,\n\t        gl.DEPTH_ATTACHMENT,\n\t        gl.RENDERBUFFER,\n\t        db);\n\t  }\n\t  var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\t  if (status != gl.FRAMEBUFFER_COMPLETE) {\n\t    throw(\"gl.checkFramebufferStatus() returned \" + WebGLDebugUtils.glEnumToString(status));\n\t  }\n\t  this.framebuffer = fb;\n\t  gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t  this.texture = tex;\n\t}\n\t\n\tHitTestFrameBuffer.prototype.bind = function() {\n\t  var gl = this.gl\n\t  gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n\t  gl.viewport(0, 0, this.size, this.size);\n\t};\n\t\n\tHitTestFrameBuffer.prototype.unbind = function() {\n\t  var gl = this.gl\n\t  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t  gl.viewport(\n\t      0, 0,\n\t      gl.drawingBufferWidth || gl.canvas.width,\n\t      gl.drawingBufferHeight || gl.canvas.height);\n\t};\n\t\n\tmodule.exports.HitTestShader  = HitTestShader\n\tmodule.exports.HitTestManager = HitTestManager\n\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** picking/bundle.js\n **/","var twgl              = require('../../lib/twgl')\nvar m4                = require('../../lib/twgl').m4\nvar DkcpGl            = require('../../src/dkcp-gl')\nvar picking           = require('../../src/picking')\n\nvar Renderable        = DkcpGl.Renderable\nvar Model             = DkcpGl.Model\nvar Plate             = DkcpGl.Plate\nvar shaders           = DkcpGl.shaders\nvar Shader            = DkcpGl.Shader\nvar Allocation        = DkcpGl.Allocation\n\nvar RenderSet         = DkcpGl.RenderSet\nvar BasicCamera       = DkcpGl.camera.BasicCamera\n\nvar main = new DkcpGl({\n  canvas : document.getElementById('canvas'),\n  frameRate : {\n    element : document.getElementById('framerate')\n  },\n  wasd : {\n    document : document,\n    delta : .05,\n    theta : -Math.PI / 120\n  }\n})\nvar camera = main.camera;\nvar screen = main.screen;\nvar gl     = main.screen.gl;\n\nvar hitTestManager = new picking.HitTestManager(gl, 100);\n\nfunction getRenderable() {\n  var identity = m4.identity(new Float32Array(16));\n  return new Renderable({\n    renderOrder : 10,\n    getUniforms : function (renderSet) {\n      if (renderSet == screen) {\n        return {\n          camera : camera.computeMatrix(),\n          camera2 : identity,\n          hit_test : 0\n        }\n      }\n      return {\n        camera : camera.computeMatrix(),\n        camera2 : renderSet.camera2,\n        hit_test : 1\n        \n      }\n    },\n    factory : function () {\n      \n      var maxColors = 100\n      var colorAllocation    = new Allocation.Float(maxColors, 4)\n      \n      var shader = new picking.HitTestShader(hitTestManager.hitColorAllocation, function () {\n        return '  gl_Position = camera2 * camera * position; \\n' + \n               '  f_color = colors[int(color)];              \\n'\n      }, function () {\n        return '  gl_FragColor = f_color; \\n'\n      })\n\n      shader.attributes.position     = 'vec4';\n      shader.attributes.color        = 'float';\n      shader.varyings.f_color        = 'vec4';\n      shader.vertex_uniforms.camera  = 'mat4';\n      shader.vertex_uniforms.camera2 = 'mat4';\n      shader.vertex_uniforms['colors[' + maxColors + ']'] = 'vec4';\n\n      var m = new Model(this, shader, 100)\n      hitTestManager.mixinModel(m)\n      \n      m.addAttribute('position', 4, 'Float32Array', function (i, item) {\n        return item.vertices[i]\n      });\n      \n      m.addAttribute('color', 1, 'Float32Array', function (i, item) {\n        return [\n          colorAllocation.add(item.color, item, function () {\n            return item.color.color\n          })\n        ]\n      });\n\n      m.uniforms.colors = colorAllocation.buffer;\n  \n      return m\n    }\n  })\n}\n\nvar square = function (x, y, z, w) {\n  return [\n    [x - w,  y - w, z, 1],\n    [x - w,  y + w, z, 1],\n    [x + w,  y - w, z, 1],\n    [x + w,  y + w, z, 1]\n  ]\n}\n\nvar red     = {id: 'red',     color: [1, 0, 0, 1]}\nvar green   = {id: 'green',   color: [0, 1, 0, 1]}\nvar blue    = {id: 'blue',    color: [0, 0, 1, 1]}\nvar white   = {id: 'white',   color: [1, 1, 1, 1]}\n\nvar quads  = getRenderable()\nscreen.addRenderable(quads)\nquads.add({\n  color : red,\n  hit_area : 'red',\n  allocations : {},\n  vertices : square(.25, 0, .7, .05)\n})\nquads.add({\n  color : green,\n  hit_area : 'green',\n  allocations : {},\n  vertices : square(0, .25, .7, .05)\n})\nquads.add({\n  color : blue,\n  hit_area : 'blue',\n  allocations : {},\n  vertices : square(0, 0, .9, .05)\n})\nquads.add({\n  color : white,\n  hit_area : 'white',\n  allocations : {},\n  vertices : square(0, 0, .7, .01)\n})\n\nvar hitTestRenderSet;\n\n;(function () {\n\n  \n hitTestRenderSet = hitTestManager.renderSet\n\n  var shader = new Shader(function () {\n    return (\n      '  gl_Position = position; \\n'\n    )\n  }, function () {\n    return (\n      '  gl_FragColor = vec4(0.5,0.5,0.5,1.0); \\n'\n    )\n    \n  })\n  shader.attributes.position    = 'vec4';\n\n  var plate = new Plate(shader);\n  plate.add({z: -.5})\n  \n  var uniforms = {};\n  var mat1 = m4.identity(new Float32Array(16));\n  var mat2 = m4.identity(new Float32Array(16));\n  var mat3 = m4.identity(new Float32Array(16));\n  \n  \n  hitTestRenderSet.addRenderable({\n    before : function () {\n      gl.clearColor(0,0,0,0);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n    },\n    renderOrder : 0\n  })\n  \n  var lastarr;\n  hitTestRenderSet.addRenderable({\n    before : function () {\n      var arr = new Uint8Array(4 * 4)\n      gl.readPixels(0, 0, 2, 2, gl.RGBA, gl.UNSIGNED_BYTE, arr)\n      arr = Array.prototype.slice.call(arr, 0, 3)\n      if (arr.join(',') != lastarr) {\n        console.log(hitTestManager.hitAreaFor(arr))\n      }\n      lastarr = arr.join(',')\n    },\n    renderOrder : 999\n  })\n  \n  hitTestRenderSet.addRenderable({\n    renderOrder: 11,\n    render : function (gl) {\n      gl.disable(gl.DEPTH_TEST);\n      \n      gl.enable(gl.BLEND);\n      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n\n      var geom = plate.getGeometry(gl);\n      plate.drawPrep(geom, uniforms);\n      geom.draw();\n\n      gl.disable(gl.BLEND);\n      gl.enable(gl.DEPTH_TEST);\n    }\n  })\n  \n  hitTestRenderSet.addRenderable(quads)\n\n  screen.addRenderable({\n    before : function () {\n      gl.clearColor(0,0,0,0);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n    },\n    renderOrder : 0\n  })\n  \n}())\n  \n;(function () {\n  \n  var shader = new Shader(function () {\n    return (\n      '  v_pos       = position; \\n' +\n      '  gl_Position = camera * vec4(position.x / 4.0, position.y / 4.0, 1.5, 1.0); \\n'\n    ) \n  }, function () {\n    return (\n      '  gl_FragColor = texture2D(                            \\n'+\n      '      texture,                                         \\n'+\n      '      vec2(v_pos.x / 2.0 + 0.5, v_pos.y / 2.0 + 0.5)); \\n'\n    )\n  })\n  shader.attributes.position              = 'vec4';\n  shader.fragment_uniforms.texture        = 'sampler2D';\n  shader.vertex_uniforms.camera           = 'mat4';\n  shader.varyings.v_pos                   = 'vec4';\n  \n  var plate = new Plate(shader);\n  plate.textureData = {texture : hitTestRenderSet.framebuffers.texture}\n  plate.add({z: 1})\n  \n  var uniforms = {};\n\n  var inverse = m4.identity(new Float32Array(16));\n  \n  \n  screen.addRenderable({\n    renderOrder : 30,\n    render : function (gl) {\n      gl.disable(gl.DEPTH_TEST);\n      gl.enable(gl.BLEND);\n      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n      camera.computeMatrix()\n      // m4.inverse(camera.skymatrix, inverse);\n      uniforms.camera = camera.matrix;\n      uniforms.texture = plate.textureData.texture.texture;\n      var geom = plate.getGeometry(gl);\n      plate.drawPrep(geom, uniforms);\n      geom.draw();\n      gl.disable(gl.BLEND);\n      gl.enable(gl.DEPTH_TEST);\n    }\n  })\n\n}());\n\nscreen.beginFrameRendering(false)\n\nvar mousex, mousey;\n\nscreen.on('moved', function () {\n  hitTestRenderSet.render(gl, camera, mousex, mousey)\n})\n\nfunction click(x, y) {\n  hitTestRenderSet.render(gl, camera, x - 1, y - 1)\n}\nfunction mousemove(x, y) {\n  hitTestRenderSet.render(gl, camera, mousex = x - 1, mousey = y - 1)\n}\n\ndocument.getElementById('canvas').addEventListener('click', function (e) {\n  var rect = document.getElementById('canvas').getBoundingClientRect()\n  click((e.clientX - rect.left) / rect.width * camera.frameWidth, (e.clientY - rect.top) / rect.height * camera.frameHeight)\n})\n\ndocument.getElementById('canvas').addEventListener('mousemove', function (e) {\n  var rect = document.getElementById('canvas').getBoundingClientRect()\n  mousemove((e.clientX - rect.left) / rect.width * camera.frameWidth, (e.clientY - rect.top) / rect.height * camera.frameHeight)\n})\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./examples/picking/index.js\n ** module id = 0\n ** module chunks = 1\n **/","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/inherits/inherits_browser.js\n ** module id = 32\n ** module chunks = 1\n **/","var inherits   = require('inherits')\nvar DkcpGl     = require('./dkcp-gl')\nvar Allocation = DkcpGl.Allocation\nvar Shader     = DkcpGl.Shader\nvar RenderSet  = DkcpGl.RenderSet\nvar twgl       = require('../lib/twgl')\nvar m4         = twgl.m4\n\nvar HitColorAllocation = function (max) {\n  Allocation.Float.call(this, max, 4)\n}\ninherits(HitColorAllocation, Allocation.Float)\n\nHitColorAllocation.prototype.add = function (item, owner) {\n  return Allocation.Float.prototype.add.call(this, item, owner, function (index) {\n    var b = (index >>>  0) % 0x100;\n    var g = (index >>>  8) % 0x100;\n    var r = (index >>> 16) % 0x100;\n    return [r / 255, g / 255, b / 255, 1]\n  })\n}\n\nHitColorAllocation.prototype.hitAreaFor = function (arr) {\n  var c = arr[0] * 0x10000 + arr[1] * 0x100 + arr[2];\n  return this.members[c]\n}\n\nvar HitTestManager = function (gl, max) {\n  this.attribute_name     = 'hit_color';\n  this.uniform_name       = 'hit_colors';\n  this.hitColorAllocation = new HitColorAllocation(max);\n  this.renderSet          = new HitTestRenderSet(gl);\n}\n\nHitTestManager.prototype.hitAreaFor = function (arr) {\n  return this.hitColorAllocation.hitAreaFor(arr)\n}\n\nHitTestManager.prototype.mixinModel = function (model) {\n  var allocation = this.hitColorAllocation\n  model.addAttribute(this.attribute_name, 1, 'Float32Array', function (i, item) {\n    return [\n      allocation.add({id: item.hit_area}, item)\n    ]\n  });\n  model.uniforms[this.uniform_name] = this.hitColorAllocation.buffer;\n}\n\nvar HitTestShader = function (hitColorAllocation, getVertexBodySource, getFragmentBodySource) {\n  Shader.call(this,\n      this.wrapVertexSource(getVertexBodySource),\n      this.wrapFragmentSource(getFragmentBodySource))\n\n  this.hitColorAllocation = hitColorAllocation\n  this.varyings.f_hit_color  = 'vec4';\n  this.attributes.hit_color  = 'float';\n  this.fragment_uniforms.hit_test = 'int';\n  this.vertex_uniforms['hit_colors[' + this.hitColorAllocation.slots.max + ']'] = 'vec4';\n}\ninherits(HitTestShader, Shader)\n\nHitTestShader.prototype.wrapVertexSource = function (fn) {\n  return function () {\n    return fn() + '\\n  f_hit_color = hit_colors[int(hit_color)];'\n  }\n};\n\nHitTestShader.prototype.wrapFragmentSource = function (fn) {\n  return function () {\n    if (this.hit_test) {\n      return ' gl_FragColor = f_hit_color;  \\n'\n    }\n    return fn();\n  }\n};\n\nHitTestShader.prototype.getProgram = function (gl, uniforms) {\n  if (uniforms.hit_test) {\n    if (this.hit_test_program)\n      return this.hit_test_program\n    \n    this.hit_test = true\n    return this.hit_test_program = twgl.createProgramInfo(\n      gl,\n      [this.getVertexSource(), this.getFragmentSource()]\n    )\n  }\n  \n  this.hit_test = false\n  return Shader.prototype.getProgram.call(this, gl, uniforms)\n};\n\n\nfunction HitTestRenderSet(gl, framebuffers) {\n  this.framebuffers = new HitTestFrameBuffer(gl, 2, true);\n  this.framebuffers.unbind()\n  \n  RenderSet.call(this)\n}\ninherits(HitTestRenderSet, RenderSet)\n\nHitTestRenderSet.prototype.render = function (gl, camera, clickx, clicky) {\n  this.framebuffers.bind();\n  var zoom = Math.max(camera.frameWidth, camera.frameHeight);\n  var dst = new Float32Array(16)\n  m4.translate(m4.scaling([zoom, zoom, 1]), [\n    2 * (.5 - clickx / camera.frameWidth),\n    -2 * (.5 - clicky / camera.frameHeight),\n    0\n  ], dst)\n  this.camera2 = dst\n\n  RenderSet.prototype.render.call(this, gl);\n  this.framebuffers.unbind();\n}\n\n\nfunction HitTestFrameBuffer(gl, size, opt_depth) {\n  this.gl = gl\n  this.size = size;\n  this.depth = opt_depth;\n  var tex = {\n    texture : twgl.createTexture(gl, {\n      target : gl.TEXTURE_2D,\n      width  : this.size,\n      height : this.size,\n      min    : gl.LINEAR,\n      mag    : gl.LINEAR,\n      format : gl.RGBA,\n      type   : gl.UNSIGNED_BYTE,\n      wrapS  : gl.CLAMP_TO_EDGE,\n      wrapT  : gl.CLAMP_TO_EDGE\n    })\n  }\n  if (this.depth) {\n    var db = gl.createRenderbuffer();\n    gl.bindRenderbuffer(gl.RENDERBUFFER, db);\n    gl.renderbufferStorage(\n        gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.size, this.size);\n  }\n\n  var fb = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      tex.texture,\n      0);\n  if (this.depth) {\n    gl.framebufferRenderbuffer(\n        gl.FRAMEBUFFER,\n        gl.DEPTH_ATTACHMENT,\n        gl.RENDERBUFFER,\n        db);\n  }\n  var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  if (status != gl.FRAMEBUFFER_COMPLETE) {\n    throw(\"gl.checkFramebufferStatus() returned \" + WebGLDebugUtils.glEnumToString(status));\n  }\n  this.framebuffer = fb;\n  gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n  this.texture = tex;\n}\n\nHitTestFrameBuffer.prototype.bind = function() {\n  var gl = this.gl\n  gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n  gl.viewport(0, 0, this.size, this.size);\n};\n\nHitTestFrameBuffer.prototype.unbind = function() {\n  var gl = this.gl\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.viewport(\n      0, 0,\n      gl.drawingBufferWidth || gl.canvas.width,\n      gl.drawingBufferHeight || gl.canvas.height);\n};\n\nmodule.exports.HitTestShader  = HitTestShader\nmodule.exports.HitTestManager = HitTestManager\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/picking.js\n ** module id = 33\n ** module chunks = 1\n **/"],"sourceRoot":""}