{"version":3,"sources":["webpack:///picking/bundle.js","webpack:///./examples/picking/index.js"],"names":["webpackJsonp","module","exports","__webpack_require__","getRenderable","Renderable","renderOrder","getUniforms","camera","computeMatrix","factory","maxColors","colorAllocation","Allocation","Float","shader","Shader","attributes","position","color","varyings","f_color","vertex_uniforms","m","Model","this","addAttribute","i","item","vertices","add","uniforms","colors","buffer","MyRenderSet","framebuffers","cameras","ff","c","push","BasicCamera","size","setFOV","rotateBy","Math","PI","RenderSet","call","MyFramebuffer","opt_depth","gl","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_CUBE_MAP_NEGATIVE_Z","depth","tex","texture","twgl","createTexture","target","TEXTURE_2D","width","height","min","LINEAR","mag","format","RGBA","type","UNSIGNED_BYTE","wrapS","CLAMP_TO_EDGE","wrapT","db","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","fb","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","DEPTH_ATTACHMENT","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","WebGLDebugUtils","glEnumToString","click","x","y","console","log","floor","m4","DkcpGl","Plate","shaders","util","main","canvas","document","getElementById","frameRate","element","wasd","delta","theta","screen","square","z","w","red","id","green","blue","white","quads","addRenderable","allocations","inherits","prototype","render","bind","unbind","face","viewport","drawingBufferWidth","drawingBufferHeight","myFBO","myRenderSet","inverse_camera","v_position","plate","mat1","identity","Float32Array","mat2","mat3","before","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","disable","DEPTH_TEST","enable","BLEND","blendEquationSeparate","FUNC_ADD","blendFuncSeparate","ONE_MINUS_DST_ALPHA","DST_ALPHA","ONE","inverse","perspective","skyorientation","multiply","geom","getGeometry","drawPrep","draw","fragment_uniforms","v_pos","textureData","matrix","beginFrameRendering","addEventListener","e","rect","getBoundingClientRect","clientX","left","frameWidth","clientY","top","frameHeight"],"mappings":"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","file":"picking/bundle.js","sourcesContent":["webpackJsonp([1],[\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar twgl              = __webpack_require__(7)\n\tvar m4                = __webpack_require__(7).m4\n\tvar DkcpGl            = __webpack_require__(1)\n\t\n\tvar Renderable        = DkcpGl.Renderable\n\tvar Model             = DkcpGl.Model\n\tvar Plate             = DkcpGl.Plate\n\tvar shaders           = DkcpGl.shaders\n\tvar Shader            = DkcpGl.Shader\n\tvar Allocation        = DkcpGl.Allocation\n\t\n\tvar util        = __webpack_require__(3)\n\tvar RenderSet   = DkcpGl.RenderSet\n\tvar BasicCamera = DkcpGl.camera.BasicCamera\n\t\n\tvar main = new DkcpGl({\n\t  canvas : document.getElementById('canvas'),\n\t  frameRate : {\n\t    element : document.getElementById('framerate')\n\t  },\n\t  wasd : {\n\t    document : document,\n\t    delta : .05,\n\t    theta : -Math.PI / 120\n\t  }\n\t})\n\tvar camera = main.camera;\n\tvar screen = main.screen;\n\tvar gl     = main.screen.gl;\n\t\n\tfunction getRenderable() {\n\t  return new Renderable({\n\t    renderOrder : 10,\n\t    getUniforms : function () {\n\t      return {\n\t        camera : camera.computeMatrix()\n\t      }\n\t    },\n\t    factory : function () {\n\t      \n\t      var maxColors = 100\n\t      var colorAllocation = new Allocation.Float(maxColors, 4)\n\t\n\t      var shader = new Shader(function () {\n\t        return '  gl_Position = camera * position; \\n' + \n\t               '  f_color = colors[int(color)]; \\n'\n\t      }, function () {\n\t        return '  gl_FragColor = f_color ;\\n'\n\t      })\n\t      shader.attributes.position   = 'vec4';\n\t      shader.attributes.color      = 'float';\n\t      shader.varyings.f_color      = 'vec4';\n\t      shader.vertex_uniforms.camera = 'mat4';\n\t      shader.vertex_uniforms['colors[' + maxColors + ']'] = 'vec4';\n\t\n\t      var m = new Model(this, shader, 100)\n\t      m.addAttribute('position', 4, 'Float32Array', function (i, item) {\n\t        return item.vertices[i]\n\t      });\n\t      \n\t      m.addAttribute('color', 1, 'Float32Array', function (i, item) {\n\t        return [\n\t          colorAllocation.add(item.color, item, function () {\n\t            return item.color.color\n\t          })\n\t        ]\n\t      });\n\t  \n\t      m.uniforms.colors = colorAllocation.buffer;\n\t  \n\t      return m\n\t    }\n\t  })\n\t}\n\t\n\tvar square = function (x, y, z, w) {\n\t  return [\n\t    [x - w,  y - w, z, 1],\n\t    [x - w,  y + w, z, 1],\n\t    [x + w,  y - w, z, 1],\n\t    [x + w,  y + w, z, 1]\n\t  ]\n\t}\n\t\n\tvar red   = {id: 'red',   color: [1, 0, 0, 1]}\n\tvar green = {id: 'green', color: [0, 1, 0, 1]}\n\tvar blue  = {id: 'blue',  color: [0, 0, 1, 1]}\n\tvar white = {id: 'white', color: [1, 1, 1, 1]}\n\t\n\t  \n\tvar quads  = getRenderable()\n\tscreen.addRenderable(quads)\n\tquads.add({\n\t  color : red,\n\t  allocations : {},\n\t  vertices : square(.25, 0, .7, .05)\n\t})\n\tquads.add({\n\t  color : green,\n\t  allocations : {},\n\t  vertices : square(0, .25, .7, .05)\n\t})\n\tquads.add({\n\t  color : blue,\n\t  allocations : {},\n\t  vertices : square(0, 0, .9, .05)\n\t})\n\tquads.add({\n\t  color : white,\n\t  allocations : {},\n\t  vertices : square(0, 0, .7, .01)\n\t})\n\t\n\tfunction MyRenderSet(framebuffers) {\n\t\n\t  this.framebuffers = framebuffers;\n\t  this.cameras = [];\n\t  this.camera = null;\n\t  \n\t  for (var ff = 0; ff < 1; ++ff) {\n\t    var c;\n\t    this.cameras.push(c = new BasicCamera(framebuffers.size, framebuffers.size, .1, 4096));\n\t    c.setFOV(90, true);\n\t  }\n\t\n\t  this.camera = c;\n\t  this.camera.rotateBy(0, Math.PI, 0);\n\t\n\t  // this.cameras[2].rotateBy(0, Math.PI/2, 0);\n\t  // this.cameras[3].rotateBy(0, -Math.PI/2, 0);\n\t  // this.cameras[5].rotateBy(0, Math.PI, Math.PI);\n\t  // this.cameras[1].rotateBy(0, Math.PI, -Math.PI/2);\n\t  // this.cameras[4].rotateBy(0, Math.PI, 0);\n\t  // this.cameras[0].rotateBy(0, Math.PI, Math.PI/2);\n\t  \n\t  RenderSet.call(this)\n\t}\n\tutil.inherits(MyRenderSet, RenderSet)\n\t\n\tMyRenderSet.prototype.render = function (gl) {\n\t  for (var ff = 0; ff < 1; ++ff) {\n\t    this.framebuffers.bind(ff);\n\t    this.camera = this.cameras[ff];\n\t    RenderSet.prototype.render.call(this, gl);\n\t  }\n\t  this.framebuffers.unbind();\n\t}\n\t\n\t\n\tfunction MyFramebuffer(size, opt_depth) {\n\t  var faceTargets = [\n\t    gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n\t    gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n\t    gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n\t    gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n\t    gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n\t    gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];\n\t\n\t  this.size = size;\n\t  this.depth = opt_depth;\n\t  var tex = {\n\t    texture : twgl.createTexture(gl, {\n\t      target : gl.TEXTURE_2D,\n\t      width  : this.size,\n\t      height : this.size,\n\t      min    : gl.LINEAR,\n\t      mag    : gl.LINEAR,\n\t      format : gl.RGBA,\n\t      type   : gl.UNSIGNED_BYTE,\n\t      wrapS  : gl.CLAMP_TO_EDGE,\n\t      wrapT  : gl.CLAMP_TO_EDGE\n\t    })\n\t  }\n\t  if (this.depth) {\n\t    var db = gl.createRenderbuffer();\n\t    gl.bindRenderbuffer(gl.RENDERBUFFER, db);\n\t    gl.renderbufferStorage(\n\t        gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.size, this.size);\n\t  }\n\t  this.framebuffers = [];\n\t  for (var ff = 0; ff < 1; ++ff) {\n\t    var fb = gl.createFramebuffer();\n\t    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n\t    gl.framebufferTexture2D(\n\t        gl.FRAMEBUFFER,\n\t        gl.COLOR_ATTACHMENT0,\n\t        gl.TEXTURE_2D,\n\t        tex.texture,\n\t        0);\n\t    if (this.depth) {\n\t      gl.framebufferRenderbuffer(\n\t          gl.FRAMEBUFFER,\n\t          gl.DEPTH_ATTACHMENT,\n\t          gl.RENDERBUFFER,\n\t          db);\n\t    }\n\t    var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\t    if (status != gl.FRAMEBUFFER_COMPLETE) {\n\t      throw(\"gl.checkFramebufferStatus() returned \" + WebGLDebugUtils.glEnumToString(status));\n\t    }\n\t    this.framebuffers.push(fb);\n\t  }\n\t  gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t  this.texture = tex;\n\t}\n\t\n\tMyFramebuffer.prototype.bind = function(face) {\n\t  gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffers[face]);\n\t  gl.viewport(0, 0, this.size, this.size);\n\t};\n\t\n\tMyFramebuffer.prototype.unbind = function() {\n\t  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t  gl.viewport(\n\t      0, 0,\n\t      gl.drawingBufferWidth || gl.canvas.width,\n\t      gl.drawingBufferHeight || gl.canvas.height);\n\t};\n\t\n\t\n\tvar myFBO = new MyFramebuffer(1024, true);\n\tmyFBO.unbind()\n\t\n\t;(function () {\n\t\n\t  \n\t  var myRenderSet = new MyRenderSet(myFBO)\n\t\n\t  var shader = new Shader(function () {\n\t    return (\n\t      '  gl_Position = position; \\n' +\n\t      '  v_position  = inverse_camera * position; \\n'\n\t    )\n\t  }, function () {\n\t    return (\n\t      '  gl_FragColor = vec4(                                               \\n' +\n\t      '   (v_position.x + 1.0) / 2.0,                                       \\n' +\n\t      '   (v_position.y + 1.0) / 2.0,                                       \\n' +\n\t      '   (v_position.z + 1.0) / 2.0,                                       \\n' +\n\t      '   1.0);                                                             \\n'\n\t    )\n\t    \n\t  })\n\t  shader.attributes.position    = 'vec4';\n\t  shader.vertex_uniforms.inverse_camera = 'mat4';\n\t  shader.varyings.v_position    = 'vec4';\n\t\n\t  var plate = new Plate(shader);\n\t  plate.add({z: -.5})\n\t  \n\t  var uniforms = {};\n\t  var mat1 = m4.identity(new Float32Array(16));\n\t  var mat2 = m4.identity(new Float32Array(16));\n\t  var mat3 = m4.identity(new Float32Array(16));\n\t  \n\t  \n\t  myRenderSet.addRenderable({\n\t    before : function () {\n\t      gl.clearColor(0,0,0,0);\n\t      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t    },\n\t    renderOrder : 0\n\t  })\n\t\n\t  myRenderSet.addRenderable({\n\t    renderOrder: 11,\n\t    render : function (gl) {\n\t      gl.disable(gl.DEPTH_TEST);\n\t      \n\t      gl.enable(gl.BLEND);\n\t      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n\t\n\t      myRenderSet.camera.computeMatrix()\n\t      m4.inverse(myRenderSet.camera.perspective, mat1);\n\t      m4.inverse(myRenderSet.camera.skyorientation, mat2);\n\t      m4.multiply(mat1, mat2, mat3);\n\t      uniforms.inverse_camera = mat3;\n\t\n\t      var geom = plate.getGeometry(gl);\n\t      plate.drawPrep(geom, uniforms);\n\t      geom.draw();\n\t\n\t      gl.disable(gl.BLEND);\n\t      gl.enable(gl.DEPTH_TEST);\n\t    }\n\t  })\n\t  \n\t  myRenderSet.addRenderable(quads)\n\t\n\t  screen.addRenderable({\n\t    before : function () {\n\t      gl.clearColor(0,0,0,0);\n\t      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t    },\n\t    renderOrder : 0\n\t  })\n\t  \n\t  screen.addRenderable({\n\t    renderOrder : 20,\n\t    render : function (gl) {\n\t      myRenderSet.render(gl)\n\t    }\n\t  })\n\t\n\t}())\n\t  \n\t;(function () {\n\t  \n\t  var shader = new Shader(function () {\n\t    return (\n\t      '  v_pos       = position; \\n' +\n\t      '  gl_Position = camera * vec4(position.x / 4.0, position.y / 4.0, 1.5, 1.0); \\n'\n\t    ) \n\t  }, function () {\n\t    return (\n\t      '  gl_FragColor = texture2D(                            \\n'+\n\t      '      texture,                                         \\n'+\n\t      '      vec2(v_pos.x / 2.0 + 0.5, v_pos.y / 2.0 + 0.5)); \\n'\n\t    )\n\t  })\n\t  shader.attributes.position              = 'vec4';\n\t  shader.fragment_uniforms.texture        = 'sampler2D';\n\t  shader.vertex_uniforms.camera           = 'mat4';\n\t  shader.varyings.v_pos                   = 'vec4';\n\t  \n\t  var plate = new Plate(shader);\n\t  plate.textureData = {texture : myFBO.texture}\n\t  plate.add({z: 1})\n\t  \n\t  var uniforms = {};\n\t\n\t  var inverse = m4.identity(new Float32Array(16));\n\t  \n\t  \n\t  screen.addRenderable({\n\t    renderOrder : 30,\n\t    render : function (gl) {\n\t      gl.disable(gl.DEPTH_TEST);\n\t      gl.enable(gl.BLEND);\n\t      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n\t      camera.computeMatrix()\n\t      // m4.inverse(camera.skymatrix, inverse);\n\t      uniforms.camera = camera.matrix;\n\t      uniforms.texture = plate.textureData.texture.texture;\n\t      var geom = plate.getGeometry(gl);\n\t      plate.drawPrep(geom, uniforms);\n\t      geom.draw();\n\t      gl.disable(gl.BLEND);\n\t      gl.enable(gl.DEPTH_TEST);\n\t    }\n\t  })\n\t\n\t}());\n\t\n\tscreen.beginFrameRendering(false)\n\t\n\t\n\tfunction click(x, y) {\n\t  console.log(Math.floor(x), Math.floor(y))\n\t}\n\t\n\tdocument.getElementById('canvas').addEventListener('click', function (e) {\n\t  var rect = document.getElementById('canvas').getBoundingClientRect()\n\t  click((e.clientX - rect.left) / rect.width * camera.frameWidth, (e.clientY - rect.top) / rect.height * camera.frameHeight)\n\t})\n\n/***/ }\n]);\n\n\n/** WEBPACK FOOTER **\n ** picking/bundle.js\n **/","var twgl              = require('../../lib/twgl')\nvar m4                = require('../../lib/twgl').m4\nvar DkcpGl            = require('../../src/dkcp-gl')\n\nvar Renderable        = DkcpGl.Renderable\nvar Model             = DkcpGl.Model\nvar Plate             = DkcpGl.Plate\nvar shaders           = DkcpGl.shaders\nvar Shader            = DkcpGl.Shader\nvar Allocation        = DkcpGl.Allocation\n\nvar util        = require('util')\nvar RenderSet   = DkcpGl.RenderSet\nvar BasicCamera = DkcpGl.camera.BasicCamera\n\nvar main = new DkcpGl({\n  canvas : document.getElementById('canvas'),\n  frameRate : {\n    element : document.getElementById('framerate')\n  },\n  wasd : {\n    document : document,\n    delta : .05,\n    theta : -Math.PI / 120\n  }\n})\nvar camera = main.camera;\nvar screen = main.screen;\nvar gl     = main.screen.gl;\n\nfunction getRenderable() {\n  return new Renderable({\n    renderOrder : 10,\n    getUniforms : function () {\n      return {\n        camera : camera.computeMatrix()\n      }\n    },\n    factory : function () {\n      \n      var maxColors = 100\n      var colorAllocation = new Allocation.Float(maxColors, 4)\n\n      var shader = new Shader(function () {\n        return '  gl_Position = camera * position; \\n' + \n               '  f_color = colors[int(color)]; \\n'\n      }, function () {\n        return '  gl_FragColor = f_color ;\\n'\n      })\n      shader.attributes.position   = 'vec4';\n      shader.attributes.color      = 'float';\n      shader.varyings.f_color      = 'vec4';\n      shader.vertex_uniforms.camera = 'mat4';\n      shader.vertex_uniforms['colors[' + maxColors + ']'] = 'vec4';\n\n      var m = new Model(this, shader, 100)\n      m.addAttribute('position', 4, 'Float32Array', function (i, item) {\n        return item.vertices[i]\n      });\n      \n      m.addAttribute('color', 1, 'Float32Array', function (i, item) {\n        return [\n          colorAllocation.add(item.color, item, function () {\n            return item.color.color\n          })\n        ]\n      });\n  \n      m.uniforms.colors = colorAllocation.buffer;\n  \n      return m\n    }\n  })\n}\n\nvar square = function (x, y, z, w) {\n  return [\n    [x - w,  y - w, z, 1],\n    [x - w,  y + w, z, 1],\n    [x + w,  y - w, z, 1],\n    [x + w,  y + w, z, 1]\n  ]\n}\n\nvar red   = {id: 'red',   color: [1, 0, 0, 1]}\nvar green = {id: 'green', color: [0, 1, 0, 1]}\nvar blue  = {id: 'blue',  color: [0, 0, 1, 1]}\nvar white = {id: 'white', color: [1, 1, 1, 1]}\n\n  \nvar quads  = getRenderable()\nscreen.addRenderable(quads)\nquads.add({\n  color : red,\n  allocations : {},\n  vertices : square(.25, 0, .7, .05)\n})\nquads.add({\n  color : green,\n  allocations : {},\n  vertices : square(0, .25, .7, .05)\n})\nquads.add({\n  color : blue,\n  allocations : {},\n  vertices : square(0, 0, .9, .05)\n})\nquads.add({\n  color : white,\n  allocations : {},\n  vertices : square(0, 0, .7, .01)\n})\n\nfunction MyRenderSet(framebuffers) {\n\n  this.framebuffers = framebuffers;\n  this.cameras = [];\n  this.camera = null;\n  \n  for (var ff = 0; ff < 1; ++ff) {\n    var c;\n    this.cameras.push(c = new BasicCamera(framebuffers.size, framebuffers.size, .1, 4096));\n    c.setFOV(90, true);\n  }\n\n  this.camera = c;\n  this.camera.rotateBy(0, Math.PI, 0);\n\n  // this.cameras[2].rotateBy(0, Math.PI/2, 0);\n  // this.cameras[3].rotateBy(0, -Math.PI/2, 0);\n  // this.cameras[5].rotateBy(0, Math.PI, Math.PI);\n  // this.cameras[1].rotateBy(0, Math.PI, -Math.PI/2);\n  // this.cameras[4].rotateBy(0, Math.PI, 0);\n  // this.cameras[0].rotateBy(0, Math.PI, Math.PI/2);\n  \n  RenderSet.call(this)\n}\nutil.inherits(MyRenderSet, RenderSet)\n\nMyRenderSet.prototype.render = function (gl) {\n  for (var ff = 0; ff < 1; ++ff) {\n    this.framebuffers.bind(ff);\n    this.camera = this.cameras[ff];\n    RenderSet.prototype.render.call(this, gl);\n  }\n  this.framebuffers.unbind();\n}\n\n\nfunction MyFramebuffer(size, opt_depth) {\n  var faceTargets = [\n    gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n    gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n    gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n    gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n    gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n    gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];\n\n  this.size = size;\n  this.depth = opt_depth;\n  var tex = {\n    texture : twgl.createTexture(gl, {\n      target : gl.TEXTURE_2D,\n      width  : this.size,\n      height : this.size,\n      min    : gl.LINEAR,\n      mag    : gl.LINEAR,\n      format : gl.RGBA,\n      type   : gl.UNSIGNED_BYTE,\n      wrapS  : gl.CLAMP_TO_EDGE,\n      wrapT  : gl.CLAMP_TO_EDGE\n    })\n  }\n  if (this.depth) {\n    var db = gl.createRenderbuffer();\n    gl.bindRenderbuffer(gl.RENDERBUFFER, db);\n    gl.renderbufferStorage(\n        gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.size, this.size);\n  }\n  this.framebuffers = [];\n  for (var ff = 0; ff < 1; ++ff) {\n    var fb = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        tex.texture,\n        0);\n    if (this.depth) {\n      gl.framebufferRenderbuffer(\n          gl.FRAMEBUFFER,\n          gl.DEPTH_ATTACHMENT,\n          gl.RENDERBUFFER,\n          db);\n    }\n    var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (status != gl.FRAMEBUFFER_COMPLETE) {\n      throw(\"gl.checkFramebufferStatus() returned \" + WebGLDebugUtils.glEnumToString(status));\n    }\n    this.framebuffers.push(fb);\n  }\n  gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n  this.texture = tex;\n}\n\nMyFramebuffer.prototype.bind = function(face) {\n  gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffers[face]);\n  gl.viewport(0, 0, this.size, this.size);\n};\n\nMyFramebuffer.prototype.unbind = function() {\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.viewport(\n      0, 0,\n      gl.drawingBufferWidth || gl.canvas.width,\n      gl.drawingBufferHeight || gl.canvas.height);\n};\n\n\nvar myFBO = new MyFramebuffer(1024, true);\nmyFBO.unbind()\n\n;(function () {\n\n  \n  var myRenderSet = new MyRenderSet(myFBO)\n\n  var shader = new Shader(function () {\n    return (\n      '  gl_Position = position; \\n' +\n      '  v_position  = inverse_camera * position; \\n'\n    )\n  }, function () {\n    return (\n      '  gl_FragColor = vec4(                                               \\n' +\n      '   (v_position.x + 1.0) / 2.0,                                       \\n' +\n      '   (v_position.y + 1.0) / 2.0,                                       \\n' +\n      '   (v_position.z + 1.0) / 2.0,                                       \\n' +\n      '   1.0);                                                             \\n'\n    )\n    \n  })\n  shader.attributes.position    = 'vec4';\n  shader.vertex_uniforms.inverse_camera = 'mat4';\n  shader.varyings.v_position    = 'vec4';\n\n  var plate = new Plate(shader);\n  plate.add({z: -.5})\n  \n  var uniforms = {};\n  var mat1 = m4.identity(new Float32Array(16));\n  var mat2 = m4.identity(new Float32Array(16));\n  var mat3 = m4.identity(new Float32Array(16));\n  \n  \n  myRenderSet.addRenderable({\n    before : function () {\n      gl.clearColor(0,0,0,0);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n    },\n    renderOrder : 0\n  })\n\n  myRenderSet.addRenderable({\n    renderOrder: 11,\n    render : function (gl) {\n      gl.disable(gl.DEPTH_TEST);\n      \n      gl.enable(gl.BLEND);\n      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n\n      myRenderSet.camera.computeMatrix()\n      m4.inverse(myRenderSet.camera.perspective, mat1);\n      m4.inverse(myRenderSet.camera.skyorientation, mat2);\n      m4.multiply(mat1, mat2, mat3);\n      uniforms.inverse_camera = mat3;\n\n      var geom = plate.getGeometry(gl);\n      plate.drawPrep(geom, uniforms);\n      geom.draw();\n\n      gl.disable(gl.BLEND);\n      gl.enable(gl.DEPTH_TEST);\n    }\n  })\n  \n  myRenderSet.addRenderable(quads)\n\n  screen.addRenderable({\n    before : function () {\n      gl.clearColor(0,0,0,0);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n    },\n    renderOrder : 0\n  })\n  \n  screen.addRenderable({\n    renderOrder : 20,\n    render : function (gl) {\n      myRenderSet.render(gl)\n    }\n  })\n\n}())\n  \n;(function () {\n  \n  var shader = new Shader(function () {\n    return (\n      '  v_pos       = position; \\n' +\n      '  gl_Position = camera * vec4(position.x / 4.0, position.y / 4.0, 1.5, 1.0); \\n'\n    ) \n  }, function () {\n    return (\n      '  gl_FragColor = texture2D(                            \\n'+\n      '      texture,                                         \\n'+\n      '      vec2(v_pos.x / 2.0 + 0.5, v_pos.y / 2.0 + 0.5)); \\n'\n    )\n  })\n  shader.attributes.position              = 'vec4';\n  shader.fragment_uniforms.texture        = 'sampler2D';\n  shader.vertex_uniforms.camera           = 'mat4';\n  shader.varyings.v_pos                   = 'vec4';\n  \n  var plate = new Plate(shader);\n  plate.textureData = {texture : myFBO.texture}\n  plate.add({z: 1})\n  \n  var uniforms = {};\n\n  var inverse = m4.identity(new Float32Array(16));\n  \n  \n  screen.addRenderable({\n    renderOrder : 30,\n    render : function (gl) {\n      gl.disable(gl.DEPTH_TEST);\n      gl.enable(gl.BLEND);\n      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n      camera.computeMatrix()\n      // m4.inverse(camera.skymatrix, inverse);\n      uniforms.camera = camera.matrix;\n      uniforms.texture = plate.textureData.texture.texture;\n      var geom = plate.getGeometry(gl);\n      plate.drawPrep(geom, uniforms);\n      geom.draw();\n      gl.disable(gl.BLEND);\n      gl.enable(gl.DEPTH_TEST);\n    }\n  })\n\n}());\n\nscreen.beginFrameRendering(false)\n\n\nfunction click(x, y) {\n  console.log(Math.floor(x), Math.floor(y))\n}\n\ndocument.getElementById('canvas').addEventListener('click', function (e) {\n  var rect = document.getElementById('canvas').getBoundingClientRect()\n  click((e.clientX - rect.left) / rect.width * camera.frameWidth, (e.clientY - rect.top) / rect.height * camera.frameHeight)\n})\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./examples/picking/index.js\n ** module id = 0\n ** module chunks = 1\n **/"],"sourceRoot":""}