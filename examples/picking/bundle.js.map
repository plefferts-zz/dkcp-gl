{"version":3,"sources":["webpack:///picking/bundle.js","webpack:///./examples/picking/index.js"],"names":["webpackJsonp","module","exports","__webpack_require__","getRenderable","identity","m4","Float32Array","Renderable","renderOrder","getUniforms","renderSet","screen","camera","computeMatrix","camera2","hit_test","factory","maxColors","colorAllocation","Allocation","Float","shader","Shader","attributes","position","color","varyings","f_color","f_hit_color","hit_color","fragment_uniforms","vertex_uniforms","m","Model","this","addAttribute","i","item","vertices","add","uniforms","colors","buffer","MyRenderSet","framebuffers","RenderSet","call","MyFramebuffer","size","opt_depth","depth","tex","texture","twgl","createTexture","gl","target","TEXTURE_2D","width","height","min","LINEAR","mag","format","RGBA","type","UNSIGNED_BYTE","wrapS","CLAMP_TO_EDGE","wrapT","db","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","ff","fb","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","DEPTH_ATTACHMENT","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","WebGLDebugUtils","glEnumToString","push","click","x","y","myRenderSet","render","mousemove","mousex","mousey","DkcpGl","Plate","shaders","util","main","BasicCamera","canvas","document","getElementById","frameRate","element","wasd","delta","theta","Math","PI","square","z","w","red","id","green","blue","white","yellow","cyan","magenta","black","quads","addRenderable","allocations","inherits","prototype","clickx","clicky","bind","zoom","max","frameWidth","frameHeight","dst","translate","scaling","unbind","face","viewport","drawingBufferWidth","drawingBufferHeight","myFBO","plate","before","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","lastarr","arr","Uint8Array","readPixels","Array","slice","join","console","log","disable","DEPTH_TEST","enable","BLEND","blendEquationSeparate","FUNC_ADD","blendFuncSeparate","ONE_MINUS_DST_ALPHA","DST_ALPHA","ONE","geom","getGeometry","drawPrep","draw","v_pos","textureData","matrix","beginFrameRendering","on","addEventListener","e","rect","getBoundingClientRect","clientX","left","clientY","top"],"mappings":"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","file":"picking/bundle.js","sourcesContent":["webpackJsonp([1],[\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar twgl              = __webpack_require__(7)\n\tvar m4                = __webpack_require__(7).m4\n\tvar DkcpGl            = __webpack_require__(1)\n\t\n\tvar Renderable        = DkcpGl.Renderable\n\tvar Model             = DkcpGl.Model\n\tvar Plate             = DkcpGl.Plate\n\tvar shaders           = DkcpGl.shaders\n\tvar Shader            = DkcpGl.Shader\n\tvar Allocation        = DkcpGl.Allocation\n\t\n\tvar util        = __webpack_require__(3)\n\tvar RenderSet   = DkcpGl.RenderSet\n\tvar BasicCamera = DkcpGl.camera.BasicCamera\n\t\n\tvar main = new DkcpGl({\n\t  canvas : document.getElementById('canvas'),\n\t  frameRate : {\n\t    element : document.getElementById('framerate')\n\t  },\n\t  wasd : {\n\t    document : document,\n\t    delta : .05,\n\t    theta : -Math.PI / 120\n\t  }\n\t})\n\tvar camera = main.camera;\n\tvar screen = main.screen;\n\tvar gl     = main.screen.gl;\n\t\n\tfunction getRenderable() {\n\t  var identity = m4.identity(new Float32Array(16));\n\t  return new Renderable({\n\t    renderOrder : 10,\n\t    getUniforms : function (renderSet) {\n\t      if (renderSet == screen) {\n\t        return {\n\t          camera : camera.computeMatrix(),\n\t          camera2 : identity,\n\t          hit_test : 0\n\t        }\n\t      }\n\t      return {\n\t        camera : renderSet.camera.computeMatrix(),\n\t        camera2 : renderSet.camera2,\n\t        hit_test : 1\n\t        \n\t      }\n\t    },\n\t    factory : function () {\n\t      \n\t      var maxColors = 100\n\t      var colorAllocation    = new Allocation.Float(maxColors, 4)\n\t      \n\t      var shader = new Shader(function () {\n\t        return '  gl_Position = camera2 * camera * position; \\n' + \n\t               '  f_hit_color = colors[int(hit_color)];      \\n' + \n\t               '  f_color = colors[int(color)];              \\n'\n\t      }, function () {\n\t        return '  if (hit_test > 0) {            \\n' + \n\t               '    gl_FragColor = f_hit_color;  \\n' +\n\t               '   } else {                      \\n' +\n\t               '    gl_FragColor = f_color;      \\n' +\n\t               '   }                             \\n'\n\t      })\n\t      shader.attributes.position   = 'vec4';\n\t      shader.attributes.color      = 'float';\n\t      shader.varyings.f_color      = 'vec4';\n\t      shader.varyings.f_hit_color  = 'vec4';\n\t      shader.attributes.hit_color  = 'float';\n\t      shader.fragment_uniforms.hit_test = 'int';\n\t      shader.vertex_uniforms.camera = 'mat4';\n\t      shader.vertex_uniforms.camera2 = 'mat4';\n\t      shader.vertex_uniforms['colors[' + maxColors + ']'] = 'vec4';\n\t\n\t      var m = new Model(this, shader, 100)\n\t      m.addAttribute('position', 4, 'Float32Array', function (i, item) {\n\t        return item.vertices[i]\n\t      });\n\t      \n\t      m.addAttribute('color', 1, 'Float32Array', function (i, item) {\n\t        return [\n\t          colorAllocation.add(item.color, item, function () {\n\t            return item.color.color\n\t          })\n\t        ]\n\t      });\n\t\n\t      m.addAttribute('hit_color', 1, 'Float32Array', function (i, item) {\n\t        return [\n\t          colorAllocation.add(item.hit_color, item, function () {\n\t            return item.hit_color.color\n\t          })\n\t        ]\n\t      });\n\t  \n\t      m.uniforms.colors = colorAllocation.buffer;\n\t  \n\t      return m\n\t    }\n\t  })\n\t}\n\t\n\tvar square = function (x, y, z, w) {\n\t  return [\n\t    [x - w,  y - w, z, 1],\n\t    [x - w,  y + w, z, 1],\n\t    [x + w,  y - w, z, 1],\n\t    [x + w,  y + w, z, 1]\n\t  ]\n\t}\n\t\n\tvar red     = {id: 'red',     color: [1, 0, 0, 1]}\n\tvar green   = {id: 'green',   color: [0, 1, 0, 1]}\n\tvar blue    = {id: 'blue',    color: [0, 0, 1, 1]}\n\tvar white   = {id: 'white',   color: [1, 1, 1, 1]}\n\tvar yellow  = {id: 'yellow',  color: [1, 1, 0, 1]}\n\tvar cyan    = {id: 'cyan',    color: [0, 1, 1, 1]}\n\tvar magenta = {id: 'magenta', color: [1, 0, 1, 1]}\n\tvar black   = {id: 'black',   color: [0, 0, 0, 1]}\n\t\n\t  \n\tvar quads  = getRenderable()\n\tscreen.addRenderable(quads)\n\tquads.add({\n\t  color : red,\n\t  hit_color : cyan,\n\t  allocations : {},\n\t  vertices : square(.25, 0, .7, .05)\n\t})\n\tquads.add({\n\t  color : green,\n\t  hit_color : magenta,\n\t  allocations : {},\n\t  vertices : square(0, .25, .7, .05)\n\t})\n\tquads.add({\n\t  color : blue,\n\t  hit_color : yellow,\n\t  allocations : {},\n\t  vertices : square(0, 0, .9, .05)\n\t})\n\tquads.add({\n\t  color : white,\n\t  hit_color : black,\n\t  allocations : {},\n\t  vertices : square(0, 0, .7, .01)\n\t})\n\t\n\tfunction MyRenderSet(framebuffers) {\n\t\n\t  this.framebuffers = framebuffers;\n\t  \n\t  RenderSet.call(this)\n\t}\n\tutil.inherits(MyRenderSet, RenderSet)\n\t\n\tMyRenderSet.prototype.render = function (gl, clickx, clicky) {\n\t  for (var ff = 0; ff < 1; ++ff) {\n\t    this.framebuffers.bind(ff);\n\t    this.camera = main.camera\n\t    var zoom = Math.max(camera.frameWidth, camera.frameHeight);\n\t    var dst = new Float32Array(16)\n\t    m4.translate(m4.scaling([zoom, zoom, 1]), [\n\t      2 * (.5 - clickx / camera.frameWidth),\n\t      -2 * (.5 - clicky / camera.frameHeight),\n\t      0\n\t    ], dst)\n\t    this.camera2 = dst\n\t\n\t    RenderSet.prototype.render.call(this, gl);\n\t  }\n\t  this.framebuffers.unbind();\n\t}\n\t\n\t\n\tfunction MyFramebuffer(size, opt_depth) {\n\t  this.size = size;\n\t  this.depth = opt_depth;\n\t  var tex = {\n\t    texture : twgl.createTexture(gl, {\n\t      target : gl.TEXTURE_2D,\n\t      width  : this.size,\n\t      height : this.size,\n\t      min    : gl.LINEAR,\n\t      mag    : gl.LINEAR,\n\t      format : gl.RGBA,\n\t      type   : gl.UNSIGNED_BYTE,\n\t      wrapS  : gl.CLAMP_TO_EDGE,\n\t      wrapT  : gl.CLAMP_TO_EDGE\n\t    })\n\t  }\n\t  if (this.depth) {\n\t    var db = gl.createRenderbuffer();\n\t    gl.bindRenderbuffer(gl.RENDERBUFFER, db);\n\t    gl.renderbufferStorage(\n\t        gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.size, this.size);\n\t  }\n\t  this.framebuffers = [];\n\t  for (var ff = 0; ff < 1; ++ff) {\n\t    var fb = gl.createFramebuffer();\n\t    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n\t    gl.framebufferTexture2D(\n\t        gl.FRAMEBUFFER,\n\t        gl.COLOR_ATTACHMENT0,\n\t        gl.TEXTURE_2D,\n\t        tex.texture,\n\t        0);\n\t    if (this.depth) {\n\t      gl.framebufferRenderbuffer(\n\t          gl.FRAMEBUFFER,\n\t          gl.DEPTH_ATTACHMENT,\n\t          gl.RENDERBUFFER,\n\t          db);\n\t    }\n\t    var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\t    if (status != gl.FRAMEBUFFER_COMPLETE) {\n\t      throw(\"gl.checkFramebufferStatus() returned \" + WebGLDebugUtils.glEnumToString(status));\n\t    }\n\t    this.framebuffers.push(fb);\n\t  }\n\t  gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t  this.texture = tex;\n\t}\n\t\n\tMyFramebuffer.prototype.bind = function(face) {\n\t  gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffers[face]);\n\t  gl.viewport(0, 0, this.size, this.size);\n\t};\n\t\n\tMyFramebuffer.prototype.unbind = function() {\n\t  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t  gl.viewport(\n\t      0, 0,\n\t      gl.drawingBufferWidth || gl.canvas.width,\n\t      gl.drawingBufferHeight || gl.canvas.height);\n\t};\n\t\n\t\n\tvar myFBO = new MyFramebuffer(2, true);\n\tmyFBO.unbind()\n\t\n\tvar myRenderSet;\n\t\n\t;(function () {\n\t\n\t  \n\t myRenderSet = new MyRenderSet(myFBO)\n\t\n\t  var shader = new Shader(function () {\n\t    return (\n\t      '  gl_Position = position; \\n'\n\t    )\n\t  }, function () {\n\t    return (\n\t      '  gl_FragColor = vec4(0.5,0.5,0.5,1.0); \\n'\n\t    )\n\t    \n\t  })\n\t  shader.attributes.position    = 'vec4';\n\t\n\t  var plate = new Plate(shader);\n\t  plate.add({z: -.5})\n\t  \n\t  var uniforms = {};\n\t  var mat1 = m4.identity(new Float32Array(16));\n\t  var mat2 = m4.identity(new Float32Array(16));\n\t  var mat3 = m4.identity(new Float32Array(16));\n\t  \n\t  \n\t  myRenderSet.addRenderable({\n\t    before : function () {\n\t      gl.clearColor(0,0,0,0);\n\t      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t    },\n\t    renderOrder : 0\n\t  })\n\t  \n\t  var lastarr;\n\t  myRenderSet.addRenderable({\n\t    before : function () {\n\t      var arr = new Uint8Array(4 * 4)\n\t      gl.readPixels(0, 0, 2, 2, gl.RGBA, gl.UNSIGNED_BYTE, arr)\n\t      arr = Array.prototype.slice.call(arr, 0, 3)\n\t      if (arr.join(',') != lastarr) {\n\t        console.log(arr)\n\t      }\n\t      lastarr = arr.join(',')\n\t    },\n\t    renderOrder : 999\n\t  })\n\t  \n\t  myRenderSet.addRenderable({\n\t    renderOrder: 11,\n\t    render : function (gl) {\n\t      gl.disable(gl.DEPTH_TEST);\n\t      \n\t      gl.enable(gl.BLEND);\n\t      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n\t\n\t      var geom = plate.getGeometry(gl);\n\t      plate.drawPrep(geom, uniforms);\n\t      geom.draw();\n\t\n\t      gl.disable(gl.BLEND);\n\t      gl.enable(gl.DEPTH_TEST);\n\t    }\n\t  })\n\t  \n\t  myRenderSet.addRenderable(quads)\n\t\n\t  screen.addRenderable({\n\t    before : function () {\n\t      gl.clearColor(0,0,0,0);\n\t      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t    },\n\t    renderOrder : 0\n\t  })\n\t  \n\t}())\n\t  \n\t;(function () {\n\t  \n\t  var shader = new Shader(function () {\n\t    return (\n\t      '  v_pos       = position; \\n' +\n\t      '  gl_Position = camera * vec4(position.x / 4.0, position.y / 4.0, 1.5, 1.0); \\n'\n\t    ) \n\t  }, function () {\n\t    return (\n\t      '  gl_FragColor = texture2D(                            \\n'+\n\t      '      texture,                                         \\n'+\n\t      '      vec2(v_pos.x / 2.0 + 0.5, v_pos.y / 2.0 + 0.5)); \\n'\n\t    )\n\t  })\n\t  shader.attributes.position              = 'vec4';\n\t  shader.fragment_uniforms.texture        = 'sampler2D';\n\t  shader.vertex_uniforms.camera           = 'mat4';\n\t  shader.varyings.v_pos                   = 'vec4';\n\t  \n\t  var plate = new Plate(shader);\n\t  plate.textureData = {texture : myFBO.texture}\n\t  plate.add({z: 1})\n\t  \n\t  var uniforms = {};\n\t\n\t  var inverse = m4.identity(new Float32Array(16));\n\t  \n\t  \n\t  screen.addRenderable({\n\t    renderOrder : 30,\n\t    render : function (gl) {\n\t      gl.disable(gl.DEPTH_TEST);\n\t      gl.enable(gl.BLEND);\n\t      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n\t      camera.computeMatrix()\n\t      // m4.inverse(camera.skymatrix, inverse);\n\t      uniforms.camera = camera.matrix;\n\t      uniforms.texture = plate.textureData.texture.texture;\n\t      var geom = plate.getGeometry(gl);\n\t      plate.drawPrep(geom, uniforms);\n\t      geom.draw();\n\t      gl.disable(gl.BLEND);\n\t      gl.enable(gl.DEPTH_TEST);\n\t    }\n\t  })\n\t\n\t}());\n\t\n\tscreen.beginFrameRendering(false)\n\t\n\tvar mousex, mousey;\n\t\n\tscreen.on('moved', function () {\n\t  myRenderSet.render(gl, mousex, mousey)\n\t})\n\t\n\tfunction click(x, y) {\n\t  myRenderSet.render(gl, x - 1, y - 1)\n\t}\n\tfunction mousemove(x, y) {\n\t  myRenderSet.render(gl, mousex = x - 1, mousey = y - 1)\n\t}\n\t\n\tdocument.getElementById('canvas').addEventListener('click', function (e) {\n\t  var rect = document.getElementById('canvas').getBoundingClientRect()\n\t  click((e.clientX - rect.left) / rect.width * camera.frameWidth, (e.clientY - rect.top) / rect.height * camera.frameHeight)\n\t})\n\t\n\tdocument.getElementById('canvas').addEventListener('mousemove', function (e) {\n\t  var rect = document.getElementById('canvas').getBoundingClientRect()\n\t  mousemove((e.clientX - rect.left) / rect.width * camera.frameWidth, (e.clientY - rect.top) / rect.height * camera.frameHeight)\n\t})\n\n/***/ }\n]);\n\n\n/** WEBPACK FOOTER **\n ** picking/bundle.js\n **/","var twgl              = require('../../lib/twgl')\nvar m4                = require('../../lib/twgl').m4\nvar DkcpGl            = require('../../src/dkcp-gl')\n\nvar Renderable        = DkcpGl.Renderable\nvar Model             = DkcpGl.Model\nvar Plate             = DkcpGl.Plate\nvar shaders           = DkcpGl.shaders\nvar Shader            = DkcpGl.Shader\nvar Allocation        = DkcpGl.Allocation\n\nvar util        = require('util')\nvar RenderSet   = DkcpGl.RenderSet\nvar BasicCamera = DkcpGl.camera.BasicCamera\n\nvar main = new DkcpGl({\n  canvas : document.getElementById('canvas'),\n  frameRate : {\n    element : document.getElementById('framerate')\n  },\n  wasd : {\n    document : document,\n    delta : .05,\n    theta : -Math.PI / 120\n  }\n})\nvar camera = main.camera;\nvar screen = main.screen;\nvar gl     = main.screen.gl;\n\nfunction getRenderable() {\n  var identity = m4.identity(new Float32Array(16));\n  return new Renderable({\n    renderOrder : 10,\n    getUniforms : function (renderSet) {\n      if (renderSet == screen) {\n        return {\n          camera : camera.computeMatrix(),\n          camera2 : identity,\n          hit_test : 0\n        }\n      }\n      return {\n        camera : renderSet.camera.computeMatrix(),\n        camera2 : renderSet.camera2,\n        hit_test : 1\n        \n      }\n    },\n    factory : function () {\n      \n      var maxColors = 100\n      var colorAllocation    = new Allocation.Float(maxColors, 4)\n      \n      var shader = new Shader(function () {\n        return '  gl_Position = camera2 * camera * position; \\n' + \n               '  f_hit_color = colors[int(hit_color)];      \\n' + \n               '  f_color = colors[int(color)];              \\n'\n      }, function () {\n        return '  if (hit_test > 0) {            \\n' + \n               '    gl_FragColor = f_hit_color;  \\n' +\n               '   } else {                      \\n' +\n               '    gl_FragColor = f_color;      \\n' +\n               '   }                             \\n'\n      })\n      shader.attributes.position   = 'vec4';\n      shader.attributes.color      = 'float';\n      shader.varyings.f_color      = 'vec4';\n      shader.varyings.f_hit_color  = 'vec4';\n      shader.attributes.hit_color  = 'float';\n      shader.fragment_uniforms.hit_test = 'int';\n      shader.vertex_uniforms.camera = 'mat4';\n      shader.vertex_uniforms.camera2 = 'mat4';\n      shader.vertex_uniforms['colors[' + maxColors + ']'] = 'vec4';\n\n      var m = new Model(this, shader, 100)\n      m.addAttribute('position', 4, 'Float32Array', function (i, item) {\n        return item.vertices[i]\n      });\n      \n      m.addAttribute('color', 1, 'Float32Array', function (i, item) {\n        return [\n          colorAllocation.add(item.color, item, function () {\n            return item.color.color\n          })\n        ]\n      });\n\n      m.addAttribute('hit_color', 1, 'Float32Array', function (i, item) {\n        return [\n          colorAllocation.add(item.hit_color, item, function () {\n            return item.hit_color.color\n          })\n        ]\n      });\n  \n      m.uniforms.colors = colorAllocation.buffer;\n  \n      return m\n    }\n  })\n}\n\nvar square = function (x, y, z, w) {\n  return [\n    [x - w,  y - w, z, 1],\n    [x - w,  y + w, z, 1],\n    [x + w,  y - w, z, 1],\n    [x + w,  y + w, z, 1]\n  ]\n}\n\nvar red     = {id: 'red',     color: [1, 0, 0, 1]}\nvar green   = {id: 'green',   color: [0, 1, 0, 1]}\nvar blue    = {id: 'blue',    color: [0, 0, 1, 1]}\nvar white   = {id: 'white',   color: [1, 1, 1, 1]}\nvar yellow  = {id: 'yellow',  color: [1, 1, 0, 1]}\nvar cyan    = {id: 'cyan',    color: [0, 1, 1, 1]}\nvar magenta = {id: 'magenta', color: [1, 0, 1, 1]}\nvar black   = {id: 'black',   color: [0, 0, 0, 1]}\n\n  \nvar quads  = getRenderable()\nscreen.addRenderable(quads)\nquads.add({\n  color : red,\n  hit_color : cyan,\n  allocations : {},\n  vertices : square(.25, 0, .7, .05)\n})\nquads.add({\n  color : green,\n  hit_color : magenta,\n  allocations : {},\n  vertices : square(0, .25, .7, .05)\n})\nquads.add({\n  color : blue,\n  hit_color : yellow,\n  allocations : {},\n  vertices : square(0, 0, .9, .05)\n})\nquads.add({\n  color : white,\n  hit_color : black,\n  allocations : {},\n  vertices : square(0, 0, .7, .01)\n})\n\nfunction MyRenderSet(framebuffers) {\n\n  this.framebuffers = framebuffers;\n  \n  RenderSet.call(this)\n}\nutil.inherits(MyRenderSet, RenderSet)\n\nMyRenderSet.prototype.render = function (gl, clickx, clicky) {\n  for (var ff = 0; ff < 1; ++ff) {\n    this.framebuffers.bind(ff);\n    this.camera = main.camera\n    var zoom = Math.max(camera.frameWidth, camera.frameHeight);\n    var dst = new Float32Array(16)\n    m4.translate(m4.scaling([zoom, zoom, 1]), [\n      2 * (.5 - clickx / camera.frameWidth),\n      -2 * (.5 - clicky / camera.frameHeight),\n      0\n    ], dst)\n    this.camera2 = dst\n\n    RenderSet.prototype.render.call(this, gl);\n  }\n  this.framebuffers.unbind();\n}\n\n\nfunction MyFramebuffer(size, opt_depth) {\n  this.size = size;\n  this.depth = opt_depth;\n  var tex = {\n    texture : twgl.createTexture(gl, {\n      target : gl.TEXTURE_2D,\n      width  : this.size,\n      height : this.size,\n      min    : gl.LINEAR,\n      mag    : gl.LINEAR,\n      format : gl.RGBA,\n      type   : gl.UNSIGNED_BYTE,\n      wrapS  : gl.CLAMP_TO_EDGE,\n      wrapT  : gl.CLAMP_TO_EDGE\n    })\n  }\n  if (this.depth) {\n    var db = gl.createRenderbuffer();\n    gl.bindRenderbuffer(gl.RENDERBUFFER, db);\n    gl.renderbufferStorage(\n        gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.size, this.size);\n  }\n  this.framebuffers = [];\n  for (var ff = 0; ff < 1; ++ff) {\n    var fb = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        tex.texture,\n        0);\n    if (this.depth) {\n      gl.framebufferRenderbuffer(\n          gl.FRAMEBUFFER,\n          gl.DEPTH_ATTACHMENT,\n          gl.RENDERBUFFER,\n          db);\n    }\n    var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (status != gl.FRAMEBUFFER_COMPLETE) {\n      throw(\"gl.checkFramebufferStatus() returned \" + WebGLDebugUtils.glEnumToString(status));\n    }\n    this.framebuffers.push(fb);\n  }\n  gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n  this.texture = tex;\n}\n\nMyFramebuffer.prototype.bind = function(face) {\n  gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffers[face]);\n  gl.viewport(0, 0, this.size, this.size);\n};\n\nMyFramebuffer.prototype.unbind = function() {\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.viewport(\n      0, 0,\n      gl.drawingBufferWidth || gl.canvas.width,\n      gl.drawingBufferHeight || gl.canvas.height);\n};\n\n\nvar myFBO = new MyFramebuffer(2, true);\nmyFBO.unbind()\n\nvar myRenderSet;\n\n;(function () {\n\n  \n myRenderSet = new MyRenderSet(myFBO)\n\n  var shader = new Shader(function () {\n    return (\n      '  gl_Position = position; \\n'\n    )\n  }, function () {\n    return (\n      '  gl_FragColor = vec4(0.5,0.5,0.5,1.0); \\n'\n    )\n    \n  })\n  shader.attributes.position    = 'vec4';\n\n  var plate = new Plate(shader);\n  plate.add({z: -.5})\n  \n  var uniforms = {};\n  var mat1 = m4.identity(new Float32Array(16));\n  var mat2 = m4.identity(new Float32Array(16));\n  var mat3 = m4.identity(new Float32Array(16));\n  \n  \n  myRenderSet.addRenderable({\n    before : function () {\n      gl.clearColor(0,0,0,0);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n    },\n    renderOrder : 0\n  })\n  \n  var lastarr;\n  myRenderSet.addRenderable({\n    before : function () {\n      var arr = new Uint8Array(4 * 4)\n      gl.readPixels(0, 0, 2, 2, gl.RGBA, gl.UNSIGNED_BYTE, arr)\n      arr = Array.prototype.slice.call(arr, 0, 3)\n      if (arr.join(',') != lastarr) {\n        console.log(arr)\n      }\n      lastarr = arr.join(',')\n    },\n    renderOrder : 999\n  })\n  \n  myRenderSet.addRenderable({\n    renderOrder: 11,\n    render : function (gl) {\n      gl.disable(gl.DEPTH_TEST);\n      \n      gl.enable(gl.BLEND);\n      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n\n      var geom = plate.getGeometry(gl);\n      plate.drawPrep(geom, uniforms);\n      geom.draw();\n\n      gl.disable(gl.BLEND);\n      gl.enable(gl.DEPTH_TEST);\n    }\n  })\n  \n  myRenderSet.addRenderable(quads)\n\n  screen.addRenderable({\n    before : function () {\n      gl.clearColor(0,0,0,0);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n    },\n    renderOrder : 0\n  })\n  \n}())\n  \n;(function () {\n  \n  var shader = new Shader(function () {\n    return (\n      '  v_pos       = position; \\n' +\n      '  gl_Position = camera * vec4(position.x / 4.0, position.y / 4.0, 1.5, 1.0); \\n'\n    ) \n  }, function () {\n    return (\n      '  gl_FragColor = texture2D(                            \\n'+\n      '      texture,                                         \\n'+\n      '      vec2(v_pos.x / 2.0 + 0.5, v_pos.y / 2.0 + 0.5)); \\n'\n    )\n  })\n  shader.attributes.position              = 'vec4';\n  shader.fragment_uniforms.texture        = 'sampler2D';\n  shader.vertex_uniforms.camera           = 'mat4';\n  shader.varyings.v_pos                   = 'vec4';\n  \n  var plate = new Plate(shader);\n  plate.textureData = {texture : myFBO.texture}\n  plate.add({z: 1})\n  \n  var uniforms = {};\n\n  var inverse = m4.identity(new Float32Array(16));\n  \n  \n  screen.addRenderable({\n    renderOrder : 30,\n    render : function (gl) {\n      gl.disable(gl.DEPTH_TEST);\n      gl.enable(gl.BLEND);\n      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n      camera.computeMatrix()\n      // m4.inverse(camera.skymatrix, inverse);\n      uniforms.camera = camera.matrix;\n      uniforms.texture = plate.textureData.texture.texture;\n      var geom = plate.getGeometry(gl);\n      plate.drawPrep(geom, uniforms);\n      geom.draw();\n      gl.disable(gl.BLEND);\n      gl.enable(gl.DEPTH_TEST);\n    }\n  })\n\n}());\n\nscreen.beginFrameRendering(false)\n\nvar mousex, mousey;\n\nscreen.on('moved', function () {\n  myRenderSet.render(gl, mousex, mousey)\n})\n\nfunction click(x, y) {\n  myRenderSet.render(gl, x - 1, y - 1)\n}\nfunction mousemove(x, y) {\n  myRenderSet.render(gl, mousex = x - 1, mousey = y - 1)\n}\n\ndocument.getElementById('canvas').addEventListener('click', function (e) {\n  var rect = document.getElementById('canvas').getBoundingClientRect()\n  click((e.clientX - rect.left) / rect.width * camera.frameWidth, (e.clientY - rect.top) / rect.height * camera.frameHeight)\n})\n\ndocument.getElementById('canvas').addEventListener('mousemove', function (e) {\n  var rect = document.getElementById('canvas').getBoundingClientRect()\n  mousemove((e.clientX - rect.left) / rect.width * camera.frameWidth, (e.clientY - rect.top) / rect.height * camera.frameHeight)\n})\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./examples/picking/index.js\n ** module id = 0\n ** module chunks = 1\n **/"],"sourceRoot":""}