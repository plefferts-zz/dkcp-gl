{"version":3,"sources":["webpack:///picking/bundle.js","webpack:///./examples/picking/index.js"],"names":["webpackJsonp","module","exports","__webpack_require__","getRenderable","Renderable","before","gl","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","renderOrder","getUniforms","renderSet","console","log","camera","screen","computeMatrix","factory","maxColors","colorAllocation","Allocation","Float","shader","Shader","attributes","position","color","varyings","f_color","vertex_uniforms","m","Model","this","addAttribute","i","item","vertices","add","uniforms","colors","buffer","MyRenderSet","framebuffers","cameras","ff","c","push","BasicCamera","size","setFOV","rotateBy","Math","PI","RenderSet","call","MyFramebuffer","opt_depth","depth","tex","texture","twgl","createTexture","target","TEXTURE_2D","width","height","min","LINEAR","mag","format","RGBA","type","UNSIGNED_BYTE","wrapS","CLAMP_TO_EDGE","wrapT","db","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","fb","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","DEPTH_ATTACHMENT","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","click","x","y","floor","m4","DkcpGl","Plate","shaders","util","main","canvas","document","getElementById","frameRate","element","wasd","delta","theta","square","z","w","red","id","green","blue","white","quads","addRenderable","allocations","inherits","prototype","render","bind","unbind","face","viewport","drawingBufferWidth","drawingBufferHeight","myFBO","myRenderSet","inverse_camera","v_position","plate","identity","Float32Array","fragment_uniforms","v_pos","textureData","inverse","disable","DEPTH_TEST","enable","BLEND","blendEquationSeparate","FUNC_ADD","blendFuncSeparate","ONE_MINUS_DST_ALPHA","DST_ALPHA","ONE","skymatrix","geom","getGeometry","drawPrep","draw","beginFrameRendering","addEventListener","e","rect","getBoundingClientRect","clientX","left","frameWidth","clientY","top","frameHeight"],"mappings":"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","file":"picking/bundle.js","sourcesContent":["webpackJsonp([1],[\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar twgl              = __webpack_require__(7)\n\tvar m4                = __webpack_require__(7).m4\n\tvar DkcpGl            = __webpack_require__(1)\n\t\n\tvar Renderable        = DkcpGl.Renderable\n\tvar Model             = DkcpGl.Model\n\tvar Plate             = DkcpGl.Plate\n\tvar shaders           = DkcpGl.shaders\n\tvar Shader            = DkcpGl.Shader\n\tvar Allocation        = DkcpGl.Allocation\n\t\n\tvar util        = __webpack_require__(3)\n\tvar RenderSet   = DkcpGl.RenderSet\n\tvar BasicCamera = DkcpGl.camera.BasicCamera\n\t\n\tvar main = new DkcpGl({\n\t  canvas : document.getElementById('canvas'),\n\t  frameRate : {\n\t    element : document.getElementById('framerate')\n\t  },\n\t  wasd : {\n\t    document : document,\n\t    delta : .05,\n\t    theta : -Math.PI / 120\n\t  }\n\t})\n\tvar camera = main.camera;\n\tvar screen = main.screen;\n\tvar gl     = main.screen.gl;\n\t\n\tfunction getRenderable() {\n\t  return new Renderable({\n\t    before : function () {\n\t      gl.clearColor(0,0,0,0);\n\t      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t    },\n\t    renderOrder : 1,\n\t    getUniforms : function (renderSet) {\n\t      console.log(renderSet)\n\t      return {\n\t        camera : renderSet == screen ? camera.computeMatrix() : renderSet.camera.computeMatrix()\n\t      }\n\t    },\n\t    factory : function () {\n\t      \n\t      var maxColors = 100\n\t      var colorAllocation = new Allocation.Float(maxColors, 4)\n\t\n\t      var shader = new Shader(function () {\n\t        return '  gl_Position = camera * position; \\n' + \n\t               '  f_color = colors[int(color)]; \\n'\n\t      }, function () {\n\t        return '  gl_FragColor = f_color ;\\n'\n\t      })\n\t      shader.attributes.position   = 'vec4';\n\t      shader.attributes.color      = 'float';\n\t      shader.varyings.f_color      = 'vec4';\n\t      shader.vertex_uniforms.camera = 'mat4';\n\t      shader.vertex_uniforms['colors[' + maxColors + ']'] = 'vec4';\n\t\n\t      var m = new Model(this, shader, 100)\n\t      m.addAttribute('position', 4, 'Float32Array', function (i, item) {\n\t        return item.vertices[i]\n\t      });\n\t      \n\t      m.addAttribute('color', 1, 'Float32Array', function (i, item) {\n\t        return [\n\t          colorAllocation.add(item.color, item, function () {\n\t            return item.color.color\n\t          })\n\t        ]\n\t      });\n\t  \n\t      m.uniforms.colors = colorAllocation.buffer;\n\t  \n\t      return m\n\t    }\n\t  })\n\t}\n\t\n\tvar square = function (x, y, z, w) {\n\t  return [\n\t    [x - w,  y - w, z, 1],\n\t    [x - w,  y + w, z, 1],\n\t    [x + w,  y - w, z, 1],\n\t    [x + w,  y + w, z, 1]\n\t  ]\n\t}\n\t\n\tvar red   = {id: 'red',   color: [1, 0, 0, 1]}\n\tvar green = {id: 'green', color: [0, 1, 0, 1]}\n\tvar blue  = {id: 'blue',  color: [0, 0, 1, 1]}\n\tvar white = {id: 'white', color: [1, 1, 1, 1]}\n\t\n\t  \n\tvar quads  = getRenderable()\n\tscreen.addRenderable(quads)\n\tquads.add({\n\t  color : red,\n\t  allocations : {},\n\t  vertices : square(.25, 0, .7, .05)\n\t})\n\tquads.add({\n\t  color : green,\n\t  allocations : {},\n\t  vertices : square(0, .25, .7, .05)\n\t})\n\tquads.add({\n\t  color : blue,\n\t  allocations : {},\n\t  vertices : square(0, 0, .9, .05)\n\t})\n\tquads.add({\n\t  color : white,\n\t  allocations : {},\n\t  vertices : square(0, 0, .7, .01)\n\t})\n\t\n\tfunction MyRenderSet(framebuffers) {\n\t\n\t  this.framebuffers = framebuffers;\n\t  this.cameras = [];\n\t  this.camera = null;\n\t  \n\t  for (var ff = 0; ff < 1; ++ff) {\n\t    var c;\n\t    this.cameras.push(c = new BasicCamera(framebuffers.size, framebuffers.size, .1, 4096));\n\t    c.setFOV(90, true);\n\t  }\n\t  \n\t  // this.cameras[2].rotateBy(0, Math.PI/2, 0);\n\t  // this.cameras[3].rotateBy(0, -Math.PI/2, 0);\n\t  // this.cameras[5].rotateBy(0, Math.PI, Math.PI);\n\t  // this.cameras[1].rotateBy(0, Math.PI, -Math.PI/2);\n\t  // this.cameras[4].rotateBy(0, Math.PI, 0);\n\t  // this.cameras[0].rotateBy(0, Math.PI, Math.PI/2);\n\t\n\t  this.cameras[0].rotateBy(0, Math.PI, 0);\n\t  \n\t  RenderSet.call(this)\n\t}\n\tutil.inherits(MyRenderSet, RenderSet)\n\t\n\tMyRenderSet.prototype.render = function (gl) {\n\t  for (var ff = 0; ff < 1; ++ff) {\n\t    this.framebuffers.bind(ff);\n\t    this.camera = this.cameras[ff];\n\t    RenderSet.prototype.render.call(this, gl);\n\t  }\n\t  this.framebuffers.unbind();\n\t}\n\t\n\tfunction MyFramebuffer(size, opt_depth) {\n\t  this.size = size;\n\t  this.depth = opt_depth;\n\t  var tex = {\n\t    texture : twgl.createTexture(gl, {\n\t      target : gl.TEXTURE_2D,\n\t      width  : this.size,\n\t      height : this.size,\n\t      min    : gl.LINEAR,\n\t      mag    : gl.LINEAR,\n\t      format : gl.RGBA,\n\t      type   : gl.UNSIGNED_BYTE,\n\t      wrapS  : gl.CLAMP_TO_EDGE,\n\t      wrapT  : gl.CLAMP_TO_EDGE\n\t    })\n\t  }\n\t  if (this.depth) {\n\t    var db = gl.createRenderbuffer();\n\t    gl.bindRenderbuffer(gl.RENDERBUFFER, db);\n\t    gl.renderbufferStorage(\n\t        gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.size, this.size);\n\t  }\n\t  this.framebuffers = [];\n\t  for (var ff = 0; ff < 1; ++ff) {\n\t    var fb = gl.createFramebuffer();\n\t    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n\t    gl.framebufferTexture2D(\n\t        gl.FRAMEBUFFER,\n\t        gl.COLOR_ATTACHMENT0,\n\t        gl.TEXTURE_2D,\n\t        tex.texture,\n\t        0);\n\t    if (this.depth) {\n\t      gl.framebufferRenderbuffer(\n\t          gl.FRAMEBUFFER,\n\t          gl.DEPTH_ATTACHMENT,\n\t          gl.RENDERBUFFER,\n\t          db);\n\t    }\n\t    var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\t    if (status != gl.FRAMEBUFFER_COMPLETE) {\n\t      throw(\"gl.checkFramebufferStatus() returned \" + status);\n\t    }\n\t    this.framebuffers.push(fb);\n\t  }\n\t  gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t  this.texture = tex;\n\t}\n\t\n\tMyFramebuffer.prototype.bind = function(face) {\n\t  gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffers[face]);\n\t  gl.viewport(0, 0, this.size, this.size);\n\t};\n\t\n\tMyFramebuffer.prototype.unbind = function() {\n\t  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t  gl.viewport(\n\t      0, 0,\n\t      gl.drawingBufferWidth || gl.canvas.width,\n\t      gl.drawingBufferHeight || gl.canvas.height);\n\t};\n\t\n\t\n\tvar myFBO = new MyFramebuffer(1024, true);\n\tmyFBO.unbind()\n\t\n\t;(function () {\n\t\n\t  \n\t  var myRenderSet = new MyRenderSet(myFBO)\n\t\n\t  var shader = new Shader(function () {\n\t    return (\n\t      '  gl_Position = position; \\n' +\n\t      '  v_position  = inverse_camera * position; \\n'\n\t    )\n\t  }, function () {\n\t    return (\n\t      '  gl_FragColor = vec4(                                               \\n' +\n\t      '   (v_position.x + 1.0) / 2.0,                                       \\n' +\n\t      '   (v_position.y + 1.0) / 2.0,                                       \\n' +\n\t      '   (v_position.z + 1.0) / 2.0,                                       \\n' +\n\t      '   1.0);                                                             \\n'\n\t    )\n\t    \n\t  })\n\t  shader.attributes.position    = 'vec4';\n\t  shader.vertex_uniforms.inverse_camera = 'mat4';\n\t  shader.varyings.v_position    = 'vec4';\n\t\n\t  var plate = new Plate(shader);\n\t  plate.add({z: -.5})\n\t  \n\t  var uniforms = {};\n\t  var mat1 = m4.identity(new Float32Array(16));\n\t  var mat2 = m4.identity(new Float32Array(16));\n\t  var mat3 = m4.identity(new Float32Array(16));\n\t  \n\t  myRenderSet.addRenderable(quads)\n\t  // myRenderSet.addRenderable({\n\t  //   renderOrder: 10,\n\t  //   render : function (gl) {\n\t  //     gl.disable(gl.DEPTH_TEST);\n\t  //\n\t  //     myRenderSet.camera.computeMatrix()\n\t  //     m4.inverse(myRenderSet.camera.perspective, mat1);\n\t  //     m4.inverse(myRenderSet.camera.skyorientation, mat2);\n\t  //     m4.multiply(mat1, mat2, mat3);\n\t  //     uniforms.inverse_camera = mat3;\n\t  //\n\t  //     var geom = plate.getGeometry(gl);\n\t  //     plate.drawPrep(geom, uniforms);\n\t  //     geom.draw();\n\t  //\n\t  //     gl.enable(gl.DEPTH_TEST);\n\t  //   }\n\t  // })\n\t  \n\t\n\t  screen.addRenderable({\n\t    renderOrder : 2,\n\t    render : function (gl) {\n\t      myRenderSet.render(gl)\n\t    }\n\t  })\n\t\n\t}())\n\t  \n\t;(function () {\n\t  \n\t  var shader = new Shader(function () {\n\t    return (\n\t      '  v_pos       = camera * position; \\n' +\n\t      '  gl_Position = vec4(position.x, position.y, 0.5, 1.0); \\n'\n\t    ) \n\t  }, function () {\n\t    return (\n\t      '  gl_FragColor = texture2D(                              \\n'+\n\t      '      texture,                                           \\n'+\n\t      '      vec2(v_pos.x, v_pos.y));                           \\n'\n\t    )\n\t  })\n\t  shader.attributes.position              = 'vec4';\n\t  shader.fragment_uniforms.texture        = 'sampler2D';\n\t  shader.vertex_uniforms.camera           = 'mat4';\n\t  shader.varyings.v_pos                   = 'vec4';\n\t  \n\t  var plate = new Plate(shader);\n\t  plate.textureData = {texture : myFBO.texture}\n\t  plate.add({z: 1})\n\t  \n\t  var uniforms = {};\n\t\n\t  var inverse = m4.identity(new Float32Array(16));\n\t  \n\t  \n\t  screen.addRenderable({\n\t    renderOrder : 3,\n\t    render : function (gl) {\n\t      gl.disable(gl.DEPTH_TEST);\n\t      gl.enable(gl.BLEND);\n\t      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n\t      camera.computeMatrix()\n\t      m4.inverse(camera.skymatrix, inverse);\n\t      uniforms.camera = inverse;\n\t      uniforms.texture = plate.textureData.texture.texture;\n\t      var geom = plate.getGeometry(gl);\n\t      plate.drawPrep(geom, uniforms);\n\t      geom.draw();\n\t      gl.disable(gl.BLEND);\n\t      gl.enable(gl.DEPTH_TEST);\n\t    }\n\t  })\n\t\n\t}());\n\t\n\tscreen.beginFrameRendering(false)\n\t\n\t\n\tfunction click(x, y) {\n\t  console.log(Math.floor(x), Math.floor(y))\n\t}\n\t\n\tdocument.getElementById('canvas').addEventListener('click', function (e) {\n\t  var rect = document.getElementById('canvas').getBoundingClientRect()\n\t  click((e.clientX - rect.left) / rect.width * camera.frameWidth, (e.clientY - rect.top) / rect.height * camera.frameHeight)\n\t})\n\n/***/ }\n]);\n\n\n/** WEBPACK FOOTER **\n ** picking/bundle.js\n **/","var twgl              = require('../../lib/twgl')\nvar m4                = require('../../lib/twgl').m4\nvar DkcpGl            = require('../../src/dkcp-gl')\n\nvar Renderable        = DkcpGl.Renderable\nvar Model             = DkcpGl.Model\nvar Plate             = DkcpGl.Plate\nvar shaders           = DkcpGl.shaders\nvar Shader            = DkcpGl.Shader\nvar Allocation        = DkcpGl.Allocation\n\nvar util        = require('util')\nvar RenderSet   = DkcpGl.RenderSet\nvar BasicCamera = DkcpGl.camera.BasicCamera\n\nvar main = new DkcpGl({\n  canvas : document.getElementById('canvas'),\n  frameRate : {\n    element : document.getElementById('framerate')\n  },\n  wasd : {\n    document : document,\n    delta : .05,\n    theta : -Math.PI / 120\n  }\n})\nvar camera = main.camera;\nvar screen = main.screen;\nvar gl     = main.screen.gl;\n\nfunction getRenderable() {\n  return new Renderable({\n    before : function () {\n      gl.clearColor(0,0,0,0);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n    },\n    renderOrder : 1,\n    getUniforms : function (renderSet) {\n      console.log(renderSet)\n      return {\n        camera : renderSet == screen ? camera.computeMatrix() : renderSet.camera.computeMatrix()\n      }\n    },\n    factory : function () {\n      \n      var maxColors = 100\n      var colorAllocation = new Allocation.Float(maxColors, 4)\n\n      var shader = new Shader(function () {\n        return '  gl_Position = camera * position; \\n' + \n               '  f_color = colors[int(color)]; \\n'\n      }, function () {\n        return '  gl_FragColor = f_color ;\\n'\n      })\n      shader.attributes.position   = 'vec4';\n      shader.attributes.color      = 'float';\n      shader.varyings.f_color      = 'vec4';\n      shader.vertex_uniforms.camera = 'mat4';\n      shader.vertex_uniforms['colors[' + maxColors + ']'] = 'vec4';\n\n      var m = new Model(this, shader, 100)\n      m.addAttribute('position', 4, 'Float32Array', function (i, item) {\n        return item.vertices[i]\n      });\n      \n      m.addAttribute('color', 1, 'Float32Array', function (i, item) {\n        return [\n          colorAllocation.add(item.color, item, function () {\n            return item.color.color\n          })\n        ]\n      });\n  \n      m.uniforms.colors = colorAllocation.buffer;\n  \n      return m\n    }\n  })\n}\n\nvar square = function (x, y, z, w) {\n  return [\n    [x - w,  y - w, z, 1],\n    [x - w,  y + w, z, 1],\n    [x + w,  y - w, z, 1],\n    [x + w,  y + w, z, 1]\n  ]\n}\n\nvar red   = {id: 'red',   color: [1, 0, 0, 1]}\nvar green = {id: 'green', color: [0, 1, 0, 1]}\nvar blue  = {id: 'blue',  color: [0, 0, 1, 1]}\nvar white = {id: 'white', color: [1, 1, 1, 1]}\n\n  \nvar quads  = getRenderable()\nscreen.addRenderable(quads)\nquads.add({\n  color : red,\n  allocations : {},\n  vertices : square(.25, 0, .7, .05)\n})\nquads.add({\n  color : green,\n  allocations : {},\n  vertices : square(0, .25, .7, .05)\n})\nquads.add({\n  color : blue,\n  allocations : {},\n  vertices : square(0, 0, .9, .05)\n})\nquads.add({\n  color : white,\n  allocations : {},\n  vertices : square(0, 0, .7, .01)\n})\n\nfunction MyRenderSet(framebuffers) {\n\n  this.framebuffers = framebuffers;\n  this.cameras = [];\n  this.camera = null;\n  \n  for (var ff = 0; ff < 1; ++ff) {\n    var c;\n    this.cameras.push(c = new BasicCamera(framebuffers.size, framebuffers.size, .1, 4096));\n    c.setFOV(90, true);\n  }\n  \n  // this.cameras[2].rotateBy(0, Math.PI/2, 0);\n  // this.cameras[3].rotateBy(0, -Math.PI/2, 0);\n  // this.cameras[5].rotateBy(0, Math.PI, Math.PI);\n  // this.cameras[1].rotateBy(0, Math.PI, -Math.PI/2);\n  // this.cameras[4].rotateBy(0, Math.PI, 0);\n  // this.cameras[0].rotateBy(0, Math.PI, Math.PI/2);\n\n  this.cameras[0].rotateBy(0, Math.PI, 0);\n  \n  RenderSet.call(this)\n}\nutil.inherits(MyRenderSet, RenderSet)\n\nMyRenderSet.prototype.render = function (gl) {\n  for (var ff = 0; ff < 1; ++ff) {\n    this.framebuffers.bind(ff);\n    this.camera = this.cameras[ff];\n    RenderSet.prototype.render.call(this, gl);\n  }\n  this.framebuffers.unbind();\n}\n\nfunction MyFramebuffer(size, opt_depth) {\n  this.size = size;\n  this.depth = opt_depth;\n  var tex = {\n    texture : twgl.createTexture(gl, {\n      target : gl.TEXTURE_2D,\n      width  : this.size,\n      height : this.size,\n      min    : gl.LINEAR,\n      mag    : gl.LINEAR,\n      format : gl.RGBA,\n      type   : gl.UNSIGNED_BYTE,\n      wrapS  : gl.CLAMP_TO_EDGE,\n      wrapT  : gl.CLAMP_TO_EDGE\n    })\n  }\n  if (this.depth) {\n    var db = gl.createRenderbuffer();\n    gl.bindRenderbuffer(gl.RENDERBUFFER, db);\n    gl.renderbufferStorage(\n        gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.size, this.size);\n  }\n  this.framebuffers = [];\n  for (var ff = 0; ff < 1; ++ff) {\n    var fb = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        tex.texture,\n        0);\n    if (this.depth) {\n      gl.framebufferRenderbuffer(\n          gl.FRAMEBUFFER,\n          gl.DEPTH_ATTACHMENT,\n          gl.RENDERBUFFER,\n          db);\n    }\n    var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (status != gl.FRAMEBUFFER_COMPLETE) {\n      throw(\"gl.checkFramebufferStatus() returned \" + status);\n    }\n    this.framebuffers.push(fb);\n  }\n  gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n  this.texture = tex;\n}\n\nMyFramebuffer.prototype.bind = function(face) {\n  gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffers[face]);\n  gl.viewport(0, 0, this.size, this.size);\n};\n\nMyFramebuffer.prototype.unbind = function() {\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.viewport(\n      0, 0,\n      gl.drawingBufferWidth || gl.canvas.width,\n      gl.drawingBufferHeight || gl.canvas.height);\n};\n\n\nvar myFBO = new MyFramebuffer(1024, true);\nmyFBO.unbind()\n\n;(function () {\n\n  \n  var myRenderSet = new MyRenderSet(myFBO)\n\n  var shader = new Shader(function () {\n    return (\n      '  gl_Position = position; \\n' +\n      '  v_position  = inverse_camera * position; \\n'\n    )\n  }, function () {\n    return (\n      '  gl_FragColor = vec4(                                               \\n' +\n      '   (v_position.x + 1.0) / 2.0,                                       \\n' +\n      '   (v_position.y + 1.0) / 2.0,                                       \\n' +\n      '   (v_position.z + 1.0) / 2.0,                                       \\n' +\n      '   1.0);                                                             \\n'\n    )\n    \n  })\n  shader.attributes.position    = 'vec4';\n  shader.vertex_uniforms.inverse_camera = 'mat4';\n  shader.varyings.v_position    = 'vec4';\n\n  var plate = new Plate(shader);\n  plate.add({z: -.5})\n  \n  var uniforms = {};\n  var mat1 = m4.identity(new Float32Array(16));\n  var mat2 = m4.identity(new Float32Array(16));\n  var mat3 = m4.identity(new Float32Array(16));\n  \n  myRenderSet.addRenderable(quads)\n  // myRenderSet.addRenderable({\n  //   renderOrder: 10,\n  //   render : function (gl) {\n  //     gl.disable(gl.DEPTH_TEST);\n  //\n  //     myRenderSet.camera.computeMatrix()\n  //     m4.inverse(myRenderSet.camera.perspective, mat1);\n  //     m4.inverse(myRenderSet.camera.skyorientation, mat2);\n  //     m4.multiply(mat1, mat2, mat3);\n  //     uniforms.inverse_camera = mat3;\n  //\n  //     var geom = plate.getGeometry(gl);\n  //     plate.drawPrep(geom, uniforms);\n  //     geom.draw();\n  //\n  //     gl.enable(gl.DEPTH_TEST);\n  //   }\n  // })\n  \n\n  screen.addRenderable({\n    renderOrder : 2,\n    render : function (gl) {\n      myRenderSet.render(gl)\n    }\n  })\n\n}())\n  \n;(function () {\n  \n  var shader = new Shader(function () {\n    return (\n      '  v_pos       = camera * position; \\n' +\n      '  gl_Position = vec4(position.x, position.y, 0.5, 1.0); \\n'\n    ) \n  }, function () {\n    return (\n      '  gl_FragColor = texture2D(                              \\n'+\n      '      texture,                                           \\n'+\n      '      vec2(v_pos.x, v_pos.y));                           \\n'\n    )\n  })\n  shader.attributes.position              = 'vec4';\n  shader.fragment_uniforms.texture        = 'sampler2D';\n  shader.vertex_uniforms.camera           = 'mat4';\n  shader.varyings.v_pos                   = 'vec4';\n  \n  var plate = new Plate(shader);\n  plate.textureData = {texture : myFBO.texture}\n  plate.add({z: 1})\n  \n  var uniforms = {};\n\n  var inverse = m4.identity(new Float32Array(16));\n  \n  \n  screen.addRenderable({\n    renderOrder : 3,\n    render : function (gl) {\n      gl.disable(gl.DEPTH_TEST);\n      gl.enable(gl.BLEND);\n      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n      camera.computeMatrix()\n      m4.inverse(camera.skymatrix, inverse);\n      uniforms.camera = inverse;\n      uniforms.texture = plate.textureData.texture.texture;\n      var geom = plate.getGeometry(gl);\n      plate.drawPrep(geom, uniforms);\n      geom.draw();\n      gl.disable(gl.BLEND);\n      gl.enable(gl.DEPTH_TEST);\n    }\n  })\n\n}());\n\nscreen.beginFrameRendering(false)\n\n\nfunction click(x, y) {\n  console.log(Math.floor(x), Math.floor(y))\n}\n\ndocument.getElementById('canvas').addEventListener('click', function (e) {\n  var rect = document.getElementById('canvas').getBoundingClientRect()\n  click((e.clientX - rect.left) / rect.width * camera.frameWidth, (e.clientY - rect.top) / rect.height * camera.frameHeight)\n})\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./examples/picking/index.js\n ** module id = 0\n ** module chunks = 1\n **/"],"sourceRoot":""}