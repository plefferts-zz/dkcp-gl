{"version":3,"sources":["webpack:///picking/bundle.js","webpack:///./examples/picking/index.js","webpack:///./~/inherits/inherits_browser.js"],"names":["webpackJsonp","module","exports","__webpack_require__","getRenderable","identity","m4","Float32Array","Renderable","renderOrder","getUniforms","renderSet","screen","camera","computeMatrix","camera2","hit_test","factory","maxColors","colorAllocation","Allocation","Float","shader","HitTestShader","hitTestManager","hitColorAllocation","attributes","position","color","varyings","f_color","vertex_uniforms","m","Model","this","mixinModel","addAttribute","i","item","vertices","add","uniforms","colors","buffer","HitTestRenderSet","framebuffers","HitTestFrameBuffer","unbind","RenderSet","call","size","opt_depth","depth","tex","texture","twgl","createTexture","gl","target","TEXTURE_2D","width","height","min","LINEAR","mag","format","RGBA","type","UNSIGNED_BYTE","wrapS","CLAMP_TO_EDGE","wrapT","db","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","fb","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","DEPTH_ATTACHMENT","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","WebGLDebugUtils","glEnumToString","framebuffer","click","x","y","hitTestRenderSet","render","mousemove","mousex","mousey","DkcpGl","Plate","Shader","shaders","inherits","main","BasicCamera","canvas","document","getElementById","frameRate","element","wasd","delta","theta","Math","PI","HitColorAllocation","max","prototype","owner","index","b","g","r","hitAreaFor","arr","c","members","HitTestManager","attribute_name","uniform_name","model","allocation","id","hit_area","getVertexBodySource","getFragmentBodySource","wrapVertexSource","wrapFragmentSource","f_hit_color","hit_color","fragment_uniforms","slots","fn","getProgram","hit_test_program","createProgramInfo","getVertexSource","getFragmentSource","square","z","w","red","green","blue","white","quads","addRenderable","allocations","clickx","clicky","bind","zoom","frameWidth","frameHeight","dst","translate","scaling","viewport","drawingBufferWidth","drawingBufferHeight","plate","before","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","lastarr","Uint8Array","readPixels","Array","slice","join","console","log","disable","DEPTH_TEST","enable","BLEND","blendEquationSeparate","FUNC_ADD","blendFuncSeparate","ONE_MINUS_DST_ALPHA","DST_ALPHA","ONE","geom","getGeometry","drawPrep","draw","v_pos","textureData","matrix","beginFrameRendering","on","addEventListener","e","rect","getBoundingClientRect","clientX","left","clientY","top",32,"Object","create","ctor","superCtor","super_","constructor","value","enumerable","writable","configurable","TempCtor"],"mappings":"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","file":"picking/bundle.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar twgl              = __webpack_require__(7)\n\tvar m4                = __webpack_require__(7).m4\n\tvar DkcpGl            = __webpack_require__(1)\n\t\n\tvar Renderable        = DkcpGl.Renderable\n\tvar Model             = DkcpGl.Model\n\tvar Plate             = DkcpGl.Plate\n\tvar shaders           = DkcpGl.shaders\n\tvar Shader            = DkcpGl.Shader\n\tvar Allocation        = DkcpGl.Allocation\n\t\n\tvar inherits    = __webpack_require__(32)\n\tvar RenderSet   = DkcpGl.RenderSet\n\tvar BasicCamera = DkcpGl.camera.BasicCamera\n\t\n\tvar main = new DkcpGl({\n\t  canvas : document.getElementById('canvas'),\n\t  frameRate : {\n\t    element : document.getElementById('framerate')\n\t  },\n\t  wasd : {\n\t    document : document,\n\t    delta : .05,\n\t    theta : -Math.PI / 120\n\t  }\n\t})\n\tvar camera = main.camera;\n\tvar screen = main.screen;\n\tvar gl     = main.screen.gl;\n\t\n\tvar HitColorAllocation = function (max) {\n\t  Allocation.Float.call(this, max, 4)\n\t}\n\tinherits(HitColorAllocation, Allocation.Float)\n\t\n\tHitColorAllocation.prototype.add = function (item, owner) {\n\t  return Allocation.Float.prototype.add.call(this, item, owner, function (index) {\n\t    var b = (index >>>  0) % 0x100;\n\t    var g = (index >>>  8) % 0x100;\n\t    var r = (index >>> 16) % 0x100;\n\t    return [r / 255, g / 255, b / 255, 1]\n\t  })\n\t}\n\t\n\tHitColorAllocation.prototype.hitAreaFor = function (arr) {\n\t  var c = arr[0] * 0x10000 + arr[1] * 0x100 + arr[2];\n\t  return this.members[c]\n\t}\n\t\n\tvar HitTestManager = function (max) {\n\t  this.attribute_name     = 'hit_color';\n\t  this.uniform_name       = 'hit_colors';\n\t  this.hitColorAllocation = new HitColorAllocation(max);\n\t}\n\t\n\tHitTestManager.prototype.hitAreaFor = function (arr) {\n\t  return this.hitColorAllocation.hitAreaFor(arr)\n\t}\n\t\n\tHitTestManager.prototype.mixinModel = function (model) {\n\t  var allocation = this.hitColorAllocation\n\t  model.addAttribute(this.attribute_name, 1, 'Float32Array', function (i, item) {\n\t    return [\n\t      allocation.add({id: item.hit_area}, item)\n\t    ]\n\t  });\n\t  model.uniforms[this.uniform_name] = this.hitColorAllocation.buffer;\n\t}\n\t\n\tvar HitTestShader = function (hitColorAllocation, getVertexBodySource, getFragmentBodySource) {\n\t  Shader.call(this,\n\t      this.wrapVertexSource(getVertexBodySource),\n\t      this.wrapFragmentSource(getFragmentBodySource))\n\t\n\t  this.hitColorAllocation = hitColorAllocation\n\t  this.varyings.f_hit_color  = 'vec4';\n\t  this.attributes.hit_color  = 'float';\n\t  this.fragment_uniforms.hit_test = 'int';\n\t  this.vertex_uniforms['hit_colors[' + this.hitColorAllocation.slots.max + ']'] = 'vec4';\n\t}\n\tinherits(HitTestShader, Shader)\n\t\n\tHitTestShader.prototype.wrapVertexSource = function (fn) {\n\t  return function () {\n\t    return fn() + '\\n  f_hit_color = hit_colors[int(hit_color)];'\n\t  }\n\t};\n\t\n\tHitTestShader.prototype.wrapFragmentSource = function (fn) {\n\t  return function () {\n\t    if (this.hit_test) {\n\t      return ' gl_FragColor = f_hit_color;  \\n'\n\t    }\n\t    return fn();\n\t  }\n\t};\n\t\n\tHitTestShader.prototype.getProgram = function (gl, uniforms) {\n\t  if (uniforms.hit_test) {\n\t    if (this.hit_test_program)\n\t      return this.hit_test_program\n\t    \n\t    this.hit_test = true\n\t    return this.hit_test_program = twgl.createProgramInfo(\n\t      gl,\n\t      [this.getVertexSource(), this.getFragmentSource()]\n\t    )\n\t  }\n\t  \n\t  this.hit_test = false\n\t  return Shader.prototype.getProgram.call(this, gl, uniforms)\n\t};\n\t\n\tvar hitTestManager = new HitTestManager(100);\n\t\n\tfunction getRenderable() {\n\t  var identity = m4.identity(new Float32Array(16));\n\t  return new Renderable({\n\t    renderOrder : 10,\n\t    getUniforms : function (renderSet) {\n\t      if (renderSet == screen) {\n\t        return {\n\t          camera : camera.computeMatrix(),\n\t          camera2 : identity,\n\t          hit_test : 0\n\t        }\n\t      }\n\t      return {\n\t        camera : renderSet.camera.computeMatrix(),\n\t        camera2 : renderSet.camera2,\n\t        hit_test : 1\n\t        \n\t      }\n\t    },\n\t    factory : function () {\n\t      \n\t      var maxColors = 100\n\t      var colorAllocation    = new Allocation.Float(maxColors, 4)\n\t      \n\t      var shader = new HitTestShader(hitTestManager.hitColorAllocation, function () {\n\t        return '  gl_Position = camera2 * camera * position; \\n' + \n\t               '  f_color = colors[int(color)];              \\n'\n\t      }, function () {\n\t        return '  gl_FragColor = f_color; \\n'\n\t      })\n\t\n\t      shader.attributes.position     = 'vec4';\n\t      shader.attributes.color        = 'float';\n\t      shader.varyings.f_color        = 'vec4';\n\t      shader.vertex_uniforms.camera  = 'mat4';\n\t      shader.vertex_uniforms.camera2 = 'mat4';\n\t      shader.vertex_uniforms['colors[' + maxColors + ']'] = 'vec4';\n\t\n\t      var m = new Model(this, shader, 100)\n\t      hitTestManager.mixinModel(m)\n\t      \n\t      m.addAttribute('position', 4, 'Float32Array', function (i, item) {\n\t        return item.vertices[i]\n\t      });\n\t      \n\t      m.addAttribute('color', 1, 'Float32Array', function (i, item) {\n\t        return [\n\t          colorAllocation.add(item.color, item, function () {\n\t            return item.color.color\n\t          })\n\t        ]\n\t      });\n\t\n\t      m.uniforms.colors = colorAllocation.buffer;\n\t  \n\t      return m\n\t    }\n\t  })\n\t}\n\t\n\tvar square = function (x, y, z, w) {\n\t  return [\n\t    [x - w,  y - w, z, 1],\n\t    [x - w,  y + w, z, 1],\n\t    [x + w,  y - w, z, 1],\n\t    [x + w,  y + w, z, 1]\n\t  ]\n\t}\n\t\n\tvar red     = {id: 'red',     color: [1, 0, 0, 1]}\n\tvar green   = {id: 'green',   color: [0, 1, 0, 1]}\n\tvar blue    = {id: 'blue',    color: [0, 0, 1, 1]}\n\tvar white   = {id: 'white',   color: [1, 1, 1, 1]}\n\t\n\tvar quads  = getRenderable()\n\tscreen.addRenderable(quads)\n\tquads.add({\n\t  color : red,\n\t  hit_area : 'red',\n\t  allocations : {},\n\t  vertices : square(.25, 0, .7, .05)\n\t})\n\tquads.add({\n\t  color : green,\n\t  hit_area : 'green',\n\t  allocations : {},\n\t  vertices : square(0, .25, .7, .05)\n\t})\n\tquads.add({\n\t  color : blue,\n\t  hit_area : 'blue',\n\t  allocations : {},\n\t  vertices : square(0, 0, .9, .05)\n\t})\n\tquads.add({\n\t  color : white,\n\t  hit_area : 'white',\n\t  allocations : {},\n\t  vertices : square(0, 0, .7, .01)\n\t})\n\t\n\tfunction HitTestRenderSet(framebuffers) {\n\t  this.framebuffers = new HitTestFrameBuffer(2, true);\n\t  this.framebuffers.unbind()\n\t  \n\t  RenderSet.call(this)\n\t}\n\tinherits(HitTestRenderSet, RenderSet)\n\t\n\tHitTestRenderSet.prototype.render = function (gl, clickx, clicky) {\n\t  this.framebuffers.bind();\n\t  this.camera = main.camera\n\t  var zoom = Math.max(camera.frameWidth, camera.frameHeight);\n\t  var dst = new Float32Array(16)\n\t  m4.translate(m4.scaling([zoom, zoom, 1]), [\n\t    2 * (.5 - clickx / camera.frameWidth),\n\t    -2 * (.5 - clicky / camera.frameHeight),\n\t    0\n\t  ], dst)\n\t  this.camera2 = dst\n\t\n\t  RenderSet.prototype.render.call(this, gl);\n\t  this.framebuffers.unbind();\n\t}\n\t\n\t\n\tfunction HitTestFrameBuffer(size, opt_depth) {\n\t  this.size = size;\n\t  this.depth = opt_depth;\n\t  var tex = {\n\t    texture : twgl.createTexture(gl, {\n\t      target : gl.TEXTURE_2D,\n\t      width  : this.size,\n\t      height : this.size,\n\t      min    : gl.LINEAR,\n\t      mag    : gl.LINEAR,\n\t      format : gl.RGBA,\n\t      type   : gl.UNSIGNED_BYTE,\n\t      wrapS  : gl.CLAMP_TO_EDGE,\n\t      wrapT  : gl.CLAMP_TO_EDGE\n\t    })\n\t  }\n\t  if (this.depth) {\n\t    var db = gl.createRenderbuffer();\n\t    gl.bindRenderbuffer(gl.RENDERBUFFER, db);\n\t    gl.renderbufferStorage(\n\t        gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.size, this.size);\n\t  }\n\t\n\t  var fb = gl.createFramebuffer();\n\t  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n\t  gl.framebufferTexture2D(\n\t      gl.FRAMEBUFFER,\n\t      gl.COLOR_ATTACHMENT0,\n\t      gl.TEXTURE_2D,\n\t      tex.texture,\n\t      0);\n\t  if (this.depth) {\n\t    gl.framebufferRenderbuffer(\n\t        gl.FRAMEBUFFER,\n\t        gl.DEPTH_ATTACHMENT,\n\t        gl.RENDERBUFFER,\n\t        db);\n\t  }\n\t  var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\t  if (status != gl.FRAMEBUFFER_COMPLETE) {\n\t    throw(\"gl.checkFramebufferStatus() returned \" + WebGLDebugUtils.glEnumToString(status));\n\t  }\n\t  this.framebuffer = fb;\n\t  gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t  this.texture = tex;\n\t}\n\t\n\tHitTestFrameBuffer.prototype.bind = function() {\n\t  gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n\t  gl.viewport(0, 0, this.size, this.size);\n\t};\n\t\n\tHitTestFrameBuffer.prototype.unbind = function() {\n\t  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t  gl.viewport(\n\t      0, 0,\n\t      gl.drawingBufferWidth || gl.canvas.width,\n\t      gl.drawingBufferHeight || gl.canvas.height);\n\t};\n\t\n\t\n\tvar hitTestRenderSet;\n\t\n\t;(function () {\n\t\n\t  \n\t hitTestRenderSet = new HitTestRenderSet()\n\t\n\t  var shader = new Shader(function () {\n\t    return (\n\t      '  gl_Position = position; \\n'\n\t    )\n\t  }, function () {\n\t    return (\n\t      '  gl_FragColor = vec4(0.5,0.5,0.5,1.0); \\n'\n\t    )\n\t    \n\t  })\n\t  shader.attributes.position    = 'vec4';\n\t\n\t  var plate = new Plate(shader);\n\t  plate.add({z: -.5})\n\t  \n\t  var uniforms = {};\n\t  var mat1 = m4.identity(new Float32Array(16));\n\t  var mat2 = m4.identity(new Float32Array(16));\n\t  var mat3 = m4.identity(new Float32Array(16));\n\t  \n\t  \n\t  hitTestRenderSet.addRenderable({\n\t    before : function () {\n\t      gl.clearColor(0,0,0,0);\n\t      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t    },\n\t    renderOrder : 0\n\t  })\n\t  \n\t  var lastarr;\n\t  hitTestRenderSet.addRenderable({\n\t    before : function () {\n\t      var arr = new Uint8Array(4 * 4)\n\t      gl.readPixels(0, 0, 2, 2, gl.RGBA, gl.UNSIGNED_BYTE, arr)\n\t      arr = Array.prototype.slice.call(arr, 0, 3)\n\t      if (arr.join(',') != lastarr) {\n\t        console.log(hitTestManager.hitAreaFor(arr))\n\t      }\n\t      lastarr = arr.join(',')\n\t    },\n\t    renderOrder : 999\n\t  })\n\t  \n\t  hitTestRenderSet.addRenderable({\n\t    renderOrder: 11,\n\t    render : function (gl) {\n\t      gl.disable(gl.DEPTH_TEST);\n\t      \n\t      gl.enable(gl.BLEND);\n\t      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n\t\n\t      var geom = plate.getGeometry(gl);\n\t      plate.drawPrep(geom, uniforms);\n\t      geom.draw();\n\t\n\t      gl.disable(gl.BLEND);\n\t      gl.enable(gl.DEPTH_TEST);\n\t    }\n\t  })\n\t  \n\t  hitTestRenderSet.addRenderable(quads)\n\t\n\t  screen.addRenderable({\n\t    before : function () {\n\t      gl.clearColor(0,0,0,0);\n\t      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t    },\n\t    renderOrder : 0\n\t  })\n\t  \n\t}())\n\t  \n\t;(function () {\n\t  \n\t  var shader = new Shader(function () {\n\t    return (\n\t      '  v_pos       = position; \\n' +\n\t      '  gl_Position = camera * vec4(position.x / 4.0, position.y / 4.0, 1.5, 1.0); \\n'\n\t    ) \n\t  }, function () {\n\t    return (\n\t      '  gl_FragColor = texture2D(                            \\n'+\n\t      '      texture,                                         \\n'+\n\t      '      vec2(v_pos.x / 2.0 + 0.5, v_pos.y / 2.0 + 0.5)); \\n'\n\t    )\n\t  })\n\t  shader.attributes.position              = 'vec4';\n\t  shader.fragment_uniforms.texture        = 'sampler2D';\n\t  shader.vertex_uniforms.camera           = 'mat4';\n\t  shader.varyings.v_pos                   = 'vec4';\n\t  \n\t  var plate = new Plate(shader);\n\t  plate.textureData = {texture : hitTestRenderSet.framebuffers.texture}\n\t  plate.add({z: 1})\n\t  \n\t  var uniforms = {};\n\t\n\t  var inverse = m4.identity(new Float32Array(16));\n\t  \n\t  \n\t  screen.addRenderable({\n\t    renderOrder : 30,\n\t    render : function (gl) {\n\t      gl.disable(gl.DEPTH_TEST);\n\t      gl.enable(gl.BLEND);\n\t      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n\t      camera.computeMatrix()\n\t      // m4.inverse(camera.skymatrix, inverse);\n\t      uniforms.camera = camera.matrix;\n\t      uniforms.texture = plate.textureData.texture.texture;\n\t      var geom = plate.getGeometry(gl);\n\t      plate.drawPrep(geom, uniforms);\n\t      geom.draw();\n\t      gl.disable(gl.BLEND);\n\t      gl.enable(gl.DEPTH_TEST);\n\t    }\n\t  })\n\t\n\t}());\n\t\n\tscreen.beginFrameRendering(false)\n\t\n\tvar mousex, mousey;\n\t\n\tscreen.on('moved', function () {\n\t  hitTestRenderSet.render(gl, mousex, mousey)\n\t})\n\t\n\tfunction click(x, y) {\n\t  hitTestRenderSet.render(gl, x - 1, y - 1)\n\t}\n\tfunction mousemove(x, y) {\n\t  hitTestRenderSet.render(gl, mousex = x - 1, mousey = y - 1)\n\t}\n\t\n\tdocument.getElementById('canvas').addEventListener('click', function (e) {\n\t  var rect = document.getElementById('canvas').getBoundingClientRect()\n\t  click((e.clientX - rect.left) / rect.width * camera.frameWidth, (e.clientY - rect.top) / rect.height * camera.frameHeight)\n\t})\n\t\n\tdocument.getElementById('canvas').addEventListener('mousemove', function (e) {\n\t  var rect = document.getElementById('canvas').getBoundingClientRect()\n\t  mousemove((e.clientX - rect.left) / rect.width * camera.frameWidth, (e.clientY - rect.top) / rect.height * camera.frameHeight)\n\t})\n\n/***/ },\n\n/***/ 32:\n/***/ function(module, exports) {\n\n\tif (typeof Object.create === 'function') {\n\t  // implementation from standard node.js 'util' module\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor\n\t    ctor.prototype = Object.create(superCtor.prototype, {\n\t      constructor: {\n\t        value: ctor,\n\t        enumerable: false,\n\t        writable: true,\n\t        configurable: true\n\t      }\n\t    });\n\t  };\n\t} else {\n\t  // old school shim for old browsers\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor\n\t    var TempCtor = function () {}\n\t    TempCtor.prototype = superCtor.prototype\n\t    ctor.prototype = new TempCtor()\n\t    ctor.prototype.constructor = ctor\n\t  }\n\t}\n\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** picking/bundle.js\n **/","var twgl              = require('../../lib/twgl')\nvar m4                = require('../../lib/twgl').m4\nvar DkcpGl            = require('../../src/dkcp-gl')\n\nvar Renderable        = DkcpGl.Renderable\nvar Model             = DkcpGl.Model\nvar Plate             = DkcpGl.Plate\nvar shaders           = DkcpGl.shaders\nvar Shader            = DkcpGl.Shader\nvar Allocation        = DkcpGl.Allocation\n\nvar inherits    = require('inherits')\nvar RenderSet   = DkcpGl.RenderSet\nvar BasicCamera = DkcpGl.camera.BasicCamera\n\nvar main = new DkcpGl({\n  canvas : document.getElementById('canvas'),\n  frameRate : {\n    element : document.getElementById('framerate')\n  },\n  wasd : {\n    document : document,\n    delta : .05,\n    theta : -Math.PI / 120\n  }\n})\nvar camera = main.camera;\nvar screen = main.screen;\nvar gl     = main.screen.gl;\n\nvar HitColorAllocation = function (max) {\n  Allocation.Float.call(this, max, 4)\n}\ninherits(HitColorAllocation, Allocation.Float)\n\nHitColorAllocation.prototype.add = function (item, owner) {\n  return Allocation.Float.prototype.add.call(this, item, owner, function (index) {\n    var b = (index >>>  0) % 0x100;\n    var g = (index >>>  8) % 0x100;\n    var r = (index >>> 16) % 0x100;\n    return [r / 255, g / 255, b / 255, 1]\n  })\n}\n\nHitColorAllocation.prototype.hitAreaFor = function (arr) {\n  var c = arr[0] * 0x10000 + arr[1] * 0x100 + arr[2];\n  return this.members[c]\n}\n\nvar HitTestManager = function (max) {\n  this.attribute_name     = 'hit_color';\n  this.uniform_name       = 'hit_colors';\n  this.hitColorAllocation = new HitColorAllocation(max);\n}\n\nHitTestManager.prototype.hitAreaFor = function (arr) {\n  return this.hitColorAllocation.hitAreaFor(arr)\n}\n\nHitTestManager.prototype.mixinModel = function (model) {\n  var allocation = this.hitColorAllocation\n  model.addAttribute(this.attribute_name, 1, 'Float32Array', function (i, item) {\n    return [\n      allocation.add({id: item.hit_area}, item)\n    ]\n  });\n  model.uniforms[this.uniform_name] = this.hitColorAllocation.buffer;\n}\n\nvar HitTestShader = function (hitColorAllocation, getVertexBodySource, getFragmentBodySource) {\n  Shader.call(this,\n      this.wrapVertexSource(getVertexBodySource),\n      this.wrapFragmentSource(getFragmentBodySource))\n\n  this.hitColorAllocation = hitColorAllocation\n  this.varyings.f_hit_color  = 'vec4';\n  this.attributes.hit_color  = 'float';\n  this.fragment_uniforms.hit_test = 'int';\n  this.vertex_uniforms['hit_colors[' + this.hitColorAllocation.slots.max + ']'] = 'vec4';\n}\ninherits(HitTestShader, Shader)\n\nHitTestShader.prototype.wrapVertexSource = function (fn) {\n  return function () {\n    return fn() + '\\n  f_hit_color = hit_colors[int(hit_color)];'\n  }\n};\n\nHitTestShader.prototype.wrapFragmentSource = function (fn) {\n  return function () {\n    if (this.hit_test) {\n      return ' gl_FragColor = f_hit_color;  \\n'\n    }\n    return fn();\n  }\n};\n\nHitTestShader.prototype.getProgram = function (gl, uniforms) {\n  if (uniforms.hit_test) {\n    if (this.hit_test_program)\n      return this.hit_test_program\n    \n    this.hit_test = true\n    return this.hit_test_program = twgl.createProgramInfo(\n      gl,\n      [this.getVertexSource(), this.getFragmentSource()]\n    )\n  }\n  \n  this.hit_test = false\n  return Shader.prototype.getProgram.call(this, gl, uniforms)\n};\n\nvar hitTestManager = new HitTestManager(100);\n\nfunction getRenderable() {\n  var identity = m4.identity(new Float32Array(16));\n  return new Renderable({\n    renderOrder : 10,\n    getUniforms : function (renderSet) {\n      if (renderSet == screen) {\n        return {\n          camera : camera.computeMatrix(),\n          camera2 : identity,\n          hit_test : 0\n        }\n      }\n      return {\n        camera : renderSet.camera.computeMatrix(),\n        camera2 : renderSet.camera2,\n        hit_test : 1\n        \n      }\n    },\n    factory : function () {\n      \n      var maxColors = 100\n      var colorAllocation    = new Allocation.Float(maxColors, 4)\n      \n      var shader = new HitTestShader(hitTestManager.hitColorAllocation, function () {\n        return '  gl_Position = camera2 * camera * position; \\n' + \n               '  f_color = colors[int(color)];              \\n'\n      }, function () {\n        return '  gl_FragColor = f_color; \\n'\n      })\n\n      shader.attributes.position     = 'vec4';\n      shader.attributes.color        = 'float';\n      shader.varyings.f_color        = 'vec4';\n      shader.vertex_uniforms.camera  = 'mat4';\n      shader.vertex_uniforms.camera2 = 'mat4';\n      shader.vertex_uniforms['colors[' + maxColors + ']'] = 'vec4';\n\n      var m = new Model(this, shader, 100)\n      hitTestManager.mixinModel(m)\n      \n      m.addAttribute('position', 4, 'Float32Array', function (i, item) {\n        return item.vertices[i]\n      });\n      \n      m.addAttribute('color', 1, 'Float32Array', function (i, item) {\n        return [\n          colorAllocation.add(item.color, item, function () {\n            return item.color.color\n          })\n        ]\n      });\n\n      m.uniforms.colors = colorAllocation.buffer;\n  \n      return m\n    }\n  })\n}\n\nvar square = function (x, y, z, w) {\n  return [\n    [x - w,  y - w, z, 1],\n    [x - w,  y + w, z, 1],\n    [x + w,  y - w, z, 1],\n    [x + w,  y + w, z, 1]\n  ]\n}\n\nvar red     = {id: 'red',     color: [1, 0, 0, 1]}\nvar green   = {id: 'green',   color: [0, 1, 0, 1]}\nvar blue    = {id: 'blue',    color: [0, 0, 1, 1]}\nvar white   = {id: 'white',   color: [1, 1, 1, 1]}\n\nvar quads  = getRenderable()\nscreen.addRenderable(quads)\nquads.add({\n  color : red,\n  hit_area : 'red',\n  allocations : {},\n  vertices : square(.25, 0, .7, .05)\n})\nquads.add({\n  color : green,\n  hit_area : 'green',\n  allocations : {},\n  vertices : square(0, .25, .7, .05)\n})\nquads.add({\n  color : blue,\n  hit_area : 'blue',\n  allocations : {},\n  vertices : square(0, 0, .9, .05)\n})\nquads.add({\n  color : white,\n  hit_area : 'white',\n  allocations : {},\n  vertices : square(0, 0, .7, .01)\n})\n\nfunction HitTestRenderSet(framebuffers) {\n  this.framebuffers = new HitTestFrameBuffer(2, true);\n  this.framebuffers.unbind()\n  \n  RenderSet.call(this)\n}\ninherits(HitTestRenderSet, RenderSet)\n\nHitTestRenderSet.prototype.render = function (gl, clickx, clicky) {\n  this.framebuffers.bind();\n  this.camera = main.camera\n  var zoom = Math.max(camera.frameWidth, camera.frameHeight);\n  var dst = new Float32Array(16)\n  m4.translate(m4.scaling([zoom, zoom, 1]), [\n    2 * (.5 - clickx / camera.frameWidth),\n    -2 * (.5 - clicky / camera.frameHeight),\n    0\n  ], dst)\n  this.camera2 = dst\n\n  RenderSet.prototype.render.call(this, gl);\n  this.framebuffers.unbind();\n}\n\n\nfunction HitTestFrameBuffer(size, opt_depth) {\n  this.size = size;\n  this.depth = opt_depth;\n  var tex = {\n    texture : twgl.createTexture(gl, {\n      target : gl.TEXTURE_2D,\n      width  : this.size,\n      height : this.size,\n      min    : gl.LINEAR,\n      mag    : gl.LINEAR,\n      format : gl.RGBA,\n      type   : gl.UNSIGNED_BYTE,\n      wrapS  : gl.CLAMP_TO_EDGE,\n      wrapT  : gl.CLAMP_TO_EDGE\n    })\n  }\n  if (this.depth) {\n    var db = gl.createRenderbuffer();\n    gl.bindRenderbuffer(gl.RENDERBUFFER, db);\n    gl.renderbufferStorage(\n        gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.size, this.size);\n  }\n\n  var fb = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      tex.texture,\n      0);\n  if (this.depth) {\n    gl.framebufferRenderbuffer(\n        gl.FRAMEBUFFER,\n        gl.DEPTH_ATTACHMENT,\n        gl.RENDERBUFFER,\n        db);\n  }\n  var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  if (status != gl.FRAMEBUFFER_COMPLETE) {\n    throw(\"gl.checkFramebufferStatus() returned \" + WebGLDebugUtils.glEnumToString(status));\n  }\n  this.framebuffer = fb;\n  gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n  this.texture = tex;\n}\n\nHitTestFrameBuffer.prototype.bind = function() {\n  gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n  gl.viewport(0, 0, this.size, this.size);\n};\n\nHitTestFrameBuffer.prototype.unbind = function() {\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.viewport(\n      0, 0,\n      gl.drawingBufferWidth || gl.canvas.width,\n      gl.drawingBufferHeight || gl.canvas.height);\n};\n\n\nvar hitTestRenderSet;\n\n;(function () {\n\n  \n hitTestRenderSet = new HitTestRenderSet()\n\n  var shader = new Shader(function () {\n    return (\n      '  gl_Position = position; \\n'\n    )\n  }, function () {\n    return (\n      '  gl_FragColor = vec4(0.5,0.5,0.5,1.0); \\n'\n    )\n    \n  })\n  shader.attributes.position    = 'vec4';\n\n  var plate = new Plate(shader);\n  plate.add({z: -.5})\n  \n  var uniforms = {};\n  var mat1 = m4.identity(new Float32Array(16));\n  var mat2 = m4.identity(new Float32Array(16));\n  var mat3 = m4.identity(new Float32Array(16));\n  \n  \n  hitTestRenderSet.addRenderable({\n    before : function () {\n      gl.clearColor(0,0,0,0);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n    },\n    renderOrder : 0\n  })\n  \n  var lastarr;\n  hitTestRenderSet.addRenderable({\n    before : function () {\n      var arr = new Uint8Array(4 * 4)\n      gl.readPixels(0, 0, 2, 2, gl.RGBA, gl.UNSIGNED_BYTE, arr)\n      arr = Array.prototype.slice.call(arr, 0, 3)\n      if (arr.join(',') != lastarr) {\n        console.log(hitTestManager.hitAreaFor(arr))\n      }\n      lastarr = arr.join(',')\n    },\n    renderOrder : 999\n  })\n  \n  hitTestRenderSet.addRenderable({\n    renderOrder: 11,\n    render : function (gl) {\n      gl.disable(gl.DEPTH_TEST);\n      \n      gl.enable(gl.BLEND);\n      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n\n      var geom = plate.getGeometry(gl);\n      plate.drawPrep(geom, uniforms);\n      geom.draw();\n\n      gl.disable(gl.BLEND);\n      gl.enable(gl.DEPTH_TEST);\n    }\n  })\n  \n  hitTestRenderSet.addRenderable(quads)\n\n  screen.addRenderable({\n    before : function () {\n      gl.clearColor(0,0,0,0);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n    },\n    renderOrder : 0\n  })\n  \n}())\n  \n;(function () {\n  \n  var shader = new Shader(function () {\n    return (\n      '  v_pos       = position; \\n' +\n      '  gl_Position = camera * vec4(position.x / 4.0, position.y / 4.0, 1.5, 1.0); \\n'\n    ) \n  }, function () {\n    return (\n      '  gl_FragColor = texture2D(                            \\n'+\n      '      texture,                                         \\n'+\n      '      vec2(v_pos.x / 2.0 + 0.5, v_pos.y / 2.0 + 0.5)); \\n'\n    )\n  })\n  shader.attributes.position              = 'vec4';\n  shader.fragment_uniforms.texture        = 'sampler2D';\n  shader.vertex_uniforms.camera           = 'mat4';\n  shader.varyings.v_pos                   = 'vec4';\n  \n  var plate = new Plate(shader);\n  plate.textureData = {texture : hitTestRenderSet.framebuffers.texture}\n  plate.add({z: 1})\n  \n  var uniforms = {};\n\n  var inverse = m4.identity(new Float32Array(16));\n  \n  \n  screen.addRenderable({\n    renderOrder : 30,\n    render : function (gl) {\n      gl.disable(gl.DEPTH_TEST);\n      gl.enable(gl.BLEND);\n      gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n      gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA, gl.ONE, gl.ONE);\n      camera.computeMatrix()\n      // m4.inverse(camera.skymatrix, inverse);\n      uniforms.camera = camera.matrix;\n      uniforms.texture = plate.textureData.texture.texture;\n      var geom = plate.getGeometry(gl);\n      plate.drawPrep(geom, uniforms);\n      geom.draw();\n      gl.disable(gl.BLEND);\n      gl.enable(gl.DEPTH_TEST);\n    }\n  })\n\n}());\n\nscreen.beginFrameRendering(false)\n\nvar mousex, mousey;\n\nscreen.on('moved', function () {\n  hitTestRenderSet.render(gl, mousex, mousey)\n})\n\nfunction click(x, y) {\n  hitTestRenderSet.render(gl, x - 1, y - 1)\n}\nfunction mousemove(x, y) {\n  hitTestRenderSet.render(gl, mousex = x - 1, mousey = y - 1)\n}\n\ndocument.getElementById('canvas').addEventListener('click', function (e) {\n  var rect = document.getElementById('canvas').getBoundingClientRect()\n  click((e.clientX - rect.left) / rect.width * camera.frameWidth, (e.clientY - rect.top) / rect.height * camera.frameHeight)\n})\n\ndocument.getElementById('canvas').addEventListener('mousemove', function (e) {\n  var rect = document.getElementById('canvas').getBoundingClientRect()\n  mousemove((e.clientX - rect.left) / rect.width * camera.frameWidth, (e.clientY - rect.top) / rect.height * camera.frameHeight)\n})\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./examples/picking/index.js\n ** module id = 0\n ** module chunks = 1\n **/","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/inherits/inherits_browser.js\n ** module id = 32\n ** module chunks = 1\n **/"],"sourceRoot":""}