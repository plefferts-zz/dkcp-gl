{"version":3,"sources":["webpack:///transforms/bundle.js","webpack:///./examples/transforms/index.js"],"names":["webpackJsonp","module","exports","__webpack_require__","getRenderable","Renderable","getUniforms","camera","computeMatrix","factory","maxColors","colorAllocation","Allocation","Float","maxTransforms","transformAllocation","shader","Shader","attributes","position","color","transform","varyings","f_color","vertex_uniforms","m","Model","this","addAttribute","i","item","vertices","color_indices","colors","allocations","forEach","push","add","transform_indices","transforms","getValue","uniforms","buffer","DkcpGl","shaders","Transform","main","canvas","document","getElementById","frameRate","element","wasd","delta","theta","Math","PI","screen","square","x","y","z","w","red","id","green","blue","white","on","rotateBy","trigger","quads","addRenderable","beginFrameRendering"],"mappings":"AAAAA,cAAc,IAER,SAASC,EAAQC,EAASC,GCqBhC,QAAAC,KACA,UAAAC,IACAC,YAAA,WACA,OACAC,SAAAC,kBAGAC,QAAA,WAEA,GAAAC,GAAA,IACAC,EAAA,GAAAC,GAAAC,MAAAH,EAAA,GAEAI,EAAA,GACAC,EAAA,GAAAH,GAAAC,MAAAC,EAAA,IAEAE,EAAA,GAAAC,GAAA,WACA,8GAEO,WACP,sCAEAD,GAAAE,WAAAC,SAAA,OACAH,EAAAE,WAAAE,MAAA,QACAJ,EAAAE,WAAAG,UAAA,QACAL,EAAAM,SAAAC,QAAA,OACAP,EAAAQ,gBAAAjB,OAAA,OACAS,EAAAQ,gBAAA,UAAAd,EAAA,YACAM,EAAAQ,gBAAA,cAAAV,EAAA,WAEA,IAAAW,GAAA,GAAAC,GAAAC,KAAAX,EAAA,IAoCA,OAnCAS,GAAAG,aAAA,qCAAAC,EAAAC,GACA,MAAAA,GAAAC,SAAAF,KAGAJ,EAAAG,aAAA,kCAAAC,EAAAC,GACA,GAAAE,MACAC,EAAAH,EAAAI,YAAAD,MAQA,OAPAA,GAAAE,QAAA,SAAAf,GACAY,EAAAI,KACAzB,EAAA0B,IAAAjB,EAAAU,EAAA,WACA,MAAAV,cAIAY,IAGAP,EAAAG,aAAA,sCAAAC,EAAAC,GACA,GAAAQ,MACAC,EAAAT,EAAAI,YAAAK,UAQA,OAPAA,GAAAJ,QAAA,SAAAd,GACAiB,EAAAF,KACArB,EAAAsB,IAAAhB,EAAAS,EAAA,WACA,MAAAT,GAAAmB,gBAIAF,IAGAb,EAAAS,YAAAD,OAAAtB,EACAc,EAAAgB,SAAAR,OAAAtB,EAAA+B,OACAjB,EAAAS,YAAAK,WAAAxB,EACAU,EAAAgB,SAAAF,WAAAxB,EAAA2B,OAEAjB,KAxFA,GAAAkB,GAAAxC,EAAA,GAEAE,EAAAsC,EAAAtC,WACAqB,EAAAiB,EAAAjB,MAEAT,GADA0B,EAAAC,QACAD,EAAA1B,QACAL,EAAA+B,EAAA/B,WACAiC,EAAAF,EAAAE,UAEAC,EAAA,GAAAH,IACAI,OAAAC,SAAAC,eAAA,UACAC,WACAC,QAAAH,SAAAC,eAAA,cAEAG,MACAJ,kBACAK,MAAA,IACAC,OAAAC,KAAAC,GAAA,OAGAjD,EAAAuC,EAAAvC,OACAkD,EAAAX,EAAAW,OAwEAC,EAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,QACAH,EAAAG,EAAAF,EAAAE,EAAAD,EAAA,IACAF,EAAAG,EAAAF,EAAAE,EAAAD,EAAA,IACAF,EAAAG,EAAAF,EAAAE,EAAAD,EAAA,IACAF,EAAAG,EAAAF,EAAAE,EAAAD,EAAA,KAGAE,GAAaC,GAAA,MAAA5C,OAAA,UACb6C,GAAaD,GAAA,QAAA5C,OAAA,UACb8C,GAAaF,GAAA,OAAA5C,OAAA,UACb+C,GAAaH,GAAA,QAAA5C,OAAA,UAEbmB,IACAA,GAAAH,KAAA,GAAAS,IAEAY,EAAAW,GAAA,mBACA7B,EAAA,GAAA8B,SAAAd,KAAAC,GAAA,UACAjB,EAAA,GAAA+B,QAAA,SAAA/B,EAAA,KAGA,IAAAgC,GAAAnE,GACAqD,GAAAe,cAAAD,GACAA,EAAAlC,KACAH,aACAD,QAAA8B,GACAxB,cAAA,KAEAR,SAAA2B,EAAA,gBAEAa,EAAAlC,KACAH,aACAD,QAAAgC,GACA1B,cAAA,KAEAR,SAAA2B,EAAA,gBAEAa,EAAAlC,KACAH,aACAD,QAAAiC,GACA3B,cAAA,KAEAR,SAAA2B,EAAA,cAEAa,EAAAlC,KACAH,aACAD,QAAAkC,GACA5B,cAAA,KAEAR,SAAA2B,EAAA,cAIAD,EAAAgB,qBAAA","file":"transforms/bundle.js","sourcesContent":["webpackJsonp([7],[\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar DkcpGl            = __webpack_require__(1)\n\t\n\tvar Renderable        = DkcpGl.Renderable\n\tvar Model             = DkcpGl.Model\n\tvar shaders           = DkcpGl.shaders\n\tvar Shader            = DkcpGl.Shader\n\tvar Allocation        = DkcpGl.Allocation\n\tvar Transform         = DkcpGl.Transform\n\t\n\tvar main = new DkcpGl({\n\t  canvas : document.getElementById('canvas'),\n\t  frameRate : {\n\t    element : document.getElementById('framerate')\n\t  },\n\t  wasd : {\n\t    document : document,\n\t    delta : .05,\n\t    theta : -Math.PI / 120\n\t  }\n\t})\n\tvar camera = main.camera;\n\tvar screen = main.screen;\n\t\n\tfunction getRenderable() {\n\t  return new Renderable({\n\t    getUniforms : function () {\n\t      return {\n\t        camera : camera.computeMatrix()\n\t      }\n\t    },\n\t    factory : function () {\n\t      \n\t      var maxColors           = 100\n\t      var colorAllocation     = new Allocation.Float(maxColors, 4)\n\t\n\t      var maxTransforms       = 16\n\t      var transformAllocation = new Allocation.Float(maxTransforms, 16)\n\t      \n\t      var shader = new Shader(function () {\n\t        return '  gl_Position = camera * transforms[int(transform)] * position; \\n' + \n\t               '  f_color = colors[int(color)]; \\n'\n\t      }, function () {\n\t        return '  gl_FragColor = f_color ;\\n'\n\t      })\n\t      shader.attributes.position    = 'vec4';\n\t      shader.attributes.color       = 'float';\n\t      shader.attributes.transform   = 'float';\n\t      shader.varyings.f_color       = 'vec4';\n\t      shader.vertex_uniforms.camera = 'mat4';\n\t      shader.vertex_uniforms['colors[' + maxColors + ']'] = 'vec4';\n\t      shader.vertex_uniforms['transforms[' + maxTransforms + ']'] = 'mat4';\n\t\n\t      var m = new Model(this, shader, 100)\n\t      m.addAttribute('position', 4, 'Float32Array', function (i, item) {\n\t        return item.vertices[i]\n\t      });\n\t      \n\t      m.addAttribute('color', 1, 'Float32Array', function (i, item) {\n\t        var color_indices = []\n\t        var colors = item.allocations.colors\n\t        colors.forEach(function (color) {\n\t          color_indices.push(\n\t            colorAllocation.add(color, item, function () {\n\t              return color.color\n\t            })\n\t          )\n\t        })\n\t        return color_indices\n\t      });\n\t\n\t      m.addAttribute('transform', 1, 'Float32Array', function (i, item) {\n\t        var transform_indices = []\n\t        var transforms = item.allocations.transforms\n\t        transforms.forEach(function (transform) {\n\t          transform_indices.push(\n\t            transformAllocation.add(transform, item, function () {\n\t              return transform.getValue()\n\t            })\n\t          )\n\t        })\n\t        return transform_indices\n\t      });\n\t  \n\t      m.allocations.colors     = colorAllocation;\n\t      m.uniforms.colors        = colorAllocation.buffer;\n\t      m.allocations.transforms = transformAllocation;\n\t      m.uniforms.transforms    = transformAllocation.buffer;\n\t  \n\t      return m\n\t    }\n\t  })\n\t}\n\t\n\tvar square = function (x, y, z, w) {\n\t  return [\n\t    [x - w,  y - w, z, 1],\n\t    [x - w,  y + w, z, 1],\n\t    [x + w,  y - w, z, 1],\n\t    [x + w,  y + w, z, 1]\n\t  ]\n\t}\n\tvar red   = {id: 'red',   color: [1, 0, 0, 1]}\n\tvar green = {id: 'green', color: [0, 1, 0, 1]}\n\tvar blue  = {id: 'blue',  color: [0, 0, 1, 1]}\n\tvar white = {id: 'white', color: [1, 1, 1, 1]}\n\t\n\tvar transforms = [];\n\ttransforms.push(new Transform());\n\t\n\tscreen.on('frame', function() {\n\t  transforms[0].rotateBy(Math.PI/8/10, 0, 0);\n\t  transforms[0].trigger('change', transforms[0]);\n\t})\n\t\n\tvar quads  = getRenderable()\n\tscreen.addRenderable(quads)\n\tquads.add({\n\t  allocations : {\n\t    colors : [red],\n\t    transforms : [transforms[0]]\n\t  },\n\t  vertices : square(.25, 0, .7, .05)\n\t})\n\tquads.add({\n\t  allocations : {\n\t    colors : [green],\n\t    transforms : [transforms[0]]\n\t  },\n\t  vertices : square(0, .25, .7, .05)\n\t})\n\tquads.add({\n\t  allocations : {\n\t    colors : [blue],\n\t    transforms : [transforms[0]]\n\t  },\n\t  vertices : square(0, 0, .9, .05)\n\t})\n\tquads.add({\n\t  allocations : {\n\t    colors : [white],\n\t    transforms : [transforms[0]]\n\t  },\n\t  vertices : square(0, 0, .7, .01)\n\t})\n\t\n\t\n\tscreen.beginFrameRendering(false)\n\n\n/***/ }\n]);\n\n\n/** WEBPACK FOOTER **\n ** transforms/bundle.js\n **/","var DkcpGl            = require('../../src/dkcp-gl')\n\nvar Renderable        = DkcpGl.Renderable\nvar Model             = DkcpGl.Model\nvar shaders           = DkcpGl.shaders\nvar Shader            = DkcpGl.Shader\nvar Allocation        = DkcpGl.Allocation\nvar Transform         = DkcpGl.Transform\n\nvar main = new DkcpGl({\n  canvas : document.getElementById('canvas'),\n  frameRate : {\n    element : document.getElementById('framerate')\n  },\n  wasd : {\n    document : document,\n    delta : .05,\n    theta : -Math.PI / 120\n  }\n})\nvar camera = main.camera;\nvar screen = main.screen;\n\nfunction getRenderable() {\n  return new Renderable({\n    getUniforms : function () {\n      return {\n        camera : camera.computeMatrix()\n      }\n    },\n    factory : function () {\n      \n      var maxColors           = 100\n      var colorAllocation     = new Allocation.Float(maxColors, 4)\n\n      var maxTransforms       = 16\n      var transformAllocation = new Allocation.Float(maxTransforms, 16)\n      \n      var shader = new Shader(function () {\n        return '  gl_Position = camera * transforms[int(transform)] * position; \\n' + \n               '  f_color = colors[int(color)]; \\n'\n      }, function () {\n        return '  gl_FragColor = f_color ;\\n'\n      })\n      shader.attributes.position    = 'vec4';\n      shader.attributes.color       = 'float';\n      shader.attributes.transform   = 'float';\n      shader.varyings.f_color       = 'vec4';\n      shader.vertex_uniforms.camera = 'mat4';\n      shader.vertex_uniforms['colors[' + maxColors + ']'] = 'vec4';\n      shader.vertex_uniforms['transforms[' + maxTransforms + ']'] = 'mat4';\n\n      var m = new Model(this, shader, 100)\n      m.addAttribute('position', 4, 'Float32Array', function (i, item) {\n        return item.vertices[i]\n      });\n      \n      m.addAttribute('color', 1, 'Float32Array', function (i, item) {\n        var color_indices = []\n        var colors = item.allocations.colors\n        colors.forEach(function (color) {\n          color_indices.push(\n            colorAllocation.add(color, item, function () {\n              return color.color\n            })\n          )\n        })\n        return color_indices\n      });\n\n      m.addAttribute('transform', 1, 'Float32Array', function (i, item) {\n        var transform_indices = []\n        var transforms = item.allocations.transforms\n        transforms.forEach(function (transform) {\n          transform_indices.push(\n            transformAllocation.add(transform, item, function () {\n              return transform.getValue()\n            })\n          )\n        })\n        return transform_indices\n      });\n  \n      m.allocations.colors     = colorAllocation;\n      m.uniforms.colors        = colorAllocation.buffer;\n      m.allocations.transforms = transformAllocation;\n      m.uniforms.transforms    = transformAllocation.buffer;\n  \n      return m\n    }\n  })\n}\n\nvar square = function (x, y, z, w) {\n  return [\n    [x - w,  y - w, z, 1],\n    [x - w,  y + w, z, 1],\n    [x + w,  y - w, z, 1],\n    [x + w,  y + w, z, 1]\n  ]\n}\nvar red   = {id: 'red',   color: [1, 0, 0, 1]}\nvar green = {id: 'green', color: [0, 1, 0, 1]}\nvar blue  = {id: 'blue',  color: [0, 0, 1, 1]}\nvar white = {id: 'white', color: [1, 1, 1, 1]}\n\nvar transforms = [];\ntransforms.push(new Transform());\n\nscreen.on('frame', function() {\n  transforms[0].rotateBy(Math.PI/8/10, 0, 0);\n  transforms[0].trigger('change', transforms[0]);\n})\n\nvar quads  = getRenderable()\nscreen.addRenderable(quads)\nquads.add({\n  allocations : {\n    colors : [red],\n    transforms : [transforms[0]]\n  },\n  vertices : square(.25, 0, .7, .05)\n})\nquads.add({\n  allocations : {\n    colors : [green],\n    transforms : [transforms[0]]\n  },\n  vertices : square(0, .25, .7, .05)\n})\nquads.add({\n  allocations : {\n    colors : [blue],\n    transforms : [transforms[0]]\n  },\n  vertices : square(0, 0, .9, .05)\n})\nquads.add({\n  allocations : {\n    colors : [white],\n    transforms : [transforms[0]]\n  },\n  vertices : square(0, 0, .7, .01)\n})\n\n\nscreen.beginFrameRendering(false)\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./examples/transforms/index.js\n ** module id = 0\n ** module chunks = 7\n **/"],"sourceRoot":""}